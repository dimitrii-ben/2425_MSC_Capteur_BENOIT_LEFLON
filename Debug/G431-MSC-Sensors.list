
G431-MSC-Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039ec  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003bcc  08003bcc  00004bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c64  08003c64  0000506c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c64  08003c64  00004c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c6c  08003c6c  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c6c  08003c6c  00004c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c70  08003c70  00004c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003c74  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000006c  08003ce0  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08003ce0  000052f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f99b  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000214c  00000000  00000000  00014a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00016b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d0  00000000  00000000  00017830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd9d  00000000  00000000  00018200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011135  00000000  00000000  00035f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b985e  00000000  00000000  000470d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100930  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038fc  00000000  00000000  00100974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00104270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003bb4 	.word	0x08003bb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08003bb4 	.word	0x08003bb4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <setup>:

extern UART_HandleTypeDef hlpuart1;
uint8_t prompt[15] = "\nSTM32G431 >> ";
uint8_t message[50];

void setup() {
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	strcpy((char*)message, "MSC 2024 - Capteurs\r");
 80005c4:	4a11      	ldr	r2, [pc, #68]	@ (800060c <setup+0x4c>)
 80005c6:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <setup+0x50>)
 80005c8:	4614      	mov	r4, r2
 80005ca:	461d      	mov	r5, r3
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005d4:	6020      	str	r0, [r4, #0]
 80005d6:	3404      	adds	r4, #4
 80005d8:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&hlpuart1, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 80005da:	480e      	ldr	r0, [pc, #56]	@ (8000614 <setup+0x54>)
 80005dc:	f7ff fe20 	bl	8000220 <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	490a      	ldr	r1, [pc, #40]	@ (8000614 <setup+0x54>)
 80005ea:	480b      	ldr	r0, [pc, #44]	@ (8000618 <setup+0x58>)
 80005ec:	f001 ffb2 	bl	8002554 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, message, strlen((char*)message), HAL_MAX_DELAY);
 80005f0:	4806      	ldr	r0, [pc, #24]	@ (800060c <setup+0x4c>)
 80005f2:	f7ff fe15 	bl	8000220 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	4903      	ldr	r1, [pc, #12]	@ (800060c <setup+0x4c>)
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <setup+0x58>)
 8000602:	f001 ffa7 	bl	8002554 <HAL_UART_Transmit>
}
 8000606:	bf00      	nop
 8000608:	bdb0      	pop	{r4, r5, r7, pc}
 800060a:	bf00      	nop
 800060c:	20000088 	.word	0x20000088
 8000610:	08003bcc 	.word	0x08003bcc
 8000614:	20000000 	.word	0x20000000
 8000618:	20000114 	.word	0x20000114

0800061c <loop>:

void loop(){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	static uint32_t cnt = 0;
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000620:	2120      	movs	r1, #32
 8000622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000626:	f000 fe27 	bl	8001278 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800062a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800062e:	f000 fb83 	bl	8000d38 <HAL_Delay>
	snprintf((char*)message, 10, "cnt : %d\r", (int)cnt++);
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <loop+0x5c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	490f      	ldr	r1, [pc, #60]	@ (8000678 <loop+0x5c>)
 800063a:	600a      	str	r2, [r1, #0]
 800063c:	4a0f      	ldr	r2, [pc, #60]	@ (800067c <loop+0x60>)
 800063e:	210a      	movs	r1, #10
 8000640:	480f      	ldr	r0, [pc, #60]	@ (8000680 <loop+0x64>)
 8000642:	f002 fe03 	bl	800324c <sniprintf>
	HAL_UART_Transmit(&hlpuart1, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000646:	480f      	ldr	r0, [pc, #60]	@ (8000684 <loop+0x68>)
 8000648:	f7ff fdea 	bl	8000220 <strlen>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
 8000654:	490b      	ldr	r1, [pc, #44]	@ (8000684 <loop+0x68>)
 8000656:	480c      	ldr	r0, [pc, #48]	@ (8000688 <loop+0x6c>)
 8000658:	f001 ff7c 	bl	8002554 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, message, strlen((char*)message), HAL_MAX_DELAY);
 800065c:	4808      	ldr	r0, [pc, #32]	@ (8000680 <loop+0x64>)
 800065e:	f7ff fddf 	bl	8000220 <strlen>
 8000662:	4603      	mov	r3, r0
 8000664:	b29a      	uxth	r2, r3
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	4905      	ldr	r1, [pc, #20]	@ (8000680 <loop+0x64>)
 800066c:	4806      	ldr	r0, [pc, #24]	@ (8000688 <loop+0x6c>)
 800066e:	f001 ff71 	bl	8002554 <HAL_UART_Transmit>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000bc 	.word	0x200000bc
 800067c:	08003be4 	.word	0x08003be4
 8000680:	20000088 	.word	0x20000088
 8000684:	20000000 	.word	0x20000000
 8000688:	20000114 	.word	0x20000114

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fae1 	bl	8000c56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f80b 	bl	80006ae <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f8de 	bl	8000858 <MX_GPIO_Init>
  MX_I2C1_Init();
 800069c:	f000 f852 	bl	8000744 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80006a0:	f000 f890 	bl	80007c4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80006a4:	f7ff ff8c 	bl	80005c0 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80006a8:	f7ff ffb8 	bl	800061c <loop>
 80006ac:	e7fc      	b.n	80006a8 <main+0x1c>

080006ae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b094      	sub	sp, #80	@ 0x50
 80006b2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b4:	f107 0318 	add.w	r3, r7, #24
 80006b8:	2238      	movs	r2, #56	@ 0x38
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fdf9 	bl	80032b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 ff1d 	bl	8001510 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d6:	2302      	movs	r3, #2
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2340      	movs	r3, #64	@ 0x40
 80006e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006f0:	2355      	movs	r3, #85	@ 0x55
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0318 	add.w	r3, r7, #24
 8000704:	4618      	mov	r0, r3
 8000706:	f000 ffb7 	bl	8001678 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000710:	f000 f908 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2303      	movs	r3, #3
 800071a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2104      	movs	r1, #4
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fab5 	bl	8001c9c <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000738:	f000 f8f4 	bl	8000924 <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3750      	adds	r7, #80	@ 0x50
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000748:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <MX_I2C1_Init+0x74>)
 800074a:	4a1c      	ldr	r2, [pc, #112]	@ (80007bc <MX_I2C1_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800074e:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <MX_I2C1_Init+0x74>)
 8000750:	4a1b      	ldr	r2, [pc, #108]	@ (80007c0 <MX_I2C1_Init+0x7c>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <MX_I2C1_Init+0x74>)
 800075c:	2201      	movs	r2, #1
 800075e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_I2C1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_I2C1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077e:	480e      	ldr	r0, [pc, #56]	@ (80007b8 <MX_I2C1_Init+0x74>)
 8000780:	f000 fd94 	bl	80012ac <HAL_I2C_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800078a:	f000 f8cb 	bl	8000924 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	4809      	ldr	r0, [pc, #36]	@ (80007b8 <MX_I2C1_Init+0x74>)
 8000792:	f000 fe26 	bl	80013e2 <HAL_I2CEx_ConfigAnalogFilter>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800079c:	f000 f8c2 	bl	8000924 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a0:	2100      	movs	r1, #0
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_I2C1_Init+0x74>)
 80007a4:	f000 fe68 	bl	8001478 <HAL_I2CEx_ConfigDigitalFilter>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ae:	f000 f8b9 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000c0 	.word	0x200000c0
 80007bc:	40005400 	.word	0x40005400
 80007c0:	40b285c2 	.word	0x40b285c2

080007c4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007c8:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007ca:	4a22      	ldr	r2, [pc, #136]	@ (8000854 <MX_LPUART1_UART_Init+0x90>)
 80007cc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007ce:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f4:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007fa:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000806:	4812      	ldr	r0, [pc, #72]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 8000808:	f001 fe54 	bl	80024b4 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f887 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	480d      	ldr	r0, [pc, #52]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 800081a:	f002 fc4d 	bl	80030b8 <HAL_UARTEx_SetTxFifoThreshold>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000824:	f000 f87e 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	4809      	ldr	r0, [pc, #36]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 800082c:	f002 fc82 	bl	8003134 <HAL_UARTEx_SetRxFifoThreshold>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000836:	f000 f875 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 800083c:	f002 fc03 	bl	8003046 <HAL_UARTEx_DisableFifoMode>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000846:	f000 f86d 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000114 	.word	0x20000114
 8000854:	40008000 	.word	0x40008000

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	@ 0x28
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b2b      	ldr	r3, [pc, #172]	@ (800091c <MX_GPIO_Init+0xc4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	4a2a      	ldr	r2, [pc, #168]	@ (800091c <MX_GPIO_Init+0xc4>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087a:	4b28      	ldr	r3, [pc, #160]	@ (800091c <MX_GPIO_Init+0xc4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	4b25      	ldr	r3, [pc, #148]	@ (800091c <MX_GPIO_Init+0xc4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	4a24      	ldr	r2, [pc, #144]	@ (800091c <MX_GPIO_Init+0xc4>)
 800088c:	f043 0320 	orr.w	r3, r3, #32
 8000890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000892:	4b22      	ldr	r3, [pc, #136]	@ (800091c <MX_GPIO_Init+0xc4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	f003 0320 	and.w	r3, r3, #32
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b1f      	ldr	r3, [pc, #124]	@ (800091c <MX_GPIO_Init+0xc4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	4a1e      	ldr	r2, [pc, #120]	@ (800091c <MX_GPIO_Init+0xc4>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008aa:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <MX_GPIO_Init+0xc4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b19      	ldr	r3, [pc, #100]	@ (800091c <MX_GPIO_Init+0xc4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	4a18      	ldr	r2, [pc, #96]	@ (800091c <MX_GPIO_Init+0xc4>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c2:	4b16      	ldr	r3, [pc, #88]	@ (800091c <MX_GPIO_Init+0xc4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d6:	f000 fcb7 	bl	8001248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	480c      	ldr	r0, [pc, #48]	@ (8000920 <MX_GPIO_Init+0xc8>)
 80008f0:	f000 fb28 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008f4:	2320      	movs	r3, #32
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090e:	f000 fb19 	bl	8000f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	@ 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000
 8000920:	48000800 	.word	0x48000800

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <HAL_MspInit+0x44>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093a:	4a0e      	ldr	r2, [pc, #56]	@ (8000974 <HAL_MspInit+0x44>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6613      	str	r3, [r2, #96]	@ 0x60
 8000942:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <HAL_MspInit+0x44>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_MspInit+0x44>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000952:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <HAL_MspInit+0x44>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000958:	6593      	str	r3, [r2, #88]	@ 0x58
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_MspInit+0x44>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800095e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000966:	f000 fe77 	bl	8001658 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b09c      	sub	sp, #112	@ 0x70
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000990:	f107 0318 	add.w	r3, r7, #24
 8000994:	2244      	movs	r2, #68	@ 0x44
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fc8b 	bl	80032b4 <memset>
  if(hi2c->Instance==I2C1)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a2d      	ldr	r2, [pc, #180]	@ (8000a58 <HAL_I2C_MspInit+0xe0>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d153      	bne.n	8000a50 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009a8:	2340      	movs	r3, #64	@ 0x40
 80009aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b0:	f107 0318 	add.w	r3, r7, #24
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 fb8d 	bl	80020d4 <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009c0:	f7ff ffb0 	bl	8000924 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b25      	ldr	r3, [pc, #148]	@ (8000a5c <HAL_I2C_MspInit+0xe4>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c8:	4a24      	ldr	r2, [pc, #144]	@ (8000a5c <HAL_I2C_MspInit+0xe4>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d0:	4b22      	ldr	r3, [pc, #136]	@ (8000a5c <HAL_I2C_MspInit+0xe4>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <HAL_I2C_MspInit+0xe4>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e0:	4a1e      	ldr	r2, [pc, #120]	@ (8000a5c <HAL_I2C_MspInit+0xe4>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <HAL_I2C_MspInit+0xe4>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ec:	f003 0302 	and.w	r3, r3, #2
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fa:	2312      	movs	r3, #18
 80009fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a06:	2304      	movs	r3, #4
 8000a08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a14:	f000 fa96 	bl	8000f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a18:	2380      	movs	r3, #128	@ 0x80
 8000a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1c:	2312      	movs	r3, #18
 8000a1e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a30:	4619      	mov	r1, r3
 8000a32:	480b      	ldr	r0, [pc, #44]	@ (8000a60 <HAL_I2C_MspInit+0xe8>)
 8000a34:	f000 fa86 	bl	8000f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_I2C_MspInit+0xe4>)
 8000a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <HAL_I2C_MspInit+0xe4>)
 8000a3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <HAL_I2C_MspInit+0xe4>)
 8000a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a50:	bf00      	nop
 8000a52:	3770      	adds	r7, #112	@ 0x70
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	48000400 	.word	0x48000400

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b09a      	sub	sp, #104	@ 0x68
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	2244      	movs	r2, #68	@ 0x44
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 fc15 	bl	80032b4 <memset>
  if(huart->Instance==LPUART1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b0c <HAL_UART_MspInit+0xa8>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d136      	bne.n	8000b02 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a94:	2320      	movs	r3, #32
 8000a96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fb17 	bl	80020d4 <HAL_RCCEx_PeriphCLKConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aac:	f7ff ff3a 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ab0:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <HAL_UART_MspInit+0xac>)
 8000ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ab4:	4a16      	ldr	r2, [pc, #88]	@ (8000b10 <HAL_UART_MspInit+0xac>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000abc:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <HAL_UART_MspInit+0xac>)
 8000abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <HAL_UART_MspInit+0xac>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000acc:	4a10      	ldr	r2, [pc, #64]	@ (8000b10 <HAL_UART_MspInit+0xac>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <HAL_UART_MspInit+0xac>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000af0:	230c      	movs	r3, #12
 8000af2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000af8:	4619      	mov	r1, r3
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000afe:	f000 fa21 	bl	8000f44 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000b02:	bf00      	nop
 8000b04:	3768      	adds	r7, #104	@ 0x68
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40008000 	.word	0x40008000
 8000b10:	40021000 	.word	0x40021000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <NMI_Handler+0x4>

08000b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6a:	f000 f8c7 	bl	8000cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b7c:	4a14      	ldr	r2, [pc, #80]	@ (8000bd0 <_sbrk+0x5c>)
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <_sbrk+0x60>)
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b88:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <_sbrk+0x64>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	@ (8000bdc <_sbrk+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d207      	bcs.n	8000bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba4:	f002 fb8e 	bl	80032c4 <__errno>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	e009      	b.n	8000bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bba:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <_sbrk+0x64>)
 8000bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20008000 	.word	0x20008000
 8000bd4:	00000400 	.word	0x00000400
 8000bd8:	200001a8 	.word	0x200001a8
 8000bdc:	200002f8 	.word	0x200002f8

08000be0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c04:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c06:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c08:	f7ff ffea 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	@ (8000c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <LoopForever+0xe>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	@ (8000c50 <LoopForever+0x16>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000c32:	f002 fb4d 	bl	80032d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c36:	f7ff fd29 	bl	800068c <main>

08000c3a <LoopForever>:

LoopForever:
    b LoopForever
 8000c3a:	e7fe      	b.n	8000c3a <LoopForever>
  ldr   r0, =_estack
 8000c3c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c48:	08003c74 	.word	0x08003c74
  ldr r2, =_sbss
 8000c4c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c50:	200002f8 	.word	0x200002f8

08000c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC1_2_IRQHandler>

08000c56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f93d 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c66:	2000      	movs	r0, #0
 8000c68:	f000 f80e 	bl	8000c88 <HAL_InitTick>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	71fb      	strb	r3, [r7, #7]
 8000c76:	e001      	b.n	8000c7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c78:	f7ff fe5a 	bl	8000930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]

}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <HAL_InitTick+0x68>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d022      	beq.n	8000ce2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <HAL_InitTick+0x6c>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <HAL_InitTick+0x68>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ca8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 f93a 	bl	8000f2a <HAL_SYSTICK_Config>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10f      	bne.n	8000cdc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b0f      	cmp	r3, #15
 8000cc0:	d809      	bhi.n	8000cd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cca:	f000 f914 	bl	8000ef6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <HAL_InitTick+0x70>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	e007      	b.n	8000ce6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e004      	b.n	8000ce6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e001      	b.n	8000ce6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000018 	.word	0x20000018
 8000cf4:	20000010 	.word	0x20000010
 8000cf8:	20000014 	.word	0x20000014

08000cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <HAL_IncTick+0x1c>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <HAL_IncTick+0x20>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a03      	ldr	r2, [pc, #12]	@ (8000d18 <HAL_IncTick+0x1c>)
 8000d0c:	6013      	str	r3, [r2, #0]
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	200001ac 	.word	0x200001ac
 8000d1c:	20000018 	.word	0x20000018

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	200001ac 	.word	0x200001ac

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff ffee 	bl	8000d20 <HAL_GetTick>
 8000d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d50:	d004      	beq.n	8000d5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d52:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <HAL_Delay+0x40>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	4413      	add	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d5c:	bf00      	nop
 8000d5e:	f7ff ffdf 	bl	8000d20 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d8f7      	bhi.n	8000d5e <HAL_Delay+0x26>
  {
  }
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000018 	.word	0x20000018

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	@ (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	@ (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	@ 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	@ 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eac:	d301      	bcc.n	8000eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00f      	b.n	8000ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <SysTick_Config+0x40>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eba:	210f      	movs	r1, #15
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f7ff ff8e 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <SysTick_Config+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eca:	4b04      	ldr	r3, [pc, #16]	@ (8000edc <SysTick_Config+0x40>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	e000e010 	.word	0xe000e010

08000ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff47 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff5e 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff90 	bl	8000e34 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5f 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffb2 	bl	8000e9c <SysTick_Config>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f52:	e15a      	b.n	800120a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	4013      	ands	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 814c 	beq.w	8001204 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d005      	beq.n	8000f84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d130      	bne.n	8000fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fba:	2201      	movs	r2, #1
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	091b      	lsrs	r3, r3, #4
 8000fd0:	f003 0201 	and.w	r2, r3, #1
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d017      	beq.n	8001022 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d123      	bne.n	8001076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	220f      	movs	r2, #15
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	6939      	ldr	r1, [r7, #16]
 8001072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0203 	and.w	r2, r3, #3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 80a6 	beq.w	8001204 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001228 <HAL_GPIO_Init+0x2e4>)
 80010ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010bc:	4a5a      	ldr	r2, [pc, #360]	@ (8001228 <HAL_GPIO_Init+0x2e4>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80010c4:	4b58      	ldr	r3, [pc, #352]	@ (8001228 <HAL_GPIO_Init+0x2e4>)
 80010c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d0:	4a56      	ldr	r2, [pc, #344]	@ (800122c <HAL_GPIO_Init+0x2e8>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010fa:	d01f      	beq.n	800113c <HAL_GPIO_Init+0x1f8>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a4c      	ldr	r2, [pc, #304]	@ (8001230 <HAL_GPIO_Init+0x2ec>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d019      	beq.n	8001138 <HAL_GPIO_Init+0x1f4>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a4b      	ldr	r2, [pc, #300]	@ (8001234 <HAL_GPIO_Init+0x2f0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d013      	beq.n	8001134 <HAL_GPIO_Init+0x1f0>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a4a      	ldr	r2, [pc, #296]	@ (8001238 <HAL_GPIO_Init+0x2f4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d00d      	beq.n	8001130 <HAL_GPIO_Init+0x1ec>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a49      	ldr	r2, [pc, #292]	@ (800123c <HAL_GPIO_Init+0x2f8>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d007      	beq.n	800112c <HAL_GPIO_Init+0x1e8>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a48      	ldr	r2, [pc, #288]	@ (8001240 <HAL_GPIO_Init+0x2fc>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d101      	bne.n	8001128 <HAL_GPIO_Init+0x1e4>
 8001124:	2305      	movs	r3, #5
 8001126:	e00a      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 8001128:	2306      	movs	r3, #6
 800112a:	e008      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 800112c:	2304      	movs	r3, #4
 800112e:	e006      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 8001130:	2303      	movs	r3, #3
 8001132:	e004      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 8001134:	2302      	movs	r3, #2
 8001136:	e002      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 800113c:	2300      	movs	r3, #0
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	f002 0203 	and.w	r2, r2, #3
 8001144:	0092      	lsls	r2, r2, #2
 8001146:	4093      	lsls	r3, r2
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114e:	4937      	ldr	r1, [pc, #220]	@ (800122c <HAL_GPIO_Init+0x2e8>)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800115c:	4b39      	ldr	r3, [pc, #228]	@ (8001244 <HAL_GPIO_Init+0x300>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001180:	4a30      	ldr	r2, [pc, #192]	@ (8001244 <HAL_GPIO_Init+0x300>)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001186:	4b2f      	ldr	r3, [pc, #188]	@ (8001244 <HAL_GPIO_Init+0x300>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011aa:	4a26      	ldr	r2, [pc, #152]	@ (8001244 <HAL_GPIO_Init+0x300>)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011b0:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <HAL_GPIO_Init+0x300>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001244 <HAL_GPIO_Init+0x300>)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <HAL_GPIO_Init+0x300>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011fe:	4a11      	ldr	r2, [pc, #68]	@ (8001244 <HAL_GPIO_Init+0x300>)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3301      	adds	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	f47f ae9d 	bne.w	8000f54 <HAL_GPIO_Init+0x10>
  }
}
 800121a:	bf00      	nop
 800121c:	bf00      	nop
 800121e:	371c      	adds	r7, #28
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40021000 	.word	0x40021000
 800122c:	40010000 	.word	0x40010000
 8001230:	48000400 	.word	0x48000400
 8001234:	48000800 	.word	0x48000800
 8001238:	48000c00 	.word	0x48000c00
 800123c:	48001000 	.word	0x48001000
 8001240:	48001400 	.word	0x48001400
 8001244:	40010400 	.word	0x40010400

08001248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
 8001254:	4613      	mov	r3, r2
 8001256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001258:	787b      	ldrb	r3, [r7, #1]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800125e:	887a      	ldrh	r2, [r7, #2]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001264:	e002      	b.n	800126c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4013      	ands	r3, r2
 8001290:	041a      	lsls	r2, r3, #16
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43d9      	mvns	r1, r3
 8001296:	887b      	ldrh	r3, [r7, #2]
 8001298:	400b      	ands	r3, r1
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e08d      	b.n	80013da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d106      	bne.n	80012d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fb50 	bl	8000978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2224      	movs	r2, #36	@ 0x24
 80012dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0201 	bic.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800130c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d107      	bne.n	8001326 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	e006      	b.n	8001334 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001332:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d108      	bne.n	800134e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	e007      	b.n	800135e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800135c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800136c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001370:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001380:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691a      	ldr	r2, [r3, #16]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69d9      	ldr	r1, [r3, #28]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1a      	ldr	r2, [r3, #32]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0201 	orr.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2220      	movs	r2, #32
 80013c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b20      	cmp	r3, #32
 80013f6:	d138      	bne.n	800146a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001402:	2302      	movs	r3, #2
 8001404:	e032      	b.n	800146c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2224      	movs	r2, #36	@ 0x24
 8001412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0201 	bic.w	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001434:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6819      	ldr	r1, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f042 0201 	orr.w	r2, r2, #1
 8001454:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2220      	movs	r2, #32
 800145a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e000      	b.n	800146c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800146a:	2302      	movs	r3, #2
  }
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b20      	cmp	r3, #32
 800148c:	d139      	bne.n	8001502 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001494:	2b01      	cmp	r3, #1
 8001496:	d101      	bne.n	800149c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001498:	2302      	movs	r3, #2
 800149a:	e033      	b.n	8001504 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2224      	movs	r2, #36	@ 0x24
 80014a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80014ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0201 	orr.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2220      	movs	r2, #32
 80014f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001502:	2302      	movs	r3, #2
  }
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d141      	bne.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800151e:	4b4b      	ldr	r3, [pc, #300]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800152a:	d131      	bne.n	8001590 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800152c:	4b47      	ldr	r3, [pc, #284]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001532:	4a46      	ldr	r2, [pc, #280]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001538:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800153c:	4b43      	ldr	r3, [pc, #268]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001544:	4a41      	ldr	r2, [pc, #260]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800154c:	4b40      	ldr	r3, [pc, #256]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2232      	movs	r2, #50	@ 0x32
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	4a3f      	ldr	r2, [pc, #252]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	0c9b      	lsrs	r3, r3, #18
 800155e:	3301      	adds	r3, #1
 8001560:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001562:	e002      	b.n	800156a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3b01      	subs	r3, #1
 8001568:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800156a:	4b38      	ldr	r3, [pc, #224]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001576:	d102      	bne.n	800157e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f2      	bne.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800157e:	4b33      	ldr	r3, [pc, #204]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800158a:	d158      	bne.n	800163e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e057      	b.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001590:	4b2e      	ldr	r3, [pc, #184]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001596:	4a2d      	ldr	r2, [pc, #180]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800159c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015a0:	e04d      	b.n	800163e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015a8:	d141      	bne.n	800162e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015aa:	4b28      	ldr	r3, [pc, #160]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015b6:	d131      	bne.n	800161c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015b8:	4b24      	ldr	r3, [pc, #144]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015be:	4a23      	ldr	r2, [pc, #140]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c8:	4b20      	ldr	r3, [pc, #128]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015d0:	4a1e      	ldr	r2, [pc, #120]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2232      	movs	r2, #50	@ 0x32
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015e4:	fba2 2303 	umull	r2, r3, r2, r3
 80015e8:	0c9b      	lsrs	r3, r3, #18
 80015ea:	3301      	adds	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ee:	e002      	b.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001602:	d102      	bne.n	800160a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f2      	bne.n	80015f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001616:	d112      	bne.n	800163e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e011      	b.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001628:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800162c:	e007      	b.n	800163e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800162e:	4b07      	ldr	r3, [pc, #28]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001636:	4a05      	ldr	r2, [pc, #20]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001638:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800163c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40007000 	.word	0x40007000
 8001650:	20000010 	.word	0x20000010
 8001654:	431bde83 	.word	0x431bde83

08001658 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800165c:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a04      	ldr	r2, [pc, #16]	@ (8001674 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001662:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001666:	6093      	str	r3, [r2, #8]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40007000 	.word	0x40007000

08001678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e2fe      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d075      	beq.n	8001782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001696:	4b97      	ldr	r3, [pc, #604]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016a0:	4b94      	ldr	r3, [pc, #592]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b0c      	cmp	r3, #12
 80016ae:	d102      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3e>
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d002      	beq.n	80016bc <HAL_RCC_OscConfig+0x44>
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d10b      	bne.n	80016d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	4b8d      	ldr	r3, [pc, #564]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d05b      	beq.n	8001780 <HAL_RCC_OscConfig+0x108>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d157      	bne.n	8001780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e2d9      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016dc:	d106      	bne.n	80016ec <HAL_RCC_OscConfig+0x74>
 80016de:	4b85      	ldr	r3, [pc, #532]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a84      	ldr	r2, [pc, #528]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e01d      	b.n	8001728 <HAL_RCC_OscConfig+0xb0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x98>
 80016f6:	4b7f      	ldr	r3, [pc, #508]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a7e      	ldr	r2, [pc, #504]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b7c      	ldr	r3, [pc, #496]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7b      	ldr	r2, [pc, #492]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e00b      	b.n	8001728 <HAL_RCC_OscConfig+0xb0>
 8001710:	4b78      	ldr	r3, [pc, #480]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a77      	ldr	r2, [pc, #476]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b75      	ldr	r3, [pc, #468]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a74      	ldr	r2, [pc, #464]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d013      	beq.n	8001758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff faf6 	bl	8000d20 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff faf2 	bl	8000d20 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	@ 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e29e      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800174a:	4b6a      	ldr	r3, [pc, #424]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0xc0>
 8001756:	e014      	b.n	8001782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff fae2 	bl	8000d20 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff fade 	bl	8000d20 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	@ 0x64
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e28a      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001772:	4b60      	ldr	r3, [pc, #384]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0xe8>
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d075      	beq.n	800187a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800178e:	4b59      	ldr	r3, [pc, #356]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001798:	4b56      	ldr	r3, [pc, #344]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2b0c      	cmp	r3, #12
 80017a6:	d102      	bne.n	80017ae <HAL_RCC_OscConfig+0x136>
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d002      	beq.n	80017b4 <HAL_RCC_OscConfig+0x13c>
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d11f      	bne.n	80017f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b4:	4b4f      	ldr	r3, [pc, #316]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x154>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e25d      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	4b49      	ldr	r3, [pc, #292]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	061b      	lsls	r3, r3, #24
 80017da:	4946      	ldr	r1, [pc, #280]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017e0:	4b45      	ldr	r3, [pc, #276]	@ (80018f8 <HAL_RCC_OscConfig+0x280>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fa4f 	bl	8000c88 <HAL_InitTick>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d043      	beq.n	8001878 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e249      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d023      	beq.n	8001844 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017fc:	4b3d      	ldr	r3, [pc, #244]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a3c      	ldr	r2, [pc, #240]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fa8a 	bl	8000d20 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001810:	f7ff fa86 	bl	8000d20 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e232      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001822:	4b34      	ldr	r3, [pc, #208]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4b31      	ldr	r3, [pc, #196]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	061b      	lsls	r3, r3, #24
 800183c:	492d      	ldr	r1, [pc, #180]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
 8001842:	e01a      	b.n	800187a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001844:	4b2b      	ldr	r3, [pc, #172]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a2a      	ldr	r2, [pc, #168]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800184a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800184e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fa66 	bl	8000d20 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff fa62 	bl	8000d20 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e20e      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800186a:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x1e0>
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001878:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d041      	beq.n	800190a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d01c      	beq.n	80018c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188e:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001894:	4a17      	ldr	r2, [pc, #92]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189e:	f7ff fa3f 	bl	8000d20 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a6:	f7ff fa3b 	bl	8000d20 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e1e7      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b8:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80018ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0ef      	beq.n	80018a6 <HAL_RCC_OscConfig+0x22e>
 80018c6:	e020      	b.n	800190a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80018ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ce:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff fa22 	bl	8000d20 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018de:	e00d      	b.n	80018fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff fa1e 	bl	8000d20 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d906      	bls.n	80018fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e1ca      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ea      	bne.n	80018e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80a6 	beq.w	8001a64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800191c:	4b84      	ldr	r3, [pc, #528]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_OscConfig+0x2b4>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x2b6>
 800192c:	2300      	movs	r3, #0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00d      	beq.n	800194e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4b7f      	ldr	r3, [pc, #508]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001936:	4a7e      	ldr	r2, [pc, #504]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800193c:	6593      	str	r3, [r2, #88]	@ 0x58
 800193e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800194a:	2301      	movs	r3, #1
 800194c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800194e:	4b79      	ldr	r3, [pc, #484]	@ (8001b34 <HAL_RCC_OscConfig+0x4bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d118      	bne.n	800198c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800195a:	4b76      	ldr	r3, [pc, #472]	@ (8001b34 <HAL_RCC_OscConfig+0x4bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a75      	ldr	r2, [pc, #468]	@ (8001b34 <HAL_RCC_OscConfig+0x4bc>)
 8001960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001966:	f7ff f9db 	bl	8000d20 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196e:	f7ff f9d7 	bl	8000d20 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e183      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001980:	4b6c      	ldr	r3, [pc, #432]	@ (8001b34 <HAL_RCC_OscConfig+0x4bc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d108      	bne.n	80019a6 <HAL_RCC_OscConfig+0x32e>
 8001994:	4b66      	ldr	r3, [pc, #408]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800199a:	4a65      	ldr	r2, [pc, #404]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019a4:	e024      	b.n	80019f0 <HAL_RCC_OscConfig+0x378>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b05      	cmp	r3, #5
 80019ac:	d110      	bne.n	80019d0 <HAL_RCC_OscConfig+0x358>
 80019ae:	4b60      	ldr	r3, [pc, #384]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b4:	4a5e      	ldr	r2, [pc, #376]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019be:	4b5c      	ldr	r3, [pc, #368]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c4:	4a5a      	ldr	r2, [pc, #360]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019ce:	e00f      	b.n	80019f0 <HAL_RCC_OscConfig+0x378>
 80019d0:	4b57      	ldr	r3, [pc, #348]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d6:	4a56      	ldr	r2, [pc, #344]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019e0:	4b53      	ldr	r3, [pc, #332]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e6:	4a52      	ldr	r2, [pc, #328]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d016      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff f992 	bl	8000d20 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7ff f98e 	bl	8000d20 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e138      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a16:	4b46      	ldr	r3, [pc, #280]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ed      	beq.n	8001a00 <HAL_RCC_OscConfig+0x388>
 8001a24:	e015      	b.n	8001a52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a26:	f7ff f97b 	bl	8000d20 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff f977 	bl	8000d20 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e121      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a44:	4b3a      	ldr	r3, [pc, #232]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ed      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a52:	7ffb      	ldrb	r3, [r7, #31]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a58:	4b35      	ldr	r3, [pc, #212]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5c:	4a34      	ldr	r2, [pc, #208]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a62:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d03c      	beq.n	8001aea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a78:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff f94a 	bl	8000d20 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a90:	f7ff f946 	bl	8000d20 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0f2      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aa2:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0ef      	beq.n	8001a90 <HAL_RCC_OscConfig+0x418>
 8001ab0:	e01b      	b.n	8001aea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f92d 	bl	8000d20 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aca:	f7ff f929 	bl	8000d20 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e0d5      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ef      	bne.n	8001aca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80c9 	beq.w	8001c86 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001af4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b0c      	cmp	r3, #12
 8001afe:	f000 8083 	beq.w	8001c08 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d15e      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001b10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7ff f903 	bl	8000d20 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1c:	e00c      	b.n	8001b38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff f8ff 	bl	8000d20 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d905      	bls.n	8001b38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0ab      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b38:	4b55      	ldr	r3, [pc, #340]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1ec      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b44:	4b52      	ldr	r3, [pc, #328]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	4b52      	ldr	r3, [pc, #328]	@ (8001c94 <HAL_RCC_OscConfig+0x61c>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6a11      	ldr	r1, [r2, #32]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b54:	3a01      	subs	r2, #1
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	4311      	orrs	r1, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001b5e:	0212      	lsls	r2, r2, #8
 8001b60:	4311      	orrs	r1, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b66:	0852      	lsrs	r2, r2, #1
 8001b68:	3a01      	subs	r2, #1
 8001b6a:	0552      	lsls	r2, r2, #21
 8001b6c:	4311      	orrs	r1, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b72:	0852      	lsrs	r2, r2, #1
 8001b74:	3a01      	subs	r2, #1
 8001b76:	0652      	lsls	r2, r2, #25
 8001b78:	4311      	orrs	r1, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b7e:	06d2      	lsls	r2, r2, #27
 8001b80:	430a      	orrs	r2, r1
 8001b82:	4943      	ldr	r1, [pc, #268]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b88:	4b41      	ldr	r3, [pc, #260]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a40      	ldr	r2, [pc, #256]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b94:	4b3e      	ldr	r3, [pc, #248]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4a3d      	ldr	r2, [pc, #244]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f8be 	bl	8000d20 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff f8ba 	bl	8000d20 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e066      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	4b35      	ldr	r3, [pc, #212]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x530>
 8001bc6:	e05e      	b.n	8001c86 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc8:	4b31      	ldr	r3, [pc, #196]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a30      	ldr	r2, [pc, #192]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001bce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f8a4 	bl	8000d20 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff f8a0 	bl	8000d20 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e04c      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bee:	4b28      	ldr	r3, [pc, #160]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001bfa:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	4924      	ldr	r1, [pc, #144]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001c00:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	60cb      	str	r3, [r1, #12]
 8001c06:	e03e      	b.n	8001c86 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e039      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f003 0203 	and.w	r2, r3, #3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d12c      	bne.n	8001c82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c32:	3b01      	subs	r3, #1
 8001c34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d123      	bne.n	8001c82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d11b      	bne.n	8001c82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d113      	bne.n	8001c82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c64:	085b      	lsrs	r3, r3, #1
 8001c66:	3b01      	subs	r3, #1
 8001c68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d109      	bne.n	8001c82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c78:	085b      	lsrs	r3, r3, #1
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	019f800c 	.word	0x019f800c
 8001c98:	feeefffc 	.word	0xfeeefffc

08001c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e11e      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b91      	ldr	r3, [pc, #580]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d910      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b8e      	ldr	r3, [pc, #568]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 020f 	bic.w	r2, r3, #15
 8001cca:	498c      	ldr	r1, [pc, #560]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b8a      	ldr	r3, [pc, #552]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e106      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d073      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d129      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf8:	4b81      	ldr	r3, [pc, #516]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0f4      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d08:	f000 f99e 	bl	8002048 <RCC_GetSysClockFreqFromPLLSource>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4a7c      	ldr	r2, [pc, #496]	@ (8001f04 <HAL_RCC_ClockConfig+0x268>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d93f      	bls.n	8001d96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d16:	4b7a      	ldr	r3, [pc, #488]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d033      	beq.n	8001d96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d12f      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d36:	4b72      	ldr	r3, [pc, #456]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d3e:	4a70      	ldr	r2, [pc, #448]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d46:	2380      	movs	r3, #128	@ 0x80
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	e024      	b.n	8001d96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d54:	4b6a      	ldr	r3, [pc, #424]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0c6      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d64:	4b66      	ldr	r3, [pc, #408]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0be      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d74:	f000 f8ce 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4a61      	ldr	r2, [pc, #388]	@ (8001f04 <HAL_RCC_ClockConfig+0x268>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d909      	bls.n	8001d96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d82:	4b5f      	ldr	r3, [pc, #380]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d8a:	4a5d      	ldr	r2, [pc, #372]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d92:	2380      	movs	r3, #128	@ 0x80
 8001d94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d96:	4b5a      	ldr	r3, [pc, #360]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 0203 	bic.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4957      	ldr	r1, [pc, #348]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da8:	f7fe ffba 	bl	8000d20 <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7fe ffb6 	bl	8000d20 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e095      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 020c 	and.w	r2, r3, #12
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d1eb      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d023      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df0:	4b43      	ldr	r3, [pc, #268]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a42      	ldr	r2, [pc, #264]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001df6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dfa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e08:	4b3d      	ldr	r3, [pc, #244]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e10:	4a3b      	ldr	r2, [pc, #236]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e18:	4b39      	ldr	r3, [pc, #228]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4936      	ldr	r1, [pc, #216]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2b80      	cmp	r3, #128	@ 0x80
 8001e30:	d105      	bne.n	8001e3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e32:	4b33      	ldr	r3, [pc, #204]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	4a32      	ldr	r2, [pc, #200]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d21d      	bcs.n	8001e88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f023 020f 	bic.w	r2, r3, #15
 8001e54:	4929      	ldr	r1, [pc, #164]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e5c:	f7fe ff60 	bl	8000d20 <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7fe ff5c 	bl	8000d20 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e03b      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1ed      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e94:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4917      	ldr	r1, [pc, #92]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	490f      	ldr	r1, [pc, #60]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ec6:	f000 f825 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	490c      	ldr	r1, [pc, #48]	@ (8001f08 <HAL_RCC_ClockConfig+0x26c>)
 8001ed8:	5ccb      	ldrb	r3, [r1, r3]
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <HAL_RCC_ClockConfig+0x274>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fecc 	bl	8000c88 <HAL_InitTick>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40022000 	.word	0x40022000
 8001f00:	40021000 	.word	0x40021000
 8001f04:	04c4b400 	.word	0x04c4b400
 8001f08:	08003bf0 	.word	0x08003bf0
 8001f0c:	20000010 	.word	0x20000010
 8001f10:	20000014 	.word	0x20000014

08001f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d102      	bne.n	8001f2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f26:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	e047      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f2c:	4b27      	ldr	r3, [pc, #156]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d102      	bne.n	8001f3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f38:	4b26      	ldr	r3, [pc, #152]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	e03e      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f3e:	4b23      	ldr	r3, [pc, #140]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b0c      	cmp	r3, #12
 8001f48:	d136      	bne.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f4a:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f54:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	3301      	adds	r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f68:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	4a16      	ldr	r2, [pc, #88]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f72:	68d2      	ldr	r2, [r2, #12]
 8001f74:	0a12      	lsrs	r2, r2, #8
 8001f76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
      break;
 8001f80:	e00c      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f82:	4a13      	ldr	r2, [pc, #76]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4a10      	ldr	r2, [pc, #64]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8c:	68d2      	ldr	r2, [r2, #12]
 8001f8e:	0a12      	lsrs	r2, r2, #8
 8001f90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f94:	fb02 f303 	mul.w	r3, r2, r3
 8001f98:	617b      	str	r3, [r7, #20]
      break;
 8001f9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0e5b      	lsrs	r3, r3, #25
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	e001      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fbc:	693b      	ldr	r3, [r7, #16]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	00f42400 	.word	0x00f42400
 8001fd4:	016e3600 	.word	0x016e3600

08001fd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	@ (8001fec <HAL_RCC_GetHCLKFreq+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000010 	.word	0x20000010

08001ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ff4:	f7ff fff0 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4904      	ldr	r1, [pc, #16]	@ (8002018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	08003c00 	.word	0x08003c00

0800201c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002020:	f7ff ffda 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8002024:	4602      	mov	r2, r0
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	0adb      	lsrs	r3, r3, #11
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	4904      	ldr	r1, [pc, #16]	@ (8002044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002032:	5ccb      	ldrb	r3, [r1, r3]
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	08003c00 	.word	0x08003c00

08002048 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800204e:	4b1e      	ldr	r3, [pc, #120]	@ (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002058:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d10c      	bne.n	8002086 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800206c:	4a17      	ldr	r2, [pc, #92]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002076:	68d2      	ldr	r2, [r2, #12]
 8002078:	0a12      	lsrs	r2, r2, #8
 800207a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	617b      	str	r3, [r7, #20]
    break;
 8002084:	e00c      	b.n	80020a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002086:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	fbb2 f3f3 	udiv	r3, r2, r3
 800208e:	4a0e      	ldr	r2, [pc, #56]	@ (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002090:	68d2      	ldr	r2, [r2, #12]
 8002092:	0a12      	lsrs	r2, r2, #8
 8002094:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    break;
 800209e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020a0:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0e5b      	lsrs	r3, r3, #25
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	3301      	adds	r3, #1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80020ba:	687b      	ldr	r3, [r7, #4]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40021000 	.word	0x40021000
 80020cc:	016e3600 	.word	0x016e3600
 80020d0:	00f42400 	.word	0x00f42400

080020d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020dc:	2300      	movs	r3, #0
 80020de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020e0:	2300      	movs	r3, #0
 80020e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8098 	beq.w	8002222 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f6:	4b43      	ldr	r3, [pc, #268]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10d      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b40      	ldr	r3, [pc, #256]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002106:	4a3f      	ldr	r2, [pc, #252]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210c:	6593      	str	r3, [r2, #88]	@ 0x58
 800210e:	4b3d      	ldr	r3, [pc, #244]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211a:	2301      	movs	r3, #1
 800211c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800211e:	4b3a      	ldr	r3, [pc, #232]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a39      	ldr	r2, [pc, #228]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002128:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800212a:	f7fe fdf9 	bl	8000d20 <HAL_GetTick>
 800212e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002130:	e009      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002132:	f7fe fdf5 	bl	8000d20 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d902      	bls.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	74fb      	strb	r3, [r7, #19]
        break;
 8002144:	e005      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002146:	4b30      	ldr	r3, [pc, #192]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0ef      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002152:	7cfb      	ldrb	r3, [r7, #19]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d159      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002158:	4b2a      	ldr	r3, [pc, #168]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002162:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01e      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	429a      	cmp	r2, r3
 8002172:	d019      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002174:	4b23      	ldr	r3, [pc, #140]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800217e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002180:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002186:	4a1f      	ldr	r2, [pc, #124]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800218c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002190:	4b1c      	ldr	r3, [pc, #112]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002196:	4a1b      	ldr	r2, [pc, #108]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021a0:	4a18      	ldr	r2, [pc, #96]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d016      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7fe fdb5 	bl	8000d20 <HAL_GetTick>
 80021b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b8:	e00b      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7fe fdb1 	bl	8000d20 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d902      	bls.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	74fb      	strb	r3, [r7, #19]
            break;
 80021d0:	e006      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0ec      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10b      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021e6:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	4903      	ldr	r1, [pc, #12]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021fc:	e008      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021fe:	7cfb      	ldrb	r3, [r7, #19]
 8002200:	74bb      	strb	r3, [r7, #18]
 8002202:	e005      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002204:	40021000 	.word	0x40021000
 8002208:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002210:	7c7b      	ldrb	r3, [r7, #17]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d105      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002216:	4ba6      	ldr	r3, [pc, #664]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221a:	4aa5      	ldr	r2, [pc, #660]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002220:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800222e:	4ba0      	ldr	r3, [pc, #640]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002234:	f023 0203 	bic.w	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	499c      	ldr	r1, [pc, #624]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002250:	4b97      	ldr	r3, [pc, #604]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002256:	f023 020c 	bic.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	4994      	ldr	r1, [pc, #592]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002272:	4b8f      	ldr	r3, [pc, #572]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002278:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	498b      	ldr	r1, [pc, #556]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002294:	4b86      	ldr	r3, [pc, #536]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	4983      	ldr	r1, [pc, #524]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022b6:	4b7e      	ldr	r3, [pc, #504]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022bc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	497a      	ldr	r1, [pc, #488]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022d8:	4b75      	ldr	r3, [pc, #468]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022de:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	4972      	ldr	r1, [pc, #456]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022fa:	4b6d      	ldr	r3, [pc, #436]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002300:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	4969      	ldr	r1, [pc, #420]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800231c:	4b64      	ldr	r3, [pc, #400]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4961      	ldr	r1, [pc, #388]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800233e:	4b5c      	ldr	r3, [pc, #368]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002344:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	4958      	ldr	r1, [pc, #352]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235c:	2b00      	cmp	r3, #0
 800235e:	d015      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002360:	4b53      	ldr	r3, [pc, #332]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002366:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236e:	4950      	ldr	r1, [pc, #320]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800237e:	d105      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002380:	4b4b      	ldr	r3, [pc, #300]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a4a      	ldr	r2, [pc, #296]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800238a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002394:	2b00      	cmp	r3, #0
 8002396:	d015      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002398:	4b45      	ldr	r3, [pc, #276]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a6:	4942      	ldr	r1, [pc, #264]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023b6:	d105      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b8:	4b3d      	ldr	r3, [pc, #244]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a3c      	ldr	r2, [pc, #240]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023c2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d015      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023d0:	4b37      	ldr	r3, [pc, #220]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	4934      	ldr	r1, [pc, #208]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023ee:	d105      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f0:	4b2f      	ldr	r3, [pc, #188]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a2e      	ldr	r2, [pc, #184]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d015      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002408:	4b29      	ldr	r3, [pc, #164]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002416:	4926      	ldr	r1, [pc, #152]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002422:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002426:	d105      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002428:	4b21      	ldr	r3, [pc, #132]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a20      	ldr	r2, [pc, #128]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002432:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d015      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002440:	4b1b      	ldr	r3, [pc, #108]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002446:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244e:	4918      	ldr	r1, [pc, #96]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800245e:	d105      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002460:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4a12      	ldr	r2, [pc, #72]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800246a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d015      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002478:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002486:	490a      	ldr	r1, [pc, #40]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002496:	d105      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4a04      	ldr	r2, [pc, #16]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000

080024b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e042      	b.n	800254c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7fe fac3 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2224      	movs	r2, #36	@ 0x24
 80024e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0201 	bic.w	r2, r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fb82 	bl	8002c08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f8b3 	bl	8002670 <UART_SetConfig>
 800250a:	4603      	mov	r3, r0
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e01b      	b.n	800254c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fc01 	bl	8002d4c <UART_CheckIdleState>
 800254a:	4603      	mov	r3, r0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	@ 0x28
 8002558:	af02      	add	r7, sp, #8
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	4613      	mov	r3, r2
 8002562:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256a:	2b20      	cmp	r3, #32
 800256c:	d17b      	bne.n	8002666 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <HAL_UART_Transmit+0x26>
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e074      	b.n	8002668 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2221      	movs	r2, #33	@ 0x21
 800258a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800258e:	f7fe fbc7 	bl	8000d20 <HAL_GetTick>
 8002592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	88fa      	ldrh	r2, [r7, #6]
 8002598:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	88fa      	ldrh	r2, [r7, #6]
 80025a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025ac:	d108      	bne.n	80025c0 <HAL_UART_Transmit+0x6c>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	e003      	b.n	80025c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025c8:	e030      	b.n	800262c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2200      	movs	r2, #0
 80025d2:	2180      	movs	r1, #128	@ 0x80
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 fc63 	bl	8002ea0 <UART_WaitOnFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e03d      	b.n	8002668 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10b      	bne.n	800260a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002600:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	3302      	adds	r3, #2
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	e007      	b.n	800261a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	3301      	adds	r3, #1
 8002618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1c8      	bne.n	80025ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2200      	movs	r2, #0
 8002640:	2140      	movs	r1, #64	@ 0x40
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fc2c 	bl	8002ea0 <UART_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e006      	b.n	8002668 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002666:	2302      	movs	r3, #2
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	3720      	adds	r7, #32
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002674:	b08c      	sub	sp, #48	@ 0x30
 8002676:	af00      	add	r7, sp, #0
 8002678:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	431a      	orrs	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	431a      	orrs	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	4313      	orrs	r3, r2
 8002696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	4bab      	ldr	r3, [pc, #684]	@ (800294c <UART_SetConfig+0x2dc>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4aa0      	ldr	r2, [pc, #640]	@ (8002950 <UART_SetConfig+0x2e0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d004      	beq.n	80026dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026d8:	4313      	orrs	r3, r2
 80026da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80026e6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026f0:	430b      	orrs	r3, r1
 80026f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	f023 010f 	bic.w	r1, r3, #15
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a91      	ldr	r2, [pc, #580]	@ (8002954 <UART_SetConfig+0x2e4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d125      	bne.n	8002760 <UART_SetConfig+0xf0>
 8002714:	4b90      	ldr	r3, [pc, #576]	@ (8002958 <UART_SetConfig+0x2e8>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b03      	cmp	r3, #3
 8002720:	d81a      	bhi.n	8002758 <UART_SetConfig+0xe8>
 8002722:	a201      	add	r2, pc, #4	@ (adr r2, 8002728 <UART_SetConfig+0xb8>)
 8002724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002728:	08002739 	.word	0x08002739
 800272c:	08002749 	.word	0x08002749
 8002730:	08002741 	.word	0x08002741
 8002734:	08002751 	.word	0x08002751
 8002738:	2301      	movs	r3, #1
 800273a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800273e:	e0d6      	b.n	80028ee <UART_SetConfig+0x27e>
 8002740:	2302      	movs	r3, #2
 8002742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002746:	e0d2      	b.n	80028ee <UART_SetConfig+0x27e>
 8002748:	2304      	movs	r3, #4
 800274a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800274e:	e0ce      	b.n	80028ee <UART_SetConfig+0x27e>
 8002750:	2308      	movs	r3, #8
 8002752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002756:	e0ca      	b.n	80028ee <UART_SetConfig+0x27e>
 8002758:	2310      	movs	r3, #16
 800275a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800275e:	e0c6      	b.n	80028ee <UART_SetConfig+0x27e>
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a7d      	ldr	r2, [pc, #500]	@ (800295c <UART_SetConfig+0x2ec>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d138      	bne.n	80027dc <UART_SetConfig+0x16c>
 800276a:	4b7b      	ldr	r3, [pc, #492]	@ (8002958 <UART_SetConfig+0x2e8>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	2b0c      	cmp	r3, #12
 8002776:	d82d      	bhi.n	80027d4 <UART_SetConfig+0x164>
 8002778:	a201      	add	r2, pc, #4	@ (adr r2, 8002780 <UART_SetConfig+0x110>)
 800277a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277e:	bf00      	nop
 8002780:	080027b5 	.word	0x080027b5
 8002784:	080027d5 	.word	0x080027d5
 8002788:	080027d5 	.word	0x080027d5
 800278c:	080027d5 	.word	0x080027d5
 8002790:	080027c5 	.word	0x080027c5
 8002794:	080027d5 	.word	0x080027d5
 8002798:	080027d5 	.word	0x080027d5
 800279c:	080027d5 	.word	0x080027d5
 80027a0:	080027bd 	.word	0x080027bd
 80027a4:	080027d5 	.word	0x080027d5
 80027a8:	080027d5 	.word	0x080027d5
 80027ac:	080027d5 	.word	0x080027d5
 80027b0:	080027cd 	.word	0x080027cd
 80027b4:	2300      	movs	r3, #0
 80027b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027ba:	e098      	b.n	80028ee <UART_SetConfig+0x27e>
 80027bc:	2302      	movs	r3, #2
 80027be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027c2:	e094      	b.n	80028ee <UART_SetConfig+0x27e>
 80027c4:	2304      	movs	r3, #4
 80027c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027ca:	e090      	b.n	80028ee <UART_SetConfig+0x27e>
 80027cc:	2308      	movs	r3, #8
 80027ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027d2:	e08c      	b.n	80028ee <UART_SetConfig+0x27e>
 80027d4:	2310      	movs	r3, #16
 80027d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027da:	e088      	b.n	80028ee <UART_SetConfig+0x27e>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5f      	ldr	r2, [pc, #380]	@ (8002960 <UART_SetConfig+0x2f0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d125      	bne.n	8002832 <UART_SetConfig+0x1c2>
 80027e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002958 <UART_SetConfig+0x2e8>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80027f0:	2b30      	cmp	r3, #48	@ 0x30
 80027f2:	d016      	beq.n	8002822 <UART_SetConfig+0x1b2>
 80027f4:	2b30      	cmp	r3, #48	@ 0x30
 80027f6:	d818      	bhi.n	800282a <UART_SetConfig+0x1ba>
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d00a      	beq.n	8002812 <UART_SetConfig+0x1a2>
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d814      	bhi.n	800282a <UART_SetConfig+0x1ba>
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <UART_SetConfig+0x19a>
 8002804:	2b10      	cmp	r3, #16
 8002806:	d008      	beq.n	800281a <UART_SetConfig+0x1aa>
 8002808:	e00f      	b.n	800282a <UART_SetConfig+0x1ba>
 800280a:	2300      	movs	r3, #0
 800280c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002810:	e06d      	b.n	80028ee <UART_SetConfig+0x27e>
 8002812:	2302      	movs	r3, #2
 8002814:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002818:	e069      	b.n	80028ee <UART_SetConfig+0x27e>
 800281a:	2304      	movs	r3, #4
 800281c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002820:	e065      	b.n	80028ee <UART_SetConfig+0x27e>
 8002822:	2308      	movs	r3, #8
 8002824:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002828:	e061      	b.n	80028ee <UART_SetConfig+0x27e>
 800282a:	2310      	movs	r3, #16
 800282c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002830:	e05d      	b.n	80028ee <UART_SetConfig+0x27e>
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a4b      	ldr	r2, [pc, #300]	@ (8002964 <UART_SetConfig+0x2f4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d125      	bne.n	8002888 <UART_SetConfig+0x218>
 800283c:	4b46      	ldr	r3, [pc, #280]	@ (8002958 <UART_SetConfig+0x2e8>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002842:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002846:	2bc0      	cmp	r3, #192	@ 0xc0
 8002848:	d016      	beq.n	8002878 <UART_SetConfig+0x208>
 800284a:	2bc0      	cmp	r3, #192	@ 0xc0
 800284c:	d818      	bhi.n	8002880 <UART_SetConfig+0x210>
 800284e:	2b80      	cmp	r3, #128	@ 0x80
 8002850:	d00a      	beq.n	8002868 <UART_SetConfig+0x1f8>
 8002852:	2b80      	cmp	r3, #128	@ 0x80
 8002854:	d814      	bhi.n	8002880 <UART_SetConfig+0x210>
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <UART_SetConfig+0x1f0>
 800285a:	2b40      	cmp	r3, #64	@ 0x40
 800285c:	d008      	beq.n	8002870 <UART_SetConfig+0x200>
 800285e:	e00f      	b.n	8002880 <UART_SetConfig+0x210>
 8002860:	2300      	movs	r3, #0
 8002862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002866:	e042      	b.n	80028ee <UART_SetConfig+0x27e>
 8002868:	2302      	movs	r3, #2
 800286a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800286e:	e03e      	b.n	80028ee <UART_SetConfig+0x27e>
 8002870:	2304      	movs	r3, #4
 8002872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002876:	e03a      	b.n	80028ee <UART_SetConfig+0x27e>
 8002878:	2308      	movs	r3, #8
 800287a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800287e:	e036      	b.n	80028ee <UART_SetConfig+0x27e>
 8002880:	2310      	movs	r3, #16
 8002882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002886:	e032      	b.n	80028ee <UART_SetConfig+0x27e>
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a30      	ldr	r2, [pc, #192]	@ (8002950 <UART_SetConfig+0x2e0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d12a      	bne.n	80028e8 <UART_SetConfig+0x278>
 8002892:	4b31      	ldr	r3, [pc, #196]	@ (8002958 <UART_SetConfig+0x2e8>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002898:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800289c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028a0:	d01a      	beq.n	80028d8 <UART_SetConfig+0x268>
 80028a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028a6:	d81b      	bhi.n	80028e0 <UART_SetConfig+0x270>
 80028a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028ac:	d00c      	beq.n	80028c8 <UART_SetConfig+0x258>
 80028ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028b2:	d815      	bhi.n	80028e0 <UART_SetConfig+0x270>
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <UART_SetConfig+0x250>
 80028b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028bc:	d008      	beq.n	80028d0 <UART_SetConfig+0x260>
 80028be:	e00f      	b.n	80028e0 <UART_SetConfig+0x270>
 80028c0:	2300      	movs	r3, #0
 80028c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028c6:	e012      	b.n	80028ee <UART_SetConfig+0x27e>
 80028c8:	2302      	movs	r3, #2
 80028ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028ce:	e00e      	b.n	80028ee <UART_SetConfig+0x27e>
 80028d0:	2304      	movs	r3, #4
 80028d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028d6:	e00a      	b.n	80028ee <UART_SetConfig+0x27e>
 80028d8:	2308      	movs	r3, #8
 80028da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028de:	e006      	b.n	80028ee <UART_SetConfig+0x27e>
 80028e0:	2310      	movs	r3, #16
 80028e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028e6:	e002      	b.n	80028ee <UART_SetConfig+0x27e>
 80028e8:	2310      	movs	r3, #16
 80028ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a17      	ldr	r2, [pc, #92]	@ (8002950 <UART_SetConfig+0x2e0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	f040 80a8 	bne.w	8002a4a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80028fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d834      	bhi.n	800296c <UART_SetConfig+0x2fc>
 8002902:	a201      	add	r2, pc, #4	@ (adr r2, 8002908 <UART_SetConfig+0x298>)
 8002904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002908:	0800292d 	.word	0x0800292d
 800290c:	0800296d 	.word	0x0800296d
 8002910:	08002935 	.word	0x08002935
 8002914:	0800296d 	.word	0x0800296d
 8002918:	0800293b 	.word	0x0800293b
 800291c:	0800296d 	.word	0x0800296d
 8002920:	0800296d 	.word	0x0800296d
 8002924:	0800296d 	.word	0x0800296d
 8002928:	08002943 	.word	0x08002943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800292c:	f7ff fb60 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8002930:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002932:	e021      	b.n	8002978 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002934:	4b0c      	ldr	r3, [pc, #48]	@ (8002968 <UART_SetConfig+0x2f8>)
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002938:	e01e      	b.n	8002978 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800293a:	f7ff faeb 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 800293e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002940:	e01a      	b.n	8002978 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002946:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002948:	e016      	b.n	8002978 <UART_SetConfig+0x308>
 800294a:	bf00      	nop
 800294c:	cfff69f3 	.word	0xcfff69f3
 8002950:	40008000 	.word	0x40008000
 8002954:	40013800 	.word	0x40013800
 8002958:	40021000 	.word	0x40021000
 800295c:	40004400 	.word	0x40004400
 8002960:	40004800 	.word	0x40004800
 8002964:	40004c00 	.word	0x40004c00
 8002968:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002976:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 812a 	beq.w	8002bd4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	4a9e      	ldr	r2, [pc, #632]	@ (8002c00 <UART_SetConfig+0x590>)
 8002986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800298a:	461a      	mov	r2, r3
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002992:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d305      	bcc.n	80029b0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d903      	bls.n	80029b8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80029b6:	e10d      	b.n	8002bd4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ba:	2200      	movs	r2, #0
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	60fa      	str	r2, [r7, #12]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	4a8e      	ldr	r2, [pc, #568]	@ (8002c00 <UART_SetConfig+0x590>)
 80029c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2200      	movs	r2, #0
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029da:	f7fd fc79 	bl	80002d0 <__aeabi_uldivmod>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	020b      	lsls	r3, r1, #8
 80029f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80029f4:	0202      	lsls	r2, r0, #8
 80029f6:	6979      	ldr	r1, [r7, #20]
 80029f8:	6849      	ldr	r1, [r1, #4]
 80029fa:	0849      	lsrs	r1, r1, #1
 80029fc:	2000      	movs	r0, #0
 80029fe:	460c      	mov	r4, r1
 8002a00:	4605      	mov	r5, r0
 8002a02:	eb12 0804 	adds.w	r8, r2, r4
 8002a06:	eb43 0905 	adc.w	r9, r3, r5
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	469a      	mov	sl, r3
 8002a12:	4693      	mov	fp, r2
 8002a14:	4652      	mov	r2, sl
 8002a16:	465b      	mov	r3, fp
 8002a18:	4640      	mov	r0, r8
 8002a1a:	4649      	mov	r1, r9
 8002a1c:	f7fd fc58 	bl	80002d0 <__aeabi_uldivmod>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4613      	mov	r3, r2
 8002a26:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a2e:	d308      	bcc.n	8002a42 <UART_SetConfig+0x3d2>
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a36:	d204      	bcs.n	8002a42 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6a3a      	ldr	r2, [r7, #32]
 8002a3e:	60da      	str	r2, [r3, #12]
 8002a40:	e0c8      	b.n	8002bd4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002a48:	e0c4      	b.n	8002bd4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a52:	d167      	bne.n	8002b24 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002a54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d828      	bhi.n	8002aae <UART_SetConfig+0x43e>
 8002a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a64 <UART_SetConfig+0x3f4>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002a89 	.word	0x08002a89
 8002a68:	08002a91 	.word	0x08002a91
 8002a6c:	08002a99 	.word	0x08002a99
 8002a70:	08002aaf 	.word	0x08002aaf
 8002a74:	08002a9f 	.word	0x08002a9f
 8002a78:	08002aaf 	.word	0x08002aaf
 8002a7c:	08002aaf 	.word	0x08002aaf
 8002a80:	08002aaf 	.word	0x08002aaf
 8002a84:	08002aa7 	.word	0x08002aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a88:	f7ff fab2 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8002a8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a8e:	e014      	b.n	8002aba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a90:	f7ff fac4 	bl	800201c <HAL_RCC_GetPCLK2Freq>
 8002a94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a96:	e010      	b.n	8002aba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a98:	4b5a      	ldr	r3, [pc, #360]	@ (8002c04 <UART_SetConfig+0x594>)
 8002a9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a9c:	e00d      	b.n	8002aba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a9e:	f7ff fa39 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8002aa2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002aa4:	e009      	b.n	8002aba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002aac:	e005      	b.n	8002aba <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002ab8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8089 	beq.w	8002bd4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac6:	4a4e      	ldr	r2, [pc, #312]	@ (8002c00 <UART_SetConfig+0x590>)
 8002ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002acc:	461a      	mov	r2, r3
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ad4:	005a      	lsls	r2, r3, #1
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	441a      	add	r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	d916      	bls.n	8002b1c <UART_SetConfig+0x4ac>
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af4:	d212      	bcs.n	8002b1c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f023 030f 	bic.w	r3, r3, #15
 8002afe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	085b      	lsrs	r3, r3, #1
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	8bfb      	ldrh	r3, [r7, #30]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	8bfa      	ldrh	r2, [r7, #30]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	e05b      	b.n	8002bd4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002b22:	e057      	b.n	8002bd4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d828      	bhi.n	8002b7e <UART_SetConfig+0x50e>
 8002b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b34 <UART_SetConfig+0x4c4>)
 8002b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b32:	bf00      	nop
 8002b34:	08002b59 	.word	0x08002b59
 8002b38:	08002b61 	.word	0x08002b61
 8002b3c:	08002b69 	.word	0x08002b69
 8002b40:	08002b7f 	.word	0x08002b7f
 8002b44:	08002b6f 	.word	0x08002b6f
 8002b48:	08002b7f 	.word	0x08002b7f
 8002b4c:	08002b7f 	.word	0x08002b7f
 8002b50:	08002b7f 	.word	0x08002b7f
 8002b54:	08002b77 	.word	0x08002b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b58:	f7ff fa4a 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8002b5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b5e:	e014      	b.n	8002b8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b60:	f7ff fa5c 	bl	800201c <HAL_RCC_GetPCLK2Freq>
 8002b64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b66:	e010      	b.n	8002b8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b68:	4b26      	ldr	r3, [pc, #152]	@ (8002c04 <UART_SetConfig+0x594>)
 8002b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002b6c:	e00d      	b.n	8002b8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b6e:	f7ff f9d1 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8002b72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b74:	e009      	b.n	8002b8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002b7c:	e005      	b.n	8002b8a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002b88:	bf00      	nop
    }

    if (pclk != 0U)
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d021      	beq.n	8002bd4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	4a1a      	ldr	r2, [pc, #104]	@ (8002c00 <UART_SetConfig+0x590>)
 8002b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	441a      	add	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	2b0f      	cmp	r3, #15
 8002bb8:	d909      	bls.n	8002bce <UART_SetConfig+0x55e>
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc0:	d205      	bcs.n	8002bce <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60da      	str	r2, [r3, #12]
 8002bcc:	e002      	b.n	8002bd4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2200      	movs	r2, #0
 8002be8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002bf0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3730      	adds	r7, #48	@ 0x30
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bfe:	bf00      	nop
 8002c00:	08003c08 	.word	0x08003c08
 8002c04:	00f42400 	.word	0x00f42400

08002c08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d01a      	beq.n	8002d1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d06:	d10a      	bne.n	8002d1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	605a      	str	r2, [r3, #4]
  }
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b098      	sub	sp, #96	@ 0x60
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d5c:	f7fd ffe0 	bl	8000d20 <HAL_GetTick>
 8002d60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d12f      	bne.n	8002dd0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f88e 	bl	8002ea0 <UART_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d022      	beq.n	8002dd0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002daa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002dae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e6      	bne.n	8002d8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e063      	b.n	8002e98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d149      	bne.n	8002e72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dde:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de6:	2200      	movs	r2, #0
 8002de8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f857 	bl	8002ea0 <UART_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d03c      	beq.n	8002e72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	623b      	str	r3, [r7, #32]
   return(result);
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e16:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e18:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e6      	bne.n	8002df8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3308      	adds	r3, #8
 8002e30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	e853 3f00 	ldrex	r3, [r3]
 8002e38:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3308      	adds	r3, #8
 8002e48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e4a:	61fa      	str	r2, [r7, #28]
 8002e4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	69b9      	ldr	r1, [r7, #24]
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	e841 2300 	strex	r3, r2, [r1]
 8002e56:	617b      	str	r3, [r7, #20]
   return(result);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e5      	bne.n	8002e2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e012      	b.n	8002e98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3758      	adds	r7, #88	@ 0x58
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb0:	e04f      	b.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d04b      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eba:	f7fd ff31 	bl	8000d20 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e04e      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d037      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2b80      	cmp	r3, #128	@ 0x80
 8002ee6:	d034      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b40      	cmp	r3, #64	@ 0x40
 8002eec:	d031      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d110      	bne.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2208      	movs	r2, #8
 8002f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f838 	bl	8002f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e029      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f2c:	d111      	bne.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f81e 	bl	8002f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e00f      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d0a0      	beq.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b095      	sub	sp, #84	@ 0x54
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fa8:	e841 2300 	strex	r3, r2, [r1]
 8002fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e6      	bne.n	8002f82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3308      	adds	r3, #8
 8002fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3308      	adds	r3, #8
 8002fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e3      	bne.n	8002fb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d118      	bne.n	8003026 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	e853 3f00 	ldrex	r3, [r3]
 8003000:	60bb      	str	r3, [r7, #8]
   return(result);
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f023 0310 	bic.w	r3, r3, #16
 8003008:	647b      	str	r3, [r7, #68]	@ 0x44
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003016:	6979      	ldr	r1, [r7, #20]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	e841 2300 	strex	r3, r2, [r1]
 800301e:	613b      	str	r3, [r7, #16]
   return(result);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1e6      	bne.n	8002ff4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800303a:	bf00      	nop
 800303c:	3754      	adds	r7, #84	@ 0x54
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_UARTEx_DisableFifoMode+0x16>
 8003058:	2302      	movs	r3, #2
 800305a:	e027      	b.n	80030ac <HAL_UARTEx_DisableFifoMode+0x66>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2224      	movs	r2, #36	@ 0x24
 8003068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800308a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e02d      	b.n	800312c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2224      	movs	r2, #36	@ 0x24
 80030dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f84f 	bl	80031b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003148:	2302      	movs	r3, #2
 800314a:	e02d      	b.n	80031a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2224      	movs	r2, #36	@ 0x24
 8003158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0201 	bic.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f811 	bl	80031b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d108      	bne.n	80031d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80031d0:	e031      	b.n	8003236 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80031d2:	2308      	movs	r3, #8
 80031d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80031d6:	2308      	movs	r3, #8
 80031d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	0e5b      	lsrs	r3, r3, #25
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	0f5b      	lsrs	r3, r3, #29
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031fa:	7bbb      	ldrb	r3, [r7, #14]
 80031fc:	7b3a      	ldrb	r2, [r7, #12]
 80031fe:	4911      	ldr	r1, [pc, #68]	@ (8003244 <UARTEx_SetNbDataToProcess+0x94>)
 8003200:	5c8a      	ldrb	r2, [r1, r2]
 8003202:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003206:	7b3a      	ldrb	r2, [r7, #12]
 8003208:	490f      	ldr	r1, [pc, #60]	@ (8003248 <UARTEx_SetNbDataToProcess+0x98>)
 800320a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800320c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	7b7a      	ldrb	r2, [r7, #13]
 800321c:	4909      	ldr	r1, [pc, #36]	@ (8003244 <UARTEx_SetNbDataToProcess+0x94>)
 800321e:	5c8a      	ldrb	r2, [r1, r2]
 8003220:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003224:	7b7a      	ldrb	r2, [r7, #13]
 8003226:	4908      	ldr	r1, [pc, #32]	@ (8003248 <UARTEx_SetNbDataToProcess+0x98>)
 8003228:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800322a:	fb93 f3f2 	sdiv	r3, r3, r2
 800322e:	b29a      	uxth	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	08003c20 	.word	0x08003c20
 8003248:	08003c28 	.word	0x08003c28

0800324c <sniprintf>:
 800324c:	b40c      	push	{r2, r3}
 800324e:	b530      	push	{r4, r5, lr}
 8003250:	4b17      	ldr	r3, [pc, #92]	@ (80032b0 <sniprintf+0x64>)
 8003252:	1e0c      	subs	r4, r1, #0
 8003254:	681d      	ldr	r5, [r3, #0]
 8003256:	b09d      	sub	sp, #116	@ 0x74
 8003258:	da08      	bge.n	800326c <sniprintf+0x20>
 800325a:	238b      	movs	r3, #139	@ 0x8b
 800325c:	602b      	str	r3, [r5, #0]
 800325e:	f04f 30ff 	mov.w	r0, #4294967295
 8003262:	b01d      	add	sp, #116	@ 0x74
 8003264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003268:	b002      	add	sp, #8
 800326a:	4770      	bx	lr
 800326c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003270:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003274:	bf14      	ite	ne
 8003276:	f104 33ff 	addne.w	r3, r4, #4294967295
 800327a:	4623      	moveq	r3, r4
 800327c:	9304      	str	r3, [sp, #16]
 800327e:	9307      	str	r3, [sp, #28]
 8003280:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003284:	9002      	str	r0, [sp, #8]
 8003286:	9006      	str	r0, [sp, #24]
 8003288:	f8ad 3016 	strh.w	r3, [sp, #22]
 800328c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800328e:	ab21      	add	r3, sp, #132	@ 0x84
 8003290:	a902      	add	r1, sp, #8
 8003292:	4628      	mov	r0, r5
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	f000 f995 	bl	80035c4 <_svfiprintf_r>
 800329a:	1c43      	adds	r3, r0, #1
 800329c:	bfbc      	itt	lt
 800329e:	238b      	movlt	r3, #139	@ 0x8b
 80032a0:	602b      	strlt	r3, [r5, #0]
 80032a2:	2c00      	cmp	r4, #0
 80032a4:	d0dd      	beq.n	8003262 <sniprintf+0x16>
 80032a6:	9b02      	ldr	r3, [sp, #8]
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e7d9      	b.n	8003262 <sniprintf+0x16>
 80032ae:	bf00      	nop
 80032b0:	2000001c 	.word	0x2000001c

080032b4 <memset>:
 80032b4:	4402      	add	r2, r0
 80032b6:	4603      	mov	r3, r0
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d100      	bne.n	80032be <memset+0xa>
 80032bc:	4770      	bx	lr
 80032be:	f803 1b01 	strb.w	r1, [r3], #1
 80032c2:	e7f9      	b.n	80032b8 <memset+0x4>

080032c4 <__errno>:
 80032c4:	4b01      	ldr	r3, [pc, #4]	@ (80032cc <__errno+0x8>)
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	2000001c 	.word	0x2000001c

080032d0 <__libc_init_array>:
 80032d0:	b570      	push	{r4, r5, r6, lr}
 80032d2:	4d0d      	ldr	r5, [pc, #52]	@ (8003308 <__libc_init_array+0x38>)
 80032d4:	4c0d      	ldr	r4, [pc, #52]	@ (800330c <__libc_init_array+0x3c>)
 80032d6:	1b64      	subs	r4, r4, r5
 80032d8:	10a4      	asrs	r4, r4, #2
 80032da:	2600      	movs	r6, #0
 80032dc:	42a6      	cmp	r6, r4
 80032de:	d109      	bne.n	80032f4 <__libc_init_array+0x24>
 80032e0:	4d0b      	ldr	r5, [pc, #44]	@ (8003310 <__libc_init_array+0x40>)
 80032e2:	4c0c      	ldr	r4, [pc, #48]	@ (8003314 <__libc_init_array+0x44>)
 80032e4:	f000 fc66 	bl	8003bb4 <_init>
 80032e8:	1b64      	subs	r4, r4, r5
 80032ea:	10a4      	asrs	r4, r4, #2
 80032ec:	2600      	movs	r6, #0
 80032ee:	42a6      	cmp	r6, r4
 80032f0:	d105      	bne.n	80032fe <__libc_init_array+0x2e>
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
 80032f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f8:	4798      	blx	r3
 80032fa:	3601      	adds	r6, #1
 80032fc:	e7ee      	b.n	80032dc <__libc_init_array+0xc>
 80032fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003302:	4798      	blx	r3
 8003304:	3601      	adds	r6, #1
 8003306:	e7f2      	b.n	80032ee <__libc_init_array+0x1e>
 8003308:	08003c6c 	.word	0x08003c6c
 800330c:	08003c6c 	.word	0x08003c6c
 8003310:	08003c6c 	.word	0x08003c6c
 8003314:	08003c70 	.word	0x08003c70

08003318 <__retarget_lock_acquire_recursive>:
 8003318:	4770      	bx	lr

0800331a <__retarget_lock_release_recursive>:
 800331a:	4770      	bx	lr

0800331c <_free_r>:
 800331c:	b538      	push	{r3, r4, r5, lr}
 800331e:	4605      	mov	r5, r0
 8003320:	2900      	cmp	r1, #0
 8003322:	d041      	beq.n	80033a8 <_free_r+0x8c>
 8003324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003328:	1f0c      	subs	r4, r1, #4
 800332a:	2b00      	cmp	r3, #0
 800332c:	bfb8      	it	lt
 800332e:	18e4      	addlt	r4, r4, r3
 8003330:	f000 f8e0 	bl	80034f4 <__malloc_lock>
 8003334:	4a1d      	ldr	r2, [pc, #116]	@ (80033ac <_free_r+0x90>)
 8003336:	6813      	ldr	r3, [r2, #0]
 8003338:	b933      	cbnz	r3, 8003348 <_free_r+0x2c>
 800333a:	6063      	str	r3, [r4, #4]
 800333c:	6014      	str	r4, [r2, #0]
 800333e:	4628      	mov	r0, r5
 8003340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003344:	f000 b8dc 	b.w	8003500 <__malloc_unlock>
 8003348:	42a3      	cmp	r3, r4
 800334a:	d908      	bls.n	800335e <_free_r+0x42>
 800334c:	6820      	ldr	r0, [r4, #0]
 800334e:	1821      	adds	r1, r4, r0
 8003350:	428b      	cmp	r3, r1
 8003352:	bf01      	itttt	eq
 8003354:	6819      	ldreq	r1, [r3, #0]
 8003356:	685b      	ldreq	r3, [r3, #4]
 8003358:	1809      	addeq	r1, r1, r0
 800335a:	6021      	streq	r1, [r4, #0]
 800335c:	e7ed      	b.n	800333a <_free_r+0x1e>
 800335e:	461a      	mov	r2, r3
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	b10b      	cbz	r3, 8003368 <_free_r+0x4c>
 8003364:	42a3      	cmp	r3, r4
 8003366:	d9fa      	bls.n	800335e <_free_r+0x42>
 8003368:	6811      	ldr	r1, [r2, #0]
 800336a:	1850      	adds	r0, r2, r1
 800336c:	42a0      	cmp	r0, r4
 800336e:	d10b      	bne.n	8003388 <_free_r+0x6c>
 8003370:	6820      	ldr	r0, [r4, #0]
 8003372:	4401      	add	r1, r0
 8003374:	1850      	adds	r0, r2, r1
 8003376:	4283      	cmp	r3, r0
 8003378:	6011      	str	r1, [r2, #0]
 800337a:	d1e0      	bne.n	800333e <_free_r+0x22>
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	6053      	str	r3, [r2, #4]
 8003382:	4408      	add	r0, r1
 8003384:	6010      	str	r0, [r2, #0]
 8003386:	e7da      	b.n	800333e <_free_r+0x22>
 8003388:	d902      	bls.n	8003390 <_free_r+0x74>
 800338a:	230c      	movs	r3, #12
 800338c:	602b      	str	r3, [r5, #0]
 800338e:	e7d6      	b.n	800333e <_free_r+0x22>
 8003390:	6820      	ldr	r0, [r4, #0]
 8003392:	1821      	adds	r1, r4, r0
 8003394:	428b      	cmp	r3, r1
 8003396:	bf04      	itt	eq
 8003398:	6819      	ldreq	r1, [r3, #0]
 800339a:	685b      	ldreq	r3, [r3, #4]
 800339c:	6063      	str	r3, [r4, #4]
 800339e:	bf04      	itt	eq
 80033a0:	1809      	addeq	r1, r1, r0
 80033a2:	6021      	streq	r1, [r4, #0]
 80033a4:	6054      	str	r4, [r2, #4]
 80033a6:	e7ca      	b.n	800333e <_free_r+0x22>
 80033a8:	bd38      	pop	{r3, r4, r5, pc}
 80033aa:	bf00      	nop
 80033ac:	200002f4 	.word	0x200002f4

080033b0 <sbrk_aligned>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	4e0f      	ldr	r6, [pc, #60]	@ (80033f0 <sbrk_aligned+0x40>)
 80033b4:	460c      	mov	r4, r1
 80033b6:	6831      	ldr	r1, [r6, #0]
 80033b8:	4605      	mov	r5, r0
 80033ba:	b911      	cbnz	r1, 80033c2 <sbrk_aligned+0x12>
 80033bc:	f000 fba6 	bl	8003b0c <_sbrk_r>
 80033c0:	6030      	str	r0, [r6, #0]
 80033c2:	4621      	mov	r1, r4
 80033c4:	4628      	mov	r0, r5
 80033c6:	f000 fba1 	bl	8003b0c <_sbrk_r>
 80033ca:	1c43      	adds	r3, r0, #1
 80033cc:	d103      	bne.n	80033d6 <sbrk_aligned+0x26>
 80033ce:	f04f 34ff 	mov.w	r4, #4294967295
 80033d2:	4620      	mov	r0, r4
 80033d4:	bd70      	pop	{r4, r5, r6, pc}
 80033d6:	1cc4      	adds	r4, r0, #3
 80033d8:	f024 0403 	bic.w	r4, r4, #3
 80033dc:	42a0      	cmp	r0, r4
 80033de:	d0f8      	beq.n	80033d2 <sbrk_aligned+0x22>
 80033e0:	1a21      	subs	r1, r4, r0
 80033e2:	4628      	mov	r0, r5
 80033e4:	f000 fb92 	bl	8003b0c <_sbrk_r>
 80033e8:	3001      	adds	r0, #1
 80033ea:	d1f2      	bne.n	80033d2 <sbrk_aligned+0x22>
 80033ec:	e7ef      	b.n	80033ce <sbrk_aligned+0x1e>
 80033ee:	bf00      	nop
 80033f0:	200002f0 	.word	0x200002f0

080033f4 <_malloc_r>:
 80033f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033f8:	1ccd      	adds	r5, r1, #3
 80033fa:	f025 0503 	bic.w	r5, r5, #3
 80033fe:	3508      	adds	r5, #8
 8003400:	2d0c      	cmp	r5, #12
 8003402:	bf38      	it	cc
 8003404:	250c      	movcc	r5, #12
 8003406:	2d00      	cmp	r5, #0
 8003408:	4606      	mov	r6, r0
 800340a:	db01      	blt.n	8003410 <_malloc_r+0x1c>
 800340c:	42a9      	cmp	r1, r5
 800340e:	d904      	bls.n	800341a <_malloc_r+0x26>
 8003410:	230c      	movs	r3, #12
 8003412:	6033      	str	r3, [r6, #0]
 8003414:	2000      	movs	r0, #0
 8003416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800341a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034f0 <_malloc_r+0xfc>
 800341e:	f000 f869 	bl	80034f4 <__malloc_lock>
 8003422:	f8d8 3000 	ldr.w	r3, [r8]
 8003426:	461c      	mov	r4, r3
 8003428:	bb44      	cbnz	r4, 800347c <_malloc_r+0x88>
 800342a:	4629      	mov	r1, r5
 800342c:	4630      	mov	r0, r6
 800342e:	f7ff ffbf 	bl	80033b0 <sbrk_aligned>
 8003432:	1c43      	adds	r3, r0, #1
 8003434:	4604      	mov	r4, r0
 8003436:	d158      	bne.n	80034ea <_malloc_r+0xf6>
 8003438:	f8d8 4000 	ldr.w	r4, [r8]
 800343c:	4627      	mov	r7, r4
 800343e:	2f00      	cmp	r7, #0
 8003440:	d143      	bne.n	80034ca <_malloc_r+0xd6>
 8003442:	2c00      	cmp	r4, #0
 8003444:	d04b      	beq.n	80034de <_malloc_r+0xea>
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	4639      	mov	r1, r7
 800344a:	4630      	mov	r0, r6
 800344c:	eb04 0903 	add.w	r9, r4, r3
 8003450:	f000 fb5c 	bl	8003b0c <_sbrk_r>
 8003454:	4581      	cmp	r9, r0
 8003456:	d142      	bne.n	80034de <_malloc_r+0xea>
 8003458:	6821      	ldr	r1, [r4, #0]
 800345a:	1a6d      	subs	r5, r5, r1
 800345c:	4629      	mov	r1, r5
 800345e:	4630      	mov	r0, r6
 8003460:	f7ff ffa6 	bl	80033b0 <sbrk_aligned>
 8003464:	3001      	adds	r0, #1
 8003466:	d03a      	beq.n	80034de <_malloc_r+0xea>
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	442b      	add	r3, r5
 800346c:	6023      	str	r3, [r4, #0]
 800346e:	f8d8 3000 	ldr.w	r3, [r8]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	bb62      	cbnz	r2, 80034d0 <_malloc_r+0xdc>
 8003476:	f8c8 7000 	str.w	r7, [r8]
 800347a:	e00f      	b.n	800349c <_malloc_r+0xa8>
 800347c:	6822      	ldr	r2, [r4, #0]
 800347e:	1b52      	subs	r2, r2, r5
 8003480:	d420      	bmi.n	80034c4 <_malloc_r+0xd0>
 8003482:	2a0b      	cmp	r2, #11
 8003484:	d917      	bls.n	80034b6 <_malloc_r+0xc2>
 8003486:	1961      	adds	r1, r4, r5
 8003488:	42a3      	cmp	r3, r4
 800348a:	6025      	str	r5, [r4, #0]
 800348c:	bf18      	it	ne
 800348e:	6059      	strne	r1, [r3, #4]
 8003490:	6863      	ldr	r3, [r4, #4]
 8003492:	bf08      	it	eq
 8003494:	f8c8 1000 	streq.w	r1, [r8]
 8003498:	5162      	str	r2, [r4, r5]
 800349a:	604b      	str	r3, [r1, #4]
 800349c:	4630      	mov	r0, r6
 800349e:	f000 f82f 	bl	8003500 <__malloc_unlock>
 80034a2:	f104 000b 	add.w	r0, r4, #11
 80034a6:	1d23      	adds	r3, r4, #4
 80034a8:	f020 0007 	bic.w	r0, r0, #7
 80034ac:	1ac2      	subs	r2, r0, r3
 80034ae:	bf1c      	itt	ne
 80034b0:	1a1b      	subne	r3, r3, r0
 80034b2:	50a3      	strne	r3, [r4, r2]
 80034b4:	e7af      	b.n	8003416 <_malloc_r+0x22>
 80034b6:	6862      	ldr	r2, [r4, #4]
 80034b8:	42a3      	cmp	r3, r4
 80034ba:	bf0c      	ite	eq
 80034bc:	f8c8 2000 	streq.w	r2, [r8]
 80034c0:	605a      	strne	r2, [r3, #4]
 80034c2:	e7eb      	b.n	800349c <_malloc_r+0xa8>
 80034c4:	4623      	mov	r3, r4
 80034c6:	6864      	ldr	r4, [r4, #4]
 80034c8:	e7ae      	b.n	8003428 <_malloc_r+0x34>
 80034ca:	463c      	mov	r4, r7
 80034cc:	687f      	ldr	r7, [r7, #4]
 80034ce:	e7b6      	b.n	800343e <_malloc_r+0x4a>
 80034d0:	461a      	mov	r2, r3
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	42a3      	cmp	r3, r4
 80034d6:	d1fb      	bne.n	80034d0 <_malloc_r+0xdc>
 80034d8:	2300      	movs	r3, #0
 80034da:	6053      	str	r3, [r2, #4]
 80034dc:	e7de      	b.n	800349c <_malloc_r+0xa8>
 80034de:	230c      	movs	r3, #12
 80034e0:	6033      	str	r3, [r6, #0]
 80034e2:	4630      	mov	r0, r6
 80034e4:	f000 f80c 	bl	8003500 <__malloc_unlock>
 80034e8:	e794      	b.n	8003414 <_malloc_r+0x20>
 80034ea:	6005      	str	r5, [r0, #0]
 80034ec:	e7d6      	b.n	800349c <_malloc_r+0xa8>
 80034ee:	bf00      	nop
 80034f0:	200002f4 	.word	0x200002f4

080034f4 <__malloc_lock>:
 80034f4:	4801      	ldr	r0, [pc, #4]	@ (80034fc <__malloc_lock+0x8>)
 80034f6:	f7ff bf0f 	b.w	8003318 <__retarget_lock_acquire_recursive>
 80034fa:	bf00      	nop
 80034fc:	200002ec 	.word	0x200002ec

08003500 <__malloc_unlock>:
 8003500:	4801      	ldr	r0, [pc, #4]	@ (8003508 <__malloc_unlock+0x8>)
 8003502:	f7ff bf0a 	b.w	800331a <__retarget_lock_release_recursive>
 8003506:	bf00      	nop
 8003508:	200002ec 	.word	0x200002ec

0800350c <__ssputs_r>:
 800350c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003510:	688e      	ldr	r6, [r1, #8]
 8003512:	461f      	mov	r7, r3
 8003514:	42be      	cmp	r6, r7
 8003516:	680b      	ldr	r3, [r1, #0]
 8003518:	4682      	mov	sl, r0
 800351a:	460c      	mov	r4, r1
 800351c:	4690      	mov	r8, r2
 800351e:	d82d      	bhi.n	800357c <__ssputs_r+0x70>
 8003520:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003524:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003528:	d026      	beq.n	8003578 <__ssputs_r+0x6c>
 800352a:	6965      	ldr	r5, [r4, #20]
 800352c:	6909      	ldr	r1, [r1, #16]
 800352e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003532:	eba3 0901 	sub.w	r9, r3, r1
 8003536:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800353a:	1c7b      	adds	r3, r7, #1
 800353c:	444b      	add	r3, r9
 800353e:	106d      	asrs	r5, r5, #1
 8003540:	429d      	cmp	r5, r3
 8003542:	bf38      	it	cc
 8003544:	461d      	movcc	r5, r3
 8003546:	0553      	lsls	r3, r2, #21
 8003548:	d527      	bpl.n	800359a <__ssputs_r+0x8e>
 800354a:	4629      	mov	r1, r5
 800354c:	f7ff ff52 	bl	80033f4 <_malloc_r>
 8003550:	4606      	mov	r6, r0
 8003552:	b360      	cbz	r0, 80035ae <__ssputs_r+0xa2>
 8003554:	6921      	ldr	r1, [r4, #16]
 8003556:	464a      	mov	r2, r9
 8003558:	f000 fae8 	bl	8003b2c <memcpy>
 800355c:	89a3      	ldrh	r3, [r4, #12]
 800355e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003566:	81a3      	strh	r3, [r4, #12]
 8003568:	6126      	str	r6, [r4, #16]
 800356a:	6165      	str	r5, [r4, #20]
 800356c:	444e      	add	r6, r9
 800356e:	eba5 0509 	sub.w	r5, r5, r9
 8003572:	6026      	str	r6, [r4, #0]
 8003574:	60a5      	str	r5, [r4, #8]
 8003576:	463e      	mov	r6, r7
 8003578:	42be      	cmp	r6, r7
 800357a:	d900      	bls.n	800357e <__ssputs_r+0x72>
 800357c:	463e      	mov	r6, r7
 800357e:	6820      	ldr	r0, [r4, #0]
 8003580:	4632      	mov	r2, r6
 8003582:	4641      	mov	r1, r8
 8003584:	f000 faa8 	bl	8003ad8 <memmove>
 8003588:	68a3      	ldr	r3, [r4, #8]
 800358a:	1b9b      	subs	r3, r3, r6
 800358c:	60a3      	str	r3, [r4, #8]
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	4433      	add	r3, r6
 8003592:	6023      	str	r3, [r4, #0]
 8003594:	2000      	movs	r0, #0
 8003596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800359a:	462a      	mov	r2, r5
 800359c:	f000 fad4 	bl	8003b48 <_realloc_r>
 80035a0:	4606      	mov	r6, r0
 80035a2:	2800      	cmp	r0, #0
 80035a4:	d1e0      	bne.n	8003568 <__ssputs_r+0x5c>
 80035a6:	6921      	ldr	r1, [r4, #16]
 80035a8:	4650      	mov	r0, sl
 80035aa:	f7ff feb7 	bl	800331c <_free_r>
 80035ae:	230c      	movs	r3, #12
 80035b0:	f8ca 3000 	str.w	r3, [sl]
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035ba:	81a3      	strh	r3, [r4, #12]
 80035bc:	f04f 30ff 	mov.w	r0, #4294967295
 80035c0:	e7e9      	b.n	8003596 <__ssputs_r+0x8a>
	...

080035c4 <_svfiprintf_r>:
 80035c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035c8:	4698      	mov	r8, r3
 80035ca:	898b      	ldrh	r3, [r1, #12]
 80035cc:	061b      	lsls	r3, r3, #24
 80035ce:	b09d      	sub	sp, #116	@ 0x74
 80035d0:	4607      	mov	r7, r0
 80035d2:	460d      	mov	r5, r1
 80035d4:	4614      	mov	r4, r2
 80035d6:	d510      	bpl.n	80035fa <_svfiprintf_r+0x36>
 80035d8:	690b      	ldr	r3, [r1, #16]
 80035da:	b973      	cbnz	r3, 80035fa <_svfiprintf_r+0x36>
 80035dc:	2140      	movs	r1, #64	@ 0x40
 80035de:	f7ff ff09 	bl	80033f4 <_malloc_r>
 80035e2:	6028      	str	r0, [r5, #0]
 80035e4:	6128      	str	r0, [r5, #16]
 80035e6:	b930      	cbnz	r0, 80035f6 <_svfiprintf_r+0x32>
 80035e8:	230c      	movs	r3, #12
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	f04f 30ff 	mov.w	r0, #4294967295
 80035f0:	b01d      	add	sp, #116	@ 0x74
 80035f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f6:	2340      	movs	r3, #64	@ 0x40
 80035f8:	616b      	str	r3, [r5, #20]
 80035fa:	2300      	movs	r3, #0
 80035fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80035fe:	2320      	movs	r3, #32
 8003600:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003604:	f8cd 800c 	str.w	r8, [sp, #12]
 8003608:	2330      	movs	r3, #48	@ 0x30
 800360a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80037a8 <_svfiprintf_r+0x1e4>
 800360e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003612:	f04f 0901 	mov.w	r9, #1
 8003616:	4623      	mov	r3, r4
 8003618:	469a      	mov	sl, r3
 800361a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800361e:	b10a      	cbz	r2, 8003624 <_svfiprintf_r+0x60>
 8003620:	2a25      	cmp	r2, #37	@ 0x25
 8003622:	d1f9      	bne.n	8003618 <_svfiprintf_r+0x54>
 8003624:	ebba 0b04 	subs.w	fp, sl, r4
 8003628:	d00b      	beq.n	8003642 <_svfiprintf_r+0x7e>
 800362a:	465b      	mov	r3, fp
 800362c:	4622      	mov	r2, r4
 800362e:	4629      	mov	r1, r5
 8003630:	4638      	mov	r0, r7
 8003632:	f7ff ff6b 	bl	800350c <__ssputs_r>
 8003636:	3001      	adds	r0, #1
 8003638:	f000 80a7 	beq.w	800378a <_svfiprintf_r+0x1c6>
 800363c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800363e:	445a      	add	r2, fp
 8003640:	9209      	str	r2, [sp, #36]	@ 0x24
 8003642:	f89a 3000 	ldrb.w	r3, [sl]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 809f 	beq.w	800378a <_svfiprintf_r+0x1c6>
 800364c:	2300      	movs	r3, #0
 800364e:	f04f 32ff 	mov.w	r2, #4294967295
 8003652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003656:	f10a 0a01 	add.w	sl, sl, #1
 800365a:	9304      	str	r3, [sp, #16]
 800365c:	9307      	str	r3, [sp, #28]
 800365e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003662:	931a      	str	r3, [sp, #104]	@ 0x68
 8003664:	4654      	mov	r4, sl
 8003666:	2205      	movs	r2, #5
 8003668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800366c:	484e      	ldr	r0, [pc, #312]	@ (80037a8 <_svfiprintf_r+0x1e4>)
 800366e:	f7fc fddf 	bl	8000230 <memchr>
 8003672:	9a04      	ldr	r2, [sp, #16]
 8003674:	b9d8      	cbnz	r0, 80036ae <_svfiprintf_r+0xea>
 8003676:	06d0      	lsls	r0, r2, #27
 8003678:	bf44      	itt	mi
 800367a:	2320      	movmi	r3, #32
 800367c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003680:	0711      	lsls	r1, r2, #28
 8003682:	bf44      	itt	mi
 8003684:	232b      	movmi	r3, #43	@ 0x2b
 8003686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800368a:	f89a 3000 	ldrb.w	r3, [sl]
 800368e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003690:	d015      	beq.n	80036be <_svfiprintf_r+0xfa>
 8003692:	9a07      	ldr	r2, [sp, #28]
 8003694:	4654      	mov	r4, sl
 8003696:	2000      	movs	r0, #0
 8003698:	f04f 0c0a 	mov.w	ip, #10
 800369c:	4621      	mov	r1, r4
 800369e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036a2:	3b30      	subs	r3, #48	@ 0x30
 80036a4:	2b09      	cmp	r3, #9
 80036a6:	d94b      	bls.n	8003740 <_svfiprintf_r+0x17c>
 80036a8:	b1b0      	cbz	r0, 80036d8 <_svfiprintf_r+0x114>
 80036aa:	9207      	str	r2, [sp, #28]
 80036ac:	e014      	b.n	80036d8 <_svfiprintf_r+0x114>
 80036ae:	eba0 0308 	sub.w	r3, r0, r8
 80036b2:	fa09 f303 	lsl.w	r3, r9, r3
 80036b6:	4313      	orrs	r3, r2
 80036b8:	9304      	str	r3, [sp, #16]
 80036ba:	46a2      	mov	sl, r4
 80036bc:	e7d2      	b.n	8003664 <_svfiprintf_r+0xa0>
 80036be:	9b03      	ldr	r3, [sp, #12]
 80036c0:	1d19      	adds	r1, r3, #4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	9103      	str	r1, [sp, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	bfbb      	ittet	lt
 80036ca:	425b      	neglt	r3, r3
 80036cc:	f042 0202 	orrlt.w	r2, r2, #2
 80036d0:	9307      	strge	r3, [sp, #28]
 80036d2:	9307      	strlt	r3, [sp, #28]
 80036d4:	bfb8      	it	lt
 80036d6:	9204      	strlt	r2, [sp, #16]
 80036d8:	7823      	ldrb	r3, [r4, #0]
 80036da:	2b2e      	cmp	r3, #46	@ 0x2e
 80036dc:	d10a      	bne.n	80036f4 <_svfiprintf_r+0x130>
 80036de:	7863      	ldrb	r3, [r4, #1]
 80036e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80036e2:	d132      	bne.n	800374a <_svfiprintf_r+0x186>
 80036e4:	9b03      	ldr	r3, [sp, #12]
 80036e6:	1d1a      	adds	r2, r3, #4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	9203      	str	r2, [sp, #12]
 80036ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036f0:	3402      	adds	r4, #2
 80036f2:	9305      	str	r3, [sp, #20]
 80036f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80037b8 <_svfiprintf_r+0x1f4>
 80036f8:	7821      	ldrb	r1, [r4, #0]
 80036fa:	2203      	movs	r2, #3
 80036fc:	4650      	mov	r0, sl
 80036fe:	f7fc fd97 	bl	8000230 <memchr>
 8003702:	b138      	cbz	r0, 8003714 <_svfiprintf_r+0x150>
 8003704:	9b04      	ldr	r3, [sp, #16]
 8003706:	eba0 000a 	sub.w	r0, r0, sl
 800370a:	2240      	movs	r2, #64	@ 0x40
 800370c:	4082      	lsls	r2, r0
 800370e:	4313      	orrs	r3, r2
 8003710:	3401      	adds	r4, #1
 8003712:	9304      	str	r3, [sp, #16]
 8003714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003718:	4824      	ldr	r0, [pc, #144]	@ (80037ac <_svfiprintf_r+0x1e8>)
 800371a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800371e:	2206      	movs	r2, #6
 8003720:	f7fc fd86 	bl	8000230 <memchr>
 8003724:	2800      	cmp	r0, #0
 8003726:	d036      	beq.n	8003796 <_svfiprintf_r+0x1d2>
 8003728:	4b21      	ldr	r3, [pc, #132]	@ (80037b0 <_svfiprintf_r+0x1ec>)
 800372a:	bb1b      	cbnz	r3, 8003774 <_svfiprintf_r+0x1b0>
 800372c:	9b03      	ldr	r3, [sp, #12]
 800372e:	3307      	adds	r3, #7
 8003730:	f023 0307 	bic.w	r3, r3, #7
 8003734:	3308      	adds	r3, #8
 8003736:	9303      	str	r3, [sp, #12]
 8003738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800373a:	4433      	add	r3, r6
 800373c:	9309      	str	r3, [sp, #36]	@ 0x24
 800373e:	e76a      	b.n	8003616 <_svfiprintf_r+0x52>
 8003740:	fb0c 3202 	mla	r2, ip, r2, r3
 8003744:	460c      	mov	r4, r1
 8003746:	2001      	movs	r0, #1
 8003748:	e7a8      	b.n	800369c <_svfiprintf_r+0xd8>
 800374a:	2300      	movs	r3, #0
 800374c:	3401      	adds	r4, #1
 800374e:	9305      	str	r3, [sp, #20]
 8003750:	4619      	mov	r1, r3
 8003752:	f04f 0c0a 	mov.w	ip, #10
 8003756:	4620      	mov	r0, r4
 8003758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800375c:	3a30      	subs	r2, #48	@ 0x30
 800375e:	2a09      	cmp	r2, #9
 8003760:	d903      	bls.n	800376a <_svfiprintf_r+0x1a6>
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0c6      	beq.n	80036f4 <_svfiprintf_r+0x130>
 8003766:	9105      	str	r1, [sp, #20]
 8003768:	e7c4      	b.n	80036f4 <_svfiprintf_r+0x130>
 800376a:	fb0c 2101 	mla	r1, ip, r1, r2
 800376e:	4604      	mov	r4, r0
 8003770:	2301      	movs	r3, #1
 8003772:	e7f0      	b.n	8003756 <_svfiprintf_r+0x192>
 8003774:	ab03      	add	r3, sp, #12
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	462a      	mov	r2, r5
 800377a:	4b0e      	ldr	r3, [pc, #56]	@ (80037b4 <_svfiprintf_r+0x1f0>)
 800377c:	a904      	add	r1, sp, #16
 800377e:	4638      	mov	r0, r7
 8003780:	f3af 8000 	nop.w
 8003784:	1c42      	adds	r2, r0, #1
 8003786:	4606      	mov	r6, r0
 8003788:	d1d6      	bne.n	8003738 <_svfiprintf_r+0x174>
 800378a:	89ab      	ldrh	r3, [r5, #12]
 800378c:	065b      	lsls	r3, r3, #25
 800378e:	f53f af2d 	bmi.w	80035ec <_svfiprintf_r+0x28>
 8003792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003794:	e72c      	b.n	80035f0 <_svfiprintf_r+0x2c>
 8003796:	ab03      	add	r3, sp, #12
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	462a      	mov	r2, r5
 800379c:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <_svfiprintf_r+0x1f0>)
 800379e:	a904      	add	r1, sp, #16
 80037a0:	4638      	mov	r0, r7
 80037a2:	f000 f879 	bl	8003898 <_printf_i>
 80037a6:	e7ed      	b.n	8003784 <_svfiprintf_r+0x1c0>
 80037a8:	08003c30 	.word	0x08003c30
 80037ac:	08003c3a 	.word	0x08003c3a
 80037b0:	00000000 	.word	0x00000000
 80037b4:	0800350d 	.word	0x0800350d
 80037b8:	08003c36 	.word	0x08003c36

080037bc <_printf_common>:
 80037bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c0:	4616      	mov	r6, r2
 80037c2:	4698      	mov	r8, r3
 80037c4:	688a      	ldr	r2, [r1, #8]
 80037c6:	690b      	ldr	r3, [r1, #16]
 80037c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037cc:	4293      	cmp	r3, r2
 80037ce:	bfb8      	it	lt
 80037d0:	4613      	movlt	r3, r2
 80037d2:	6033      	str	r3, [r6, #0]
 80037d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037d8:	4607      	mov	r7, r0
 80037da:	460c      	mov	r4, r1
 80037dc:	b10a      	cbz	r2, 80037e2 <_printf_common+0x26>
 80037de:	3301      	adds	r3, #1
 80037e0:	6033      	str	r3, [r6, #0]
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	0699      	lsls	r1, r3, #26
 80037e6:	bf42      	ittt	mi
 80037e8:	6833      	ldrmi	r3, [r6, #0]
 80037ea:	3302      	addmi	r3, #2
 80037ec:	6033      	strmi	r3, [r6, #0]
 80037ee:	6825      	ldr	r5, [r4, #0]
 80037f0:	f015 0506 	ands.w	r5, r5, #6
 80037f4:	d106      	bne.n	8003804 <_printf_common+0x48>
 80037f6:	f104 0a19 	add.w	sl, r4, #25
 80037fa:	68e3      	ldr	r3, [r4, #12]
 80037fc:	6832      	ldr	r2, [r6, #0]
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	42ab      	cmp	r3, r5
 8003802:	dc26      	bgt.n	8003852 <_printf_common+0x96>
 8003804:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003808:	6822      	ldr	r2, [r4, #0]
 800380a:	3b00      	subs	r3, #0
 800380c:	bf18      	it	ne
 800380e:	2301      	movne	r3, #1
 8003810:	0692      	lsls	r2, r2, #26
 8003812:	d42b      	bmi.n	800386c <_printf_common+0xb0>
 8003814:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003818:	4641      	mov	r1, r8
 800381a:	4638      	mov	r0, r7
 800381c:	47c8      	blx	r9
 800381e:	3001      	adds	r0, #1
 8003820:	d01e      	beq.n	8003860 <_printf_common+0xa4>
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	6922      	ldr	r2, [r4, #16]
 8003826:	f003 0306 	and.w	r3, r3, #6
 800382a:	2b04      	cmp	r3, #4
 800382c:	bf02      	ittt	eq
 800382e:	68e5      	ldreq	r5, [r4, #12]
 8003830:	6833      	ldreq	r3, [r6, #0]
 8003832:	1aed      	subeq	r5, r5, r3
 8003834:	68a3      	ldr	r3, [r4, #8]
 8003836:	bf0c      	ite	eq
 8003838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800383c:	2500      	movne	r5, #0
 800383e:	4293      	cmp	r3, r2
 8003840:	bfc4      	itt	gt
 8003842:	1a9b      	subgt	r3, r3, r2
 8003844:	18ed      	addgt	r5, r5, r3
 8003846:	2600      	movs	r6, #0
 8003848:	341a      	adds	r4, #26
 800384a:	42b5      	cmp	r5, r6
 800384c:	d11a      	bne.n	8003884 <_printf_common+0xc8>
 800384e:	2000      	movs	r0, #0
 8003850:	e008      	b.n	8003864 <_printf_common+0xa8>
 8003852:	2301      	movs	r3, #1
 8003854:	4652      	mov	r2, sl
 8003856:	4641      	mov	r1, r8
 8003858:	4638      	mov	r0, r7
 800385a:	47c8      	blx	r9
 800385c:	3001      	adds	r0, #1
 800385e:	d103      	bne.n	8003868 <_printf_common+0xac>
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003868:	3501      	adds	r5, #1
 800386a:	e7c6      	b.n	80037fa <_printf_common+0x3e>
 800386c:	18e1      	adds	r1, r4, r3
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	2030      	movs	r0, #48	@ 0x30
 8003872:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003876:	4422      	add	r2, r4
 8003878:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800387c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003880:	3302      	adds	r3, #2
 8003882:	e7c7      	b.n	8003814 <_printf_common+0x58>
 8003884:	2301      	movs	r3, #1
 8003886:	4622      	mov	r2, r4
 8003888:	4641      	mov	r1, r8
 800388a:	4638      	mov	r0, r7
 800388c:	47c8      	blx	r9
 800388e:	3001      	adds	r0, #1
 8003890:	d0e6      	beq.n	8003860 <_printf_common+0xa4>
 8003892:	3601      	adds	r6, #1
 8003894:	e7d9      	b.n	800384a <_printf_common+0x8e>
	...

08003898 <_printf_i>:
 8003898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800389c:	7e0f      	ldrb	r7, [r1, #24]
 800389e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038a0:	2f78      	cmp	r7, #120	@ 0x78
 80038a2:	4691      	mov	r9, r2
 80038a4:	4680      	mov	r8, r0
 80038a6:	460c      	mov	r4, r1
 80038a8:	469a      	mov	sl, r3
 80038aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038ae:	d807      	bhi.n	80038c0 <_printf_i+0x28>
 80038b0:	2f62      	cmp	r7, #98	@ 0x62
 80038b2:	d80a      	bhi.n	80038ca <_printf_i+0x32>
 80038b4:	2f00      	cmp	r7, #0
 80038b6:	f000 80d2 	beq.w	8003a5e <_printf_i+0x1c6>
 80038ba:	2f58      	cmp	r7, #88	@ 0x58
 80038bc:	f000 80b9 	beq.w	8003a32 <_printf_i+0x19a>
 80038c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038c8:	e03a      	b.n	8003940 <_printf_i+0xa8>
 80038ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038ce:	2b15      	cmp	r3, #21
 80038d0:	d8f6      	bhi.n	80038c0 <_printf_i+0x28>
 80038d2:	a101      	add	r1, pc, #4	@ (adr r1, 80038d8 <_printf_i+0x40>)
 80038d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038d8:	08003931 	.word	0x08003931
 80038dc:	08003945 	.word	0x08003945
 80038e0:	080038c1 	.word	0x080038c1
 80038e4:	080038c1 	.word	0x080038c1
 80038e8:	080038c1 	.word	0x080038c1
 80038ec:	080038c1 	.word	0x080038c1
 80038f0:	08003945 	.word	0x08003945
 80038f4:	080038c1 	.word	0x080038c1
 80038f8:	080038c1 	.word	0x080038c1
 80038fc:	080038c1 	.word	0x080038c1
 8003900:	080038c1 	.word	0x080038c1
 8003904:	08003a45 	.word	0x08003a45
 8003908:	0800396f 	.word	0x0800396f
 800390c:	080039ff 	.word	0x080039ff
 8003910:	080038c1 	.word	0x080038c1
 8003914:	080038c1 	.word	0x080038c1
 8003918:	08003a67 	.word	0x08003a67
 800391c:	080038c1 	.word	0x080038c1
 8003920:	0800396f 	.word	0x0800396f
 8003924:	080038c1 	.word	0x080038c1
 8003928:	080038c1 	.word	0x080038c1
 800392c:	08003a07 	.word	0x08003a07
 8003930:	6833      	ldr	r3, [r6, #0]
 8003932:	1d1a      	adds	r2, r3, #4
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6032      	str	r2, [r6, #0]
 8003938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800393c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003940:	2301      	movs	r3, #1
 8003942:	e09d      	b.n	8003a80 <_printf_i+0x1e8>
 8003944:	6833      	ldr	r3, [r6, #0]
 8003946:	6820      	ldr	r0, [r4, #0]
 8003948:	1d19      	adds	r1, r3, #4
 800394a:	6031      	str	r1, [r6, #0]
 800394c:	0606      	lsls	r6, r0, #24
 800394e:	d501      	bpl.n	8003954 <_printf_i+0xbc>
 8003950:	681d      	ldr	r5, [r3, #0]
 8003952:	e003      	b.n	800395c <_printf_i+0xc4>
 8003954:	0645      	lsls	r5, r0, #25
 8003956:	d5fb      	bpl.n	8003950 <_printf_i+0xb8>
 8003958:	f9b3 5000 	ldrsh.w	r5, [r3]
 800395c:	2d00      	cmp	r5, #0
 800395e:	da03      	bge.n	8003968 <_printf_i+0xd0>
 8003960:	232d      	movs	r3, #45	@ 0x2d
 8003962:	426d      	negs	r5, r5
 8003964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003968:	4859      	ldr	r0, [pc, #356]	@ (8003ad0 <_printf_i+0x238>)
 800396a:	230a      	movs	r3, #10
 800396c:	e011      	b.n	8003992 <_printf_i+0xfa>
 800396e:	6821      	ldr	r1, [r4, #0]
 8003970:	6833      	ldr	r3, [r6, #0]
 8003972:	0608      	lsls	r0, r1, #24
 8003974:	f853 5b04 	ldr.w	r5, [r3], #4
 8003978:	d402      	bmi.n	8003980 <_printf_i+0xe8>
 800397a:	0649      	lsls	r1, r1, #25
 800397c:	bf48      	it	mi
 800397e:	b2ad      	uxthmi	r5, r5
 8003980:	2f6f      	cmp	r7, #111	@ 0x6f
 8003982:	4853      	ldr	r0, [pc, #332]	@ (8003ad0 <_printf_i+0x238>)
 8003984:	6033      	str	r3, [r6, #0]
 8003986:	bf14      	ite	ne
 8003988:	230a      	movne	r3, #10
 800398a:	2308      	moveq	r3, #8
 800398c:	2100      	movs	r1, #0
 800398e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003992:	6866      	ldr	r6, [r4, #4]
 8003994:	60a6      	str	r6, [r4, #8]
 8003996:	2e00      	cmp	r6, #0
 8003998:	bfa2      	ittt	ge
 800399a:	6821      	ldrge	r1, [r4, #0]
 800399c:	f021 0104 	bicge.w	r1, r1, #4
 80039a0:	6021      	strge	r1, [r4, #0]
 80039a2:	b90d      	cbnz	r5, 80039a8 <_printf_i+0x110>
 80039a4:	2e00      	cmp	r6, #0
 80039a6:	d04b      	beq.n	8003a40 <_printf_i+0x1a8>
 80039a8:	4616      	mov	r6, r2
 80039aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80039ae:	fb03 5711 	mls	r7, r3, r1, r5
 80039b2:	5dc7      	ldrb	r7, [r0, r7]
 80039b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039b8:	462f      	mov	r7, r5
 80039ba:	42bb      	cmp	r3, r7
 80039bc:	460d      	mov	r5, r1
 80039be:	d9f4      	bls.n	80039aa <_printf_i+0x112>
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d10b      	bne.n	80039dc <_printf_i+0x144>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	07df      	lsls	r7, r3, #31
 80039c8:	d508      	bpl.n	80039dc <_printf_i+0x144>
 80039ca:	6923      	ldr	r3, [r4, #16]
 80039cc:	6861      	ldr	r1, [r4, #4]
 80039ce:	4299      	cmp	r1, r3
 80039d0:	bfde      	ittt	le
 80039d2:	2330      	movle	r3, #48	@ 0x30
 80039d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039dc:	1b92      	subs	r2, r2, r6
 80039de:	6122      	str	r2, [r4, #16]
 80039e0:	f8cd a000 	str.w	sl, [sp]
 80039e4:	464b      	mov	r3, r9
 80039e6:	aa03      	add	r2, sp, #12
 80039e8:	4621      	mov	r1, r4
 80039ea:	4640      	mov	r0, r8
 80039ec:	f7ff fee6 	bl	80037bc <_printf_common>
 80039f0:	3001      	adds	r0, #1
 80039f2:	d14a      	bne.n	8003a8a <_printf_i+0x1f2>
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	b004      	add	sp, #16
 80039fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	f043 0320 	orr.w	r3, r3, #32
 8003a04:	6023      	str	r3, [r4, #0]
 8003a06:	4833      	ldr	r0, [pc, #204]	@ (8003ad4 <_printf_i+0x23c>)
 8003a08:	2778      	movs	r7, #120	@ 0x78
 8003a0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	6831      	ldr	r1, [r6, #0]
 8003a12:	061f      	lsls	r7, r3, #24
 8003a14:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a18:	d402      	bmi.n	8003a20 <_printf_i+0x188>
 8003a1a:	065f      	lsls	r7, r3, #25
 8003a1c:	bf48      	it	mi
 8003a1e:	b2ad      	uxthmi	r5, r5
 8003a20:	6031      	str	r1, [r6, #0]
 8003a22:	07d9      	lsls	r1, r3, #31
 8003a24:	bf44      	itt	mi
 8003a26:	f043 0320 	orrmi.w	r3, r3, #32
 8003a2a:	6023      	strmi	r3, [r4, #0]
 8003a2c:	b11d      	cbz	r5, 8003a36 <_printf_i+0x19e>
 8003a2e:	2310      	movs	r3, #16
 8003a30:	e7ac      	b.n	800398c <_printf_i+0xf4>
 8003a32:	4827      	ldr	r0, [pc, #156]	@ (8003ad0 <_printf_i+0x238>)
 8003a34:	e7e9      	b.n	8003a0a <_printf_i+0x172>
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	f023 0320 	bic.w	r3, r3, #32
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	e7f6      	b.n	8003a2e <_printf_i+0x196>
 8003a40:	4616      	mov	r6, r2
 8003a42:	e7bd      	b.n	80039c0 <_printf_i+0x128>
 8003a44:	6833      	ldr	r3, [r6, #0]
 8003a46:	6825      	ldr	r5, [r4, #0]
 8003a48:	6961      	ldr	r1, [r4, #20]
 8003a4a:	1d18      	adds	r0, r3, #4
 8003a4c:	6030      	str	r0, [r6, #0]
 8003a4e:	062e      	lsls	r6, r5, #24
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	d501      	bpl.n	8003a58 <_printf_i+0x1c0>
 8003a54:	6019      	str	r1, [r3, #0]
 8003a56:	e002      	b.n	8003a5e <_printf_i+0x1c6>
 8003a58:	0668      	lsls	r0, r5, #25
 8003a5a:	d5fb      	bpl.n	8003a54 <_printf_i+0x1bc>
 8003a5c:	8019      	strh	r1, [r3, #0]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6123      	str	r3, [r4, #16]
 8003a62:	4616      	mov	r6, r2
 8003a64:	e7bc      	b.n	80039e0 <_printf_i+0x148>
 8003a66:	6833      	ldr	r3, [r6, #0]
 8003a68:	1d1a      	adds	r2, r3, #4
 8003a6a:	6032      	str	r2, [r6, #0]
 8003a6c:	681e      	ldr	r6, [r3, #0]
 8003a6e:	6862      	ldr	r2, [r4, #4]
 8003a70:	2100      	movs	r1, #0
 8003a72:	4630      	mov	r0, r6
 8003a74:	f7fc fbdc 	bl	8000230 <memchr>
 8003a78:	b108      	cbz	r0, 8003a7e <_printf_i+0x1e6>
 8003a7a:	1b80      	subs	r0, r0, r6
 8003a7c:	6060      	str	r0, [r4, #4]
 8003a7e:	6863      	ldr	r3, [r4, #4]
 8003a80:	6123      	str	r3, [r4, #16]
 8003a82:	2300      	movs	r3, #0
 8003a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a88:	e7aa      	b.n	80039e0 <_printf_i+0x148>
 8003a8a:	6923      	ldr	r3, [r4, #16]
 8003a8c:	4632      	mov	r2, r6
 8003a8e:	4649      	mov	r1, r9
 8003a90:	4640      	mov	r0, r8
 8003a92:	47d0      	blx	sl
 8003a94:	3001      	adds	r0, #1
 8003a96:	d0ad      	beq.n	80039f4 <_printf_i+0x15c>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	079b      	lsls	r3, r3, #30
 8003a9c:	d413      	bmi.n	8003ac6 <_printf_i+0x22e>
 8003a9e:	68e0      	ldr	r0, [r4, #12]
 8003aa0:	9b03      	ldr	r3, [sp, #12]
 8003aa2:	4298      	cmp	r0, r3
 8003aa4:	bfb8      	it	lt
 8003aa6:	4618      	movlt	r0, r3
 8003aa8:	e7a6      	b.n	80039f8 <_printf_i+0x160>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	4632      	mov	r2, r6
 8003aae:	4649      	mov	r1, r9
 8003ab0:	4640      	mov	r0, r8
 8003ab2:	47d0      	blx	sl
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d09d      	beq.n	80039f4 <_printf_i+0x15c>
 8003ab8:	3501      	adds	r5, #1
 8003aba:	68e3      	ldr	r3, [r4, #12]
 8003abc:	9903      	ldr	r1, [sp, #12]
 8003abe:	1a5b      	subs	r3, r3, r1
 8003ac0:	42ab      	cmp	r3, r5
 8003ac2:	dcf2      	bgt.n	8003aaa <_printf_i+0x212>
 8003ac4:	e7eb      	b.n	8003a9e <_printf_i+0x206>
 8003ac6:	2500      	movs	r5, #0
 8003ac8:	f104 0619 	add.w	r6, r4, #25
 8003acc:	e7f5      	b.n	8003aba <_printf_i+0x222>
 8003ace:	bf00      	nop
 8003ad0:	08003c41 	.word	0x08003c41
 8003ad4:	08003c52 	.word	0x08003c52

08003ad8 <memmove>:
 8003ad8:	4288      	cmp	r0, r1
 8003ada:	b510      	push	{r4, lr}
 8003adc:	eb01 0402 	add.w	r4, r1, r2
 8003ae0:	d902      	bls.n	8003ae8 <memmove+0x10>
 8003ae2:	4284      	cmp	r4, r0
 8003ae4:	4623      	mov	r3, r4
 8003ae6:	d807      	bhi.n	8003af8 <memmove+0x20>
 8003ae8:	1e43      	subs	r3, r0, #1
 8003aea:	42a1      	cmp	r1, r4
 8003aec:	d008      	beq.n	8003b00 <memmove+0x28>
 8003aee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003af2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003af6:	e7f8      	b.n	8003aea <memmove+0x12>
 8003af8:	4402      	add	r2, r0
 8003afa:	4601      	mov	r1, r0
 8003afc:	428a      	cmp	r2, r1
 8003afe:	d100      	bne.n	8003b02 <memmove+0x2a>
 8003b00:	bd10      	pop	{r4, pc}
 8003b02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b0a:	e7f7      	b.n	8003afc <memmove+0x24>

08003b0c <_sbrk_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4d06      	ldr	r5, [pc, #24]	@ (8003b28 <_sbrk_r+0x1c>)
 8003b10:	2300      	movs	r3, #0
 8003b12:	4604      	mov	r4, r0
 8003b14:	4608      	mov	r0, r1
 8003b16:	602b      	str	r3, [r5, #0]
 8003b18:	f7fd f82c 	bl	8000b74 <_sbrk>
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	d102      	bne.n	8003b26 <_sbrk_r+0x1a>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	b103      	cbz	r3, 8003b26 <_sbrk_r+0x1a>
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	bd38      	pop	{r3, r4, r5, pc}
 8003b28:	200002e8 	.word	0x200002e8

08003b2c <memcpy>:
 8003b2c:	440a      	add	r2, r1
 8003b2e:	4291      	cmp	r1, r2
 8003b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b34:	d100      	bne.n	8003b38 <memcpy+0xc>
 8003b36:	4770      	bx	lr
 8003b38:	b510      	push	{r4, lr}
 8003b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b42:	4291      	cmp	r1, r2
 8003b44:	d1f9      	bne.n	8003b3a <memcpy+0xe>
 8003b46:	bd10      	pop	{r4, pc}

08003b48 <_realloc_r>:
 8003b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b4c:	4680      	mov	r8, r0
 8003b4e:	4615      	mov	r5, r2
 8003b50:	460c      	mov	r4, r1
 8003b52:	b921      	cbnz	r1, 8003b5e <_realloc_r+0x16>
 8003b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b58:	4611      	mov	r1, r2
 8003b5a:	f7ff bc4b 	b.w	80033f4 <_malloc_r>
 8003b5e:	b92a      	cbnz	r2, 8003b6c <_realloc_r+0x24>
 8003b60:	f7ff fbdc 	bl	800331c <_free_r>
 8003b64:	2400      	movs	r4, #0
 8003b66:	4620      	mov	r0, r4
 8003b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b6c:	f000 f81a 	bl	8003ba4 <_malloc_usable_size_r>
 8003b70:	4285      	cmp	r5, r0
 8003b72:	4606      	mov	r6, r0
 8003b74:	d802      	bhi.n	8003b7c <_realloc_r+0x34>
 8003b76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003b7a:	d8f4      	bhi.n	8003b66 <_realloc_r+0x1e>
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	4640      	mov	r0, r8
 8003b80:	f7ff fc38 	bl	80033f4 <_malloc_r>
 8003b84:	4607      	mov	r7, r0
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d0ec      	beq.n	8003b64 <_realloc_r+0x1c>
 8003b8a:	42b5      	cmp	r5, r6
 8003b8c:	462a      	mov	r2, r5
 8003b8e:	4621      	mov	r1, r4
 8003b90:	bf28      	it	cs
 8003b92:	4632      	movcs	r2, r6
 8003b94:	f7ff ffca 	bl	8003b2c <memcpy>
 8003b98:	4621      	mov	r1, r4
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	f7ff fbbe 	bl	800331c <_free_r>
 8003ba0:	463c      	mov	r4, r7
 8003ba2:	e7e0      	b.n	8003b66 <_realloc_r+0x1e>

08003ba4 <_malloc_usable_size_r>:
 8003ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ba8:	1f18      	subs	r0, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	bfbc      	itt	lt
 8003bae:	580b      	ldrlt	r3, [r1, r0]
 8003bb0:	18c0      	addlt	r0, r0, r3
 8003bb2:	4770      	bx	lr

08003bb4 <_init>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	bf00      	nop
 8003bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bba:	bc08      	pop	{r3}
 8003bbc:	469e      	mov	lr, r3
 8003bbe:	4770      	bx	lr

08003bc0 <_fini>:
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc2:	bf00      	nop
 8003bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc6:	bc08      	pop	{r3}
 8003bc8:	469e      	mov	lr, r3
 8003bca:	4770      	bx	lr
