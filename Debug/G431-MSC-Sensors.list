
G431-MSC-Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000447c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800465c  0800465c  0000565c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800472c  0800472c  00006078  2**0
                  CONTENTS
  4 .ARM          00000008  0800472c  0800472c  0000572c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004734  08004734  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004734  08004734  00005734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004738  08004738  00005738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800473c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000078  080047b4  00006078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  080047b4  00006304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010140  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ac  00000000  00000000  000161e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00018598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5b  00000000  00000000  00019300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e913  00000000  00000000  00019d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a7b  00000000  00000000  0003866e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb4fa  00000000  00000000  0004a0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001055e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e50  00000000  00000000  00105628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00109478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004644 	.word	0x08004644

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08004644 	.word	0x08004644

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <verifySensor>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void verifySensor(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
	for (uint8_t i=0x00;i<0xFF;i++){
 80005c6:	2300      	movs	r3, #0
 80005c8:	71fb      	strb	r3, [r7, #7]
 80005ca:	e014      	b.n	80005f6 <verifySensor+0x36>

		if(HAL_I2C_IsDeviceReady(&hi2c1,i,3,100)== HAL_OK){
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	b299      	uxth	r1, r3
 80005d0:	2364      	movs	r3, #100	@ 0x64
 80005d2:	2203      	movs	r2, #3
 80005d4:	480c      	ldr	r0, [pc, #48]	@ (8000608 <verifySensor+0x48>)
 80005d6:	f000 ff48 	bl	800146a <HAL_I2C_IsDeviceReady>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d107      	bne.n	80005f0 <verifySensor+0x30>
			printf("[0x%02X|%d]: Peripheral avaible,avaible at [ox%02X]\r\n",i,(int)i,((uint16_t)i)>>1);
 80005e0:	79f9      	ldrb	r1, [r7, #7]
 80005e2:	79fa      	ldrb	r2, [r7, #7]
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	085b      	lsrs	r3, r3, #1
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4808      	ldr	r0, [pc, #32]	@ (800060c <verifySensor+0x4c>)
 80005ec:	f003 f9bc 	bl	8003968 <iprintf>
	for (uint8_t i=0x00;i<0xFF;i++){
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	3301      	adds	r3, #1
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	2bff      	cmp	r3, #255	@ 0xff
 80005fa:	d1e7      	bne.n	80005cc <verifySensor+0xc>
		}

	}
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000094 	.word	0x20000094
 800060c:	0800465c 	.word	0x0800465c

08000610 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000614:	f000 fb63 	bl	8000cde <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000618:	f000 f80e 	bl	8000638 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800061c:	f000 f8e2 	bl	80007e4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000620:	f000 f856 	bl	80006d0 <MX_I2C1_Init>
	MX_LPUART1_UART_Init();
 8000624:	f000 f894 	bl	8000750 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	setup();
 8000628:	f003 f89e 	bl	8003768 <setup>
	verifySensor();
 800062c:	f7ff ffc8 	bl	80005c0 <verifySensor>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		test_LEDs(50);
 8000630:	2032      	movs	r0, #50	@ 0x32
 8000632:	f003 f8c7 	bl	80037c4 <test_LEDs>
 8000636:	e7fb      	b.n	8000630 <main+0x20>

08000638 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
 800063c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	2238      	movs	r2, #56	@ 0x38
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f003 f9e3 	bl	8003a12 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800065a:	2000      	movs	r0, #0
 800065c:	f001 f9e6 	bl	8001a2c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066a:	2340      	movs	r3, #64	@ 0x40
 800066c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000672:	2302      	movs	r3, #2
 8000674:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000676:	2304      	movs	r3, #4
 8000678:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800067a:	2355      	movs	r3, #85	@ 0x55
 800067c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fa80 	bl	8001b94 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800069a:	f000 f909 	bl	80008b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2303      	movs	r3, #3
 80006a4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2104      	movs	r1, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fd7e 	bl	80021b8 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80006c2:	f000 f8f5 	bl	80008b0 <Error_Handler>
	}
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	@ 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <MX_I2C1_Init+0x74>)
 80006d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000748 <MX_I2C1_Init+0x78>)
 80006d8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x40B285C2;
 80006da:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <MX_I2C1_Init+0x74>)
 80006dc:	4a1b      	ldr	r2, [pc, #108]	@ (800074c <MX_I2C1_Init+0x7c>)
 80006de:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80006e0:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e6:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <MX_I2C1_Init+0x74>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <MX_I2C1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_I2C1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_I2C1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070a:	480e      	ldr	r0, [pc, #56]	@ (8000744 <MX_I2C1_Init+0x74>)
 800070c:	f000 fe12 	bl	8001334 <HAL_I2C_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000716:	f000 f8cb 	bl	80008b0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071a:	2100      	movs	r1, #0
 800071c:	4809      	ldr	r0, [pc, #36]	@ (8000744 <MX_I2C1_Init+0x74>)
 800071e:	f001 f8ed 	bl	80018fc <HAL_I2CEx_ConfigAnalogFilter>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000728:	f000 f8c2 	bl	80008b0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800072c:	2100      	movs	r1, #0
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_I2C1_Init+0x74>)
 8000730:	f001 f92f 	bl	8001992 <HAL_I2CEx_ConfigDigitalFilter>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 800073a:	f000 f8b9 	bl	80008b0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000094 	.word	0x20000094
 8000748:	40005400 	.word	0x40005400
 800074c:	40b285c2 	.word	0x40b285c2

08000750 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000754:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <MX_LPUART1_UART_Init+0x8c>)
 8000756:	4a22      	ldr	r2, [pc, #136]	@ (80007e0 <MX_LPUART1_UART_Init+0x90>)
 8000758:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 800075a:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <MX_LPUART1_UART_Init+0x8c>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <MX_LPUART1_UART_Init+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <MX_LPUART1_UART_Init+0x8c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 800076e:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <MX_LPUART1_UART_Init+0x8c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <MX_LPUART1_UART_Init+0x8c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <MX_LPUART1_UART_Init+0x8c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000780:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <MX_LPUART1_UART_Init+0x8c>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <MX_LPUART1_UART_Init+0x8c>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_LPUART1_UART_Init+0x8c>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000792:	4812      	ldr	r0, [pc, #72]	@ (80007dc <MX_LPUART1_UART_Init+0x8c>)
 8000794:	f002 f91c 	bl	80029d0 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_LPUART1_UART_Init+0x52>
	{
		Error_Handler();
 800079e:	f000 f887 	bl	80008b0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a2:	2100      	movs	r1, #0
 80007a4:	480d      	ldr	r0, [pc, #52]	@ (80007dc <MX_LPUART1_UART_Init+0x8c>)
 80007a6:	f002 ff15 	bl	80035d4 <HAL_UARTEx_SetTxFifoThreshold>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_LPUART1_UART_Init+0x64>
	{
		Error_Handler();
 80007b0:	f000 f87e 	bl	80008b0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b4:	2100      	movs	r1, #0
 80007b6:	4809      	ldr	r0, [pc, #36]	@ (80007dc <MX_LPUART1_UART_Init+0x8c>)
 80007b8:	f002 ff4a 	bl	8003650 <HAL_UARTEx_SetRxFifoThreshold>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_LPUART1_UART_Init+0x76>
	{
		Error_Handler();
 80007c2:	f000 f875 	bl	80008b0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_LPUART1_UART_Init+0x8c>)
 80007c8:	f002 fecb 	bl	8003562 <HAL_UARTEx_DisableFifoMode>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_LPUART1_UART_Init+0x86>
	{
		Error_Handler();
 80007d2:	f000 f86d 	bl	80008b0 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000e8 	.word	0x200000e8
 80007e0:	40008000 	.word	0x40008000

080007e4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	@ 0x28
 80007e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b2b      	ldr	r3, [pc, #172]	@ (80008a8 <MX_GPIO_Init+0xc4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	4a2a      	ldr	r2, [pc, #168]	@ (80008a8 <MX_GPIO_Init+0xc4>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000806:	4b28      	ldr	r3, [pc, #160]	@ (80008a8 <MX_GPIO_Init+0xc4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000812:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <MX_GPIO_Init+0xc4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	4a24      	ldr	r2, [pc, #144]	@ (80008a8 <MX_GPIO_Init+0xc4>)
 8000818:	f043 0320 	orr.w	r3, r3, #32
 800081c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081e:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <MX_GPIO_Init+0xc4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	f003 0320 	and.w	r3, r3, #32
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <MX_GPIO_Init+0xc4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	4a1e      	ldr	r2, [pc, #120]	@ (80008a8 <MX_GPIO_Init+0xc4>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000836:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <MX_GPIO_Init+0xc4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <MX_GPIO_Init+0xc4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	4a18      	ldr	r2, [pc, #96]	@ (80008a8 <MX_GPIO_Init+0xc4>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084e:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <MX_GPIO_Init+0xc4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000862:	f000 fd35 	bl	80012d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000866:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800086a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	480c      	ldr	r0, [pc, #48]	@ (80008ac <MX_GPIO_Init+0xc8>)
 800087c:	f000 fba6 	bl	8000fcc <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000880:	2320      	movs	r3, #32
 8000882:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089a:	f000 fb97 	bl	8000fcc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	@ 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000
 80008ac:	48000800 	.word	0x48000800

080008b0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <Error_Handler+0x8>

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <HAL_MspInit+0x44>)
 80008c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000900 <HAL_MspInit+0x44>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <HAL_MspInit+0x44>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <HAL_MspInit+0x44>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008de:	4a08      	ldr	r2, [pc, #32]	@ (8000900 <HAL_MspInit+0x44>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <HAL_MspInit+0x44>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008f2:	f001 f93f 	bl	8001b74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b09c      	sub	sp, #112	@ 0x70
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091c:	f107 0318 	add.w	r3, r7, #24
 8000920:	2244      	movs	r2, #68	@ 0x44
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f003 f874 	bl	8003a12 <memset>
  if(hi2c->Instance==I2C1)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a2d      	ldr	r2, [pc, #180]	@ (80009e4 <HAL_I2C_MspInit+0xe0>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d153      	bne.n	80009dc <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000934:	2340      	movs	r3, #64	@ 0x40
 8000936:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093c:	f107 0318 	add.w	r3, r7, #24
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fe55 	bl	80025f0 <HAL_RCCEx_PeriphCLKConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800094c:	f7ff ffb0 	bl	80008b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	4b25      	ldr	r3, [pc, #148]	@ (80009e8 <HAL_I2C_MspInit+0xe4>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000954:	4a24      	ldr	r2, [pc, #144]	@ (80009e8 <HAL_I2C_MspInit+0xe4>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095c:	4b22      	ldr	r3, [pc, #136]	@ (80009e8 <HAL_I2C_MspInit+0xe4>)
 800095e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000968:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <HAL_I2C_MspInit+0xe4>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096c:	4a1e      	ldr	r2, [pc, #120]	@ (80009e8 <HAL_I2C_MspInit+0xe4>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000974:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <HAL_I2C_MspInit+0xe4>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000978:	f003 0302 	and.w	r3, r3, #2
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000980:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000984:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000986:	2312      	movs	r3, #18
 8000988:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000992:	2304      	movs	r3, #4
 8000994:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800099a:	4619      	mov	r1, r3
 800099c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a0:	f000 fb14 	bl	8000fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009a4:	2380      	movs	r3, #128	@ 0x80
 80009a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a8:	2312      	movs	r3, #18
 80009aa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b4:	2304      	movs	r3, #4
 80009b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009bc:	4619      	mov	r1, r3
 80009be:	480b      	ldr	r0, [pc, #44]	@ (80009ec <HAL_I2C_MspInit+0xe8>)
 80009c0:	f000 fb04 	bl	8000fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <HAL_I2C_MspInit+0xe4>)
 80009c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c8:	4a07      	ldr	r2, [pc, #28]	@ (80009e8 <HAL_I2C_MspInit+0xe4>)
 80009ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <HAL_I2C_MspInit+0xe4>)
 80009d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009dc:	bf00      	nop
 80009de:	3770      	adds	r7, #112	@ 0x70
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40005400 	.word	0x40005400
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000400 	.word	0x48000400

080009f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b09a      	sub	sp, #104	@ 0x68
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	2244      	movs	r2, #68	@ 0x44
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 fffe 	bl	8003a12 <memset>
  if(huart->Instance==LPUART1)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000a98 <HAL_UART_MspInit+0xa8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d136      	bne.n	8000a8e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a20:	2320      	movs	r3, #32
 8000a22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fddf 	bl	80025f0 <HAL_RCCEx_PeriphCLKConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a38:	f7ff ff3a 	bl	80008b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a3c:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <HAL_UART_MspInit+0xac>)
 8000a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a40:	4a16      	ldr	r2, [pc, #88]	@ (8000a9c <HAL_UART_MspInit+0xac>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000a48:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <HAL_UART_MspInit+0xac>)
 8000a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a54:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <HAL_UART_MspInit+0xac>)
 8000a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a58:	4a10      	ldr	r2, [pc, #64]	@ (8000a9c <HAL_UART_MspInit+0xac>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a60:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_UART_MspInit+0xac>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a84:	4619      	mov	r1, r3
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8a:	f000 fa9f 	bl	8000fcc <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000a8e:	bf00      	nop
 8000a90:	3768      	adds	r7, #104	@ 0x68
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40008000 	.word	0x40008000
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000aa8:	1d39      	adds	r1, r7, #4
 8000aaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4803      	ldr	r0, [pc, #12]	@ (8000ac0 <__io_putchar+0x20>)
 8000ab2:	f001 ffdd 	bl	8002a70 <HAL_UART_Transmit>

  return ch;
 8000ab6:	687b      	ldr	r3, [r7, #4]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200000e8 	.word	0x200000e8

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <NMI_Handler+0x4>

08000acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <MemManage_Handler+0x4>

08000adc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1a:	f000 f933 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e00a      	b.n	8000b4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b34:	f3af 8000 	nop.w
 8000b38:	4601      	mov	r1, r0
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1c5a      	adds	r2, r3, #1
 8000b3e:	60ba      	str	r2, [r7, #8]
 8000b40:	b2ca      	uxtb	r2, r1
 8000b42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	3301      	adds	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	dbf0      	blt.n	8000b34 <_read+0x12>
  }

  return len;
 8000b52:	687b      	ldr	r3, [r7, #4]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e009      	b.n	8000b82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	60ba      	str	r2, [r7, #8]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff92 	bl	8000aa0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	dbf1      	blt.n	8000b6e <_write+0x12>
  }
  return len;
 8000b8a:	687b      	ldr	r3, [r7, #4]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <_close>:

int _close(int file)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bbc:	605a      	str	r2, [r3, #4]
  return 0;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_isatty>:

int _isatty(int file)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd4:	2301      	movs	r3, #1
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f002 ff40 	bl	8003ab0 <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20008000 	.word	0x20008000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	2000017c 	.word	0x2000017c
 8000c64:	20000308 	.word	0x20000308

08000c68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c8c:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c8e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c90:	f7ff ffea 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c96:	490d      	ldr	r1, [pc, #52]	@ (8000ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c98:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <LoopForever+0xe>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cac:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd8 <LoopForever+0x16>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f002 feff 	bl	8003abc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cbe:	f7ff fca7 	bl	8000610 <main>

08000cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc2:	e7fe      	b.n	8000cc2 <LoopForever>
  ldr   r0, =_estack
 8000cc4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000cd0:	0800473c 	.word	0x0800473c
  ldr r2, =_sbss
 8000cd4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000cd8:	20000304 	.word	0x20000304

08000cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC1_2_IRQHandler>

08000cde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f93d 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 f80e 	bl	8000d10 <HAL_InitTick>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	e001      	b.n	8000d04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d00:	f7ff fddc 	bl	80008bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d04:	79fb      	ldrb	r3, [r7, #7]

}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d1c:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <HAL_InitTick+0x68>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d022      	beq.n	8000d6a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d24:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <HAL_InitTick+0x6c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <HAL_InitTick+0x68>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f93a 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10f      	bne.n	8000d64 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b0f      	cmp	r3, #15
 8000d48:	d809      	bhi.n	8000d5e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d52:	f000 f914 	bl	8000f7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <HAL_InitTick+0x70>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	e007      	b.n	8000d6e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	e004      	b.n	8000d6e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	73fb      	strb	r3, [r7, #15]
 8000d68:	e001      	b.n	8000d6e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000004 	.word	0x20000004

08000d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <HAL_IncTick+0x1c>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <HAL_IncTick+0x20>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4413      	add	r3, r2
 8000d92:	4a03      	ldr	r2, [pc, #12]	@ (8000da0 <HAL_IncTick+0x1c>)
 8000d94:	6013      	str	r3, [r2, #0]
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	20000180 	.word	0x20000180
 8000da4:	20000008 	.word	0x20000008

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	@ (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000180 	.word	0x20000180

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff ffee 	bl	8000da8 <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd8:	d004      	beq.n	8000de4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <HAL_Delay+0x40>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	4413      	add	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de4:	bf00      	nop
 8000de6:	f7ff ffdf 	bl	8000da8 <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d8f7      	bhi.n	8000de6 <HAL_Delay+0x26>
  {
  }
}
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000008 	.word	0x20000008

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	@ (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	@ (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	@ 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	@ 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f34:	d301      	bcc.n	8000f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00f      	b.n	8000f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <SysTick_Config+0x40>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f42:	210f      	movs	r1, #15
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f7ff ff8e 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <SysTick_Config+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f52:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <SysTick_Config+0x40>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff47 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff5e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff90 	bl	8000ebc <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5f 	bl	8000e68 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb2 	bl	8000f24 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fda:	e15a      	b.n	8001292 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 814c 	beq.w	800128c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d005      	beq.n	800100c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001008:	2b02      	cmp	r3, #2
 800100a:	d130      	bne.n	800106e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001042:	2201      	movs	r2, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	091b      	lsrs	r3, r3, #4
 8001058:	f003 0201 	and.w	r2, r3, #1
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b03      	cmp	r3, #3
 8001078:	d017      	beq.n	80010aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d123      	bne.n	80010fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	691a      	ldr	r2, [r3, #16]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	6939      	ldr	r1, [r7, #16]
 80010fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0203 	and.w	r2, r3, #3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 80a6 	beq.w	800128c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001140:	4b5b      	ldr	r3, [pc, #364]	@ (80012b0 <HAL_GPIO_Init+0x2e4>)
 8001142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001144:	4a5a      	ldr	r2, [pc, #360]	@ (80012b0 <HAL_GPIO_Init+0x2e4>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6613      	str	r3, [r2, #96]	@ 0x60
 800114c:	4b58      	ldr	r3, [pc, #352]	@ (80012b0 <HAL_GPIO_Init+0x2e4>)
 800114e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001158:	4a56      	ldr	r2, [pc, #344]	@ (80012b4 <HAL_GPIO_Init+0x2e8>)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	089b      	lsrs	r3, r3, #2
 800115e:	3302      	adds	r3, #2
 8001160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220f      	movs	r2, #15
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001182:	d01f      	beq.n	80011c4 <HAL_GPIO_Init+0x1f8>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a4c      	ldr	r2, [pc, #304]	@ (80012b8 <HAL_GPIO_Init+0x2ec>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d019      	beq.n	80011c0 <HAL_GPIO_Init+0x1f4>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a4b      	ldr	r2, [pc, #300]	@ (80012bc <HAL_GPIO_Init+0x2f0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d013      	beq.n	80011bc <HAL_GPIO_Init+0x1f0>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a4a      	ldr	r2, [pc, #296]	@ (80012c0 <HAL_GPIO_Init+0x2f4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d00d      	beq.n	80011b8 <HAL_GPIO_Init+0x1ec>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a49      	ldr	r2, [pc, #292]	@ (80012c4 <HAL_GPIO_Init+0x2f8>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d007      	beq.n	80011b4 <HAL_GPIO_Init+0x1e8>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a48      	ldr	r2, [pc, #288]	@ (80012c8 <HAL_GPIO_Init+0x2fc>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d101      	bne.n	80011b0 <HAL_GPIO_Init+0x1e4>
 80011ac:	2305      	movs	r3, #5
 80011ae:	e00a      	b.n	80011c6 <HAL_GPIO_Init+0x1fa>
 80011b0:	2306      	movs	r3, #6
 80011b2:	e008      	b.n	80011c6 <HAL_GPIO_Init+0x1fa>
 80011b4:	2304      	movs	r3, #4
 80011b6:	e006      	b.n	80011c6 <HAL_GPIO_Init+0x1fa>
 80011b8:	2303      	movs	r3, #3
 80011ba:	e004      	b.n	80011c6 <HAL_GPIO_Init+0x1fa>
 80011bc:	2302      	movs	r3, #2
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0x1fa>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <HAL_GPIO_Init+0x1fa>
 80011c4:	2300      	movs	r3, #0
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	f002 0203 	and.w	r2, r2, #3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4093      	lsls	r3, r2
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d6:	4937      	ldr	r1, [pc, #220]	@ (80012b4 <HAL_GPIO_Init+0x2e8>)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e4:	4b39      	ldr	r3, [pc, #228]	@ (80012cc <HAL_GPIO_Init+0x300>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001208:	4a30      	ldr	r2, [pc, #192]	@ (80012cc <HAL_GPIO_Init+0x300>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800120e:	4b2f      	ldr	r3, [pc, #188]	@ (80012cc <HAL_GPIO_Init+0x300>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001232:	4a26      	ldr	r2, [pc, #152]	@ (80012cc <HAL_GPIO_Init+0x300>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001238:	4b24      	ldr	r3, [pc, #144]	@ (80012cc <HAL_GPIO_Init+0x300>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800125c:	4a1b      	ldr	r2, [pc, #108]	@ (80012cc <HAL_GPIO_Init+0x300>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001262:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <HAL_GPIO_Init+0x300>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001286:	4a11      	ldr	r2, [pc, #68]	@ (80012cc <HAL_GPIO_Init+0x300>)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3301      	adds	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa22 f303 	lsr.w	r3, r2, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	f47f ae9d 	bne.w	8000fdc <HAL_GPIO_Init+0x10>
  }
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010000 	.word	0x40010000
 80012b8:	48000400 	.word	0x48000400
 80012bc:	48000800 	.word	0x48000800
 80012c0:	48000c00 	.word	0x48000c00
 80012c4:	48001000 	.word	0x48001000
 80012c8:	48001400 	.word	0x48001400
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
 80012dc:	4613      	mov	r3, r2
 80012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4013      	ands	r3, r2
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43d9      	mvns	r1, r3
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	400b      	ands	r3, r1
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e08d      	b.n	8001462 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d106      	bne.n	8001360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fad2 	bl	8000904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2224      	movs	r2, #36	@ 0x24
 8001364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0201 	bic.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001384:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001394:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d107      	bne.n	80013ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	e006      	b.n	80013bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80013ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d108      	bne.n	80013d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	e007      	b.n	80013e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001408:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691a      	ldr	r2, [r3, #16]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69d9      	ldr	r1, [r3, #28]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1a      	ldr	r2, [r3, #32]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	430a      	orrs	r2, r1
 8001432:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0201 	orr.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2220      	movs	r2, #32
 800144e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b08a      	sub	sp, #40	@ 0x28
 800146e:	af02      	add	r7, sp, #8
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	460b      	mov	r3, r1
 8001478:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b20      	cmp	r3, #32
 8001488:	f040 80d6 	bne.w	8001638 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001496:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800149a:	d101      	bne.n	80014a0 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800149c:	2302      	movs	r3, #2
 800149e:	e0cc      	b.n	800163a <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_I2C_IsDeviceReady+0x44>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e0c5      	b.n	800163a <HAL_I2C_IsDeviceReady+0x1d0>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2224      	movs	r2, #36	@ 0x24
 80014ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d107      	bne.n	80014dc <HAL_I2C_IsDeviceReady+0x72>
 80014cc:	897b      	ldrh	r3, [r7, #10]
 80014ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014da:	e006      	b.n	80014ea <HAL_I2C_IsDeviceReady+0x80>
 80014dc:	897b      	ldrh	r3, [r7, #10]
 80014de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014e6:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80014f0:	f7ff fc5a 	bl	8000da8 <HAL_GetTick>
 80014f4:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0320 	and.w	r3, r3, #32
 8001500:	2b20      	cmp	r3, #32
 8001502:	bf0c      	ite	eq
 8001504:	2301      	moveq	r3, #1
 8001506:	2300      	movne	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	2b10      	cmp	r3, #16
 8001518:	bf0c      	ite	eq
 800151a:	2301      	moveq	r3, #1
 800151c:	2300      	movne	r3, #0
 800151e:	b2db      	uxtb	r3, r3
 8001520:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001522:	e034      	b.n	800158e <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152a:	d01a      	beq.n	8001562 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800152c:	f7ff fc3c 	bl	8000da8 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d302      	bcc.n	8001542 <HAL_I2C_IsDeviceReady+0xd8>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10f      	bne.n	8001562 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2220      	movs	r2, #32
 8001546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154e:	f043 0220 	orr.w	r2, r3, #32
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e06b      	b.n	800163a <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0320 	and.w	r3, r3, #32
 800156c:	2b20      	cmp	r3, #32
 800156e:	bf0c      	ite	eq
 8001570:	2301      	moveq	r3, #1
 8001572:	2300      	movne	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	2b10      	cmp	r3, #16
 8001584:	bf0c      	ite	eq
 8001586:	2301      	moveq	r3, #1
 8001588:	2300      	movne	r3, #0
 800158a:	b2db      	uxtb	r3, r3
 800158c:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <HAL_I2C_IsDeviceReady+0x130>
 8001594:	7fbb      	ldrb	r3, [r7, #30]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0c4      	beq.n	8001524 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	2b10      	cmp	r3, #16
 80015a6:	d01a      	beq.n	80015de <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	2120      	movs	r1, #32
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f000 f869 	bl	800168a <I2C_WaitOnFlagUntilTimeout>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e03b      	b.n	800163a <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2220      	movs	r2, #32
 80015c8:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2220      	movs	r2, #32
 80015ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e02d      	b.n	800163a <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2200      	movs	r2, #0
 80015e6:	2120      	movs	r1, #32
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 f84e 	bl	800168a <I2C_WaitOnFlagUntilTimeout>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e020      	b.n	800163a <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2210      	movs	r2, #16
 80015fe:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2220      	movs	r2, #32
 8001606:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	429a      	cmp	r2, r3
 8001614:	f63f af56 	bhi.w	80014c4 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2220      	movs	r2, #32
 800161c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001624:	f043 0220 	orr.w	r2, r3, #32
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001638:	2302      	movs	r3, #2
  }
}
 800163a:	4618      	mov	r0, r3
 800163c:	3720      	adds	r7, #32
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b02      	cmp	r3, #2
 8001656:	d103      	bne.n	8001660 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2200      	movs	r2, #0
 800165e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b01      	cmp	r3, #1
 800166c:	d007      	beq.n	800167e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	699a      	ldr	r2, [r3, #24]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0201 	orr.w	r2, r2, #1
 800167c:	619a      	str	r2, [r3, #24]
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b084      	sub	sp, #16
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	4613      	mov	r3, r2
 8001698:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800169a:	e03b      	b.n	8001714 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	6839      	ldr	r1, [r7, #0]
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 f84b 	bl	800173c <I2C_IsErrorOccurred>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e041      	b.n	8001734 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b6:	d02d      	beq.n	8001714 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016b8:	f7ff fb76 	bl	8000da8 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d302      	bcc.n	80016ce <I2C_WaitOnFlagUntilTimeout+0x44>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d122      	bne.n	8001714 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699a      	ldr	r2, [r3, #24]
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4013      	ands	r3, r2
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	429a      	cmp	r2, r3
 80016dc:	bf0c      	ite	eq
 80016de:	2301      	moveq	r3, #1
 80016e0:	2300      	movne	r3, #0
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d113      	bne.n	8001714 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f0:	f043 0220 	orr.w	r2, r3, #32
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2220      	movs	r2, #32
 80016fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e00f      	b.n	8001734 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699a      	ldr	r2, [r3, #24]
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	4013      	ands	r3, r2
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	429a      	cmp	r2, r3
 8001722:	bf0c      	ite	eq
 8001724:	2301      	moveq	r3, #1
 8001726:	2300      	movne	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	429a      	cmp	r2, r3
 8001730:	d0b4      	beq.n	800169c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	d068      	beq.n	800183a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2210      	movs	r2, #16
 800176e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001770:	e049      	b.n	8001806 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d045      	beq.n	8001806 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800177a:	f7ff fb15 	bl	8000da8 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	429a      	cmp	r2, r3
 8001788:	d302      	bcc.n	8001790 <I2C_IsErrorOccurred+0x54>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d13a      	bne.n	8001806 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800179a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017b2:	d121      	bne.n	80017f8 <I2C_IsErrorOccurred+0xbc>
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017ba:	d01d      	beq.n	80017f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80017bc:	7cfb      	ldrb	r3, [r7, #19]
 80017be:	2b20      	cmp	r3, #32
 80017c0:	d01a      	beq.n	80017f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80017d2:	f7ff fae9 	bl	8000da8 <HAL_GetTick>
 80017d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017d8:	e00e      	b.n	80017f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80017da:	f7ff fae5 	bl	8000da8 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b19      	cmp	r3, #25
 80017e6:	d907      	bls.n	80017f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	f043 0320 	orr.w	r3, r3, #32
 80017ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80017f6:	e006      	b.n	8001806 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f003 0320 	and.w	r3, r3, #32
 8001802:	2b20      	cmp	r3, #32
 8001804:	d1e9      	bne.n	80017da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0320 	and.w	r3, r3, #32
 8001810:	2b20      	cmp	r3, #32
 8001812:	d003      	beq.n	800181c <I2C_IsErrorOccurred+0xe0>
 8001814:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0aa      	beq.n	8001772 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800181c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001820:	2b00      	cmp	r3, #0
 8001822:	d103      	bne.n	800182c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2220      	movs	r2, #32
 800182a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00b      	beq.n	8001864 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800185c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	f043 0308 	orr.w	r3, r3, #8
 8001874:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800187e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00b      	beq.n	80018a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f043 0302 	orr.w	r3, r3, #2
 8001896:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80018a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d01c      	beq.n	80018ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f7ff fec6 	bl	8001642 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <I2C_IsErrorOccurred+0x1bc>)
 80018c2:	400b      	ands	r3, r1
 80018c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	431a      	orrs	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2220      	movs	r2, #32
 80018d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80018ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3728      	adds	r7, #40	@ 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	fe00e800 	.word	0xfe00e800

080018fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b20      	cmp	r3, #32
 8001910:	d138      	bne.n	8001984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800191c:	2302      	movs	r3, #2
 800191e:	e032      	b.n	8001986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2224      	movs	r2, #36	@ 0x24
 800192c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800194e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6819      	ldr	r1, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2220      	movs	r2, #32
 8001974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	e000      	b.n	8001986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001984:	2302      	movs	r3, #2
  }
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001992:	b480      	push	{r7}
 8001994:	b085      	sub	sp, #20
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	d139      	bne.n	8001a1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e033      	b.n	8001a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2224      	movs	r2, #36	@ 0x24
 80019c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	e000      	b.n	8001a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a1c:	2302      	movs	r3, #2
  }
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d141      	bne.n	8001abe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a46:	d131      	bne.n	8001aac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a48:	4b47      	ldr	r3, [pc, #284]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a4e:	4a46      	ldr	r2, [pc, #280]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a58:	4b43      	ldr	r3, [pc, #268]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a60:	4a41      	ldr	r2, [pc, #260]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a68:	4b40      	ldr	r3, [pc, #256]	@ (8001b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2232      	movs	r2, #50	@ 0x32
 8001a6e:	fb02 f303 	mul.w	r3, r2, r3
 8001a72:	4a3f      	ldr	r2, [pc, #252]	@ (8001b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	0c9b      	lsrs	r3, r3, #18
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a7e:	e002      	b.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a86:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a92:	d102      	bne.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f2      	bne.n	8001a80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a9a:	4b33      	ldr	r3, [pc, #204]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aa6:	d158      	bne.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e057      	b.n	8001b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aac:	4b2e      	ldr	r3, [pc, #184]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ab8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001abc:	e04d      	b.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ac4:	d141      	bne.n	8001b4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ac6:	4b28      	ldr	r3, [pc, #160]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad2:	d131      	bne.n	8001b38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad4:	4b24      	ldr	r3, [pc, #144]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ada:	4a23      	ldr	r2, [pc, #140]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae4:	4b20      	ldr	r3, [pc, #128]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001aec:	4a1e      	ldr	r2, [pc, #120]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001af2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001af4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2232      	movs	r2, #50	@ 0x32
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a1c      	ldr	r2, [pc, #112]	@ (8001b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b00:	fba2 2303 	umull	r2, r3, r2, r3
 8001b04:	0c9b      	lsrs	r3, r3, #18
 8001b06:	3301      	adds	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b0a:	e002      	b.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b12:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b1e:	d102      	bne.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f2      	bne.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b32:	d112      	bne.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e011      	b.n	8001b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b48:	e007      	b.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b4a:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b52:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	431bde83 	.word	0x431bde83

08001b74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b78:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4a04      	ldr	r2, [pc, #16]	@ (8001b90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b82:	6093      	str	r3, [r2, #8]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40007000 	.word	0x40007000

08001b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e2fe      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d075      	beq.n	8001c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb2:	4b97      	ldr	r3, [pc, #604]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bbc:	4b94      	ldr	r3, [pc, #592]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b0c      	cmp	r3, #12
 8001bca:	d102      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3e>
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d002      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x44>
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d10b      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd8:	4b8d      	ldr	r3, [pc, #564]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d05b      	beq.n	8001c9c <HAL_RCC_OscConfig+0x108>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d157      	bne.n	8001c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e2d9      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bf8:	d106      	bne.n	8001c08 <HAL_RCC_OscConfig+0x74>
 8001bfa:	4b85      	ldr	r3, [pc, #532]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a84      	ldr	r2, [pc, #528]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e01d      	b.n	8001c44 <HAL_RCC_OscConfig+0xb0>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x98>
 8001c12:	4b7f      	ldr	r3, [pc, #508]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a7e      	ldr	r2, [pc, #504]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a7b      	ldr	r2, [pc, #492]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e00b      	b.n	8001c44 <HAL_RCC_OscConfig+0xb0>
 8001c2c:	4b78      	ldr	r3, [pc, #480]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a77      	ldr	r2, [pc, #476]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b75      	ldr	r3, [pc, #468]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a74      	ldr	r2, [pc, #464]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d013      	beq.n	8001c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f8ac 	bl	8000da8 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c54:	f7ff f8a8 	bl	8000da8 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	@ 0x64
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e29e      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c66:	4b6a      	ldr	r3, [pc, #424]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0xc0>
 8001c72:	e014      	b.n	8001c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff f898 	bl	8000da8 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7ff f894 	bl	8000da8 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	@ 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e28a      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8e:	4b60      	ldr	r3, [pc, #384]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0xe8>
 8001c9a:	e000      	b.n	8001c9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d075      	beq.n	8001d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001caa:	4b59      	ldr	r3, [pc, #356]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb4:	4b56      	ldr	r3, [pc, #344]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b0c      	cmp	r3, #12
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_OscConfig+0x136>
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d002      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x13c>
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d11f      	bne.n	8001d10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x154>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e25d      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b49      	ldr	r3, [pc, #292]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	061b      	lsls	r3, r3, #24
 8001cf6:	4946      	ldr	r1, [pc, #280]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cfc:	4b45      	ldr	r3, [pc, #276]	@ (8001e14 <HAL_RCC_OscConfig+0x280>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff f805 	bl	8000d10 <HAL_InitTick>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d043      	beq.n	8001d94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e249      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d023      	beq.n	8001d60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d18:	4b3d      	ldr	r3, [pc, #244]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff f840 	bl	8000da8 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7ff f83c 	bl	8000da8 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e232      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d3e:	4b34      	ldr	r3, [pc, #208]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b31      	ldr	r3, [pc, #196]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	061b      	lsls	r3, r3, #24
 8001d58:	492d      	ldr	r1, [pc, #180]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
 8001d5e:	e01a      	b.n	8001d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d60:	4b2b      	ldr	r3, [pc, #172]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2a      	ldr	r2, [pc, #168]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f81c 	bl	8000da8 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d74:	f7ff f818 	bl	8000da8 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e20e      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d86:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x1e0>
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d041      	beq.n	8001e26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d01c      	beq.n	8001de4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001daa:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db0:	4a17      	ldr	r2, [pc, #92]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dba:	f7fe fff5 	bl	8000da8 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc2:	f7fe fff1 	bl	8000da8 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e1e7      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0ef      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x22e>
 8001de2:	e020      	b.n	8001e26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dea:	4a09      	ldr	r2, [pc, #36]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7fe ffd8 	bl	8000da8 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dfa:	e00d      	b.n	8001e18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7fe ffd4 	bl	8000da8 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d906      	bls.n	8001e18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e1ca      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e18:	4b8c      	ldr	r3, [pc, #560]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1ea      	bne.n	8001dfc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80a6 	beq.w	8001f80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e38:	4b84      	ldr	r3, [pc, #528]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_OscConfig+0x2b4>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x2b6>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00d      	beq.n	8001e6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4e:	4b7f      	ldr	r3, [pc, #508]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e52:	4a7e      	ldr	r2, [pc, #504]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e5a:	4b7c      	ldr	r3, [pc, #496]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e66:	2301      	movs	r3, #1
 8001e68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e6a:	4b79      	ldr	r3, [pc, #484]	@ (8002050 <HAL_RCC_OscConfig+0x4bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d118      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e76:	4b76      	ldr	r3, [pc, #472]	@ (8002050 <HAL_RCC_OscConfig+0x4bc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a75      	ldr	r2, [pc, #468]	@ (8002050 <HAL_RCC_OscConfig+0x4bc>)
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e82:	f7fe ff91 	bl	8000da8 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8a:	f7fe ff8d 	bl	8000da8 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e183      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e9c:	4b6c      	ldr	r3, [pc, #432]	@ (8002050 <HAL_RCC_OscConfig+0x4bc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d108      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x32e>
 8001eb0:	4b66      	ldr	r3, [pc, #408]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb6:	4a65      	ldr	r2, [pc, #404]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ec0:	e024      	b.n	8001f0c <HAL_RCC_OscConfig+0x378>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b05      	cmp	r3, #5
 8001ec8:	d110      	bne.n	8001eec <HAL_RCC_OscConfig+0x358>
 8001eca:	4b60      	ldr	r3, [pc, #384]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed0:	4a5e      	ldr	r2, [pc, #376]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001ed2:	f043 0304 	orr.w	r3, r3, #4
 8001ed6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eda:	4b5c      	ldr	r3, [pc, #368]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee0:	4a5a      	ldr	r2, [pc, #360]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eea:	e00f      	b.n	8001f0c <HAL_RCC_OscConfig+0x378>
 8001eec:	4b57      	ldr	r3, [pc, #348]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef2:	4a56      	ldr	r2, [pc, #344]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001efc:	4b53      	ldr	r3, [pc, #332]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f02:	4a52      	ldr	r2, [pc, #328]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d016      	beq.n	8001f42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f14:	f7fe ff48 	bl	8000da8 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f1a:	e00a      	b.n	8001f32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1c:	f7fe ff44 	bl	8000da8 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e138      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f32:	4b46      	ldr	r3, [pc, #280]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ed      	beq.n	8001f1c <HAL_RCC_OscConfig+0x388>
 8001f40:	e015      	b.n	8001f6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7fe ff31 	bl	8000da8 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe ff2d 	bl	8000da8 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e121      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f60:	4b3a      	ldr	r3, [pc, #232]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ed      	bne.n	8001f4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f6e:	7ffb      	ldrb	r3, [r7, #31]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d105      	bne.n	8001f80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f74:	4b35      	ldr	r3, [pc, #212]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f78:	4a34      	ldr	r2, [pc, #208]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001f7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d03c      	beq.n	8002006 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01c      	beq.n	8001fce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f94:	4b2d      	ldr	r3, [pc, #180]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa4:	f7fe ff00 	bl	8000da8 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fac:	f7fe fefc 	bl	8000da8 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e0f2      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fbe:	4b23      	ldr	r3, [pc, #140]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0ef      	beq.n	8001fac <HAL_RCC_OscConfig+0x418>
 8001fcc:	e01b      	b.n	8002006 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fce:	4b1f      	ldr	r3, [pc, #124]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fde:	f7fe fee3 	bl	8000da8 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fe6:	f7fe fedf 	bl	8000da8 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e0d5      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ff8:	4b14      	ldr	r3, [pc, #80]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1ef      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 80c9 	beq.w	80021a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002010:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b0c      	cmp	r3, #12
 800201a:	f000 8083 	beq.w	8002124 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d15e      	bne.n	80020e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b09      	ldr	r3, [pc, #36]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a08      	ldr	r2, [pc, #32]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 800202c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7fe feb9 	bl	8000da8 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002038:	e00c      	b.n	8002054 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203a:	f7fe feb5 	bl	8000da8 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d905      	bls.n	8002054 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e0ab      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
 800204c:	40021000 	.word	0x40021000
 8002050:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002054:	4b55      	ldr	r3, [pc, #340]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ec      	bne.n	800203a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002060:	4b52      	ldr	r3, [pc, #328]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	4b52      	ldr	r3, [pc, #328]	@ (80021b0 <HAL_RCC_OscConfig+0x61c>)
 8002066:	4013      	ands	r3, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6a11      	ldr	r1, [r2, #32]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002070:	3a01      	subs	r2, #1
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	4311      	orrs	r1, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800207a:	0212      	lsls	r2, r2, #8
 800207c:	4311      	orrs	r1, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002082:	0852      	lsrs	r2, r2, #1
 8002084:	3a01      	subs	r2, #1
 8002086:	0552      	lsls	r2, r2, #21
 8002088:	4311      	orrs	r1, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800208e:	0852      	lsrs	r2, r2, #1
 8002090:	3a01      	subs	r2, #1
 8002092:	0652      	lsls	r2, r2, #25
 8002094:	4311      	orrs	r1, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800209a:	06d2      	lsls	r2, r2, #27
 800209c:	430a      	orrs	r2, r1
 800209e:	4943      	ldr	r1, [pc, #268]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b41      	ldr	r3, [pc, #260]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a40      	ldr	r2, [pc, #256]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b0:	4b3e      	ldr	r3, [pc, #248]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a3d      	ldr	r2, [pc, #244]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7fe fe74 	bl	8000da8 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7fe fe70 	bl	8000da8 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e066      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d6:	4b35      	ldr	r3, [pc, #212]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x530>
 80020e2:	e05e      	b.n	80021a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e4:	4b31      	ldr	r3, [pc, #196]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a30      	ldr	r2, [pc, #192]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7fe fe5a 	bl	8000da8 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f8:	f7fe fe56 	bl	8000da8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e04c      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800210a:	4b28      	ldr	r3, [pc, #160]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002116:	4b25      	ldr	r3, [pc, #148]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	4924      	ldr	r1, [pc, #144]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 800211c:	4b25      	ldr	r3, [pc, #148]	@ (80021b4 <HAL_RCC_OscConfig+0x620>)
 800211e:	4013      	ands	r3, r2
 8002120:	60cb      	str	r3, [r1, #12]
 8002122:	e03e      	b.n	80021a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e039      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002130:	4b1e      	ldr	r3, [pc, #120]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f003 0203 	and.w	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	429a      	cmp	r2, r3
 8002142:	d12c      	bne.n	800219e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214e:	3b01      	subs	r3, #1
 8002150:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d123      	bne.n	800219e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002160:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d11b      	bne.n	800219e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d113      	bne.n	800219e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	3b01      	subs	r3, #1
 8002184:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d109      	bne.n	800219e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	3b01      	subs	r3, #1
 8002198:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	019f800c 	.word	0x019f800c
 80021b4:	feeefffc 	.word	0xfeeefffc

080021b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e11e      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021d0:	4b91      	ldr	r3, [pc, #580]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d910      	bls.n	8002200 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b8e      	ldr	r3, [pc, #568]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 020f 	bic.w	r2, r3, #15
 80021e6:	498c      	ldr	r1, [pc, #560]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b8a      	ldr	r3, [pc, #552]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e106      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d073      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d129      	bne.n	8002268 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002214:	4b81      	ldr	r3, [pc, #516]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0f4      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002224:	f000 f99e 	bl	8002564 <RCC_GetSysClockFreqFromPLLSource>
 8002228:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4a7c      	ldr	r2, [pc, #496]	@ (8002420 <HAL_RCC_ClockConfig+0x268>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d93f      	bls.n	80022b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002232:	4b7a      	ldr	r3, [pc, #488]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002246:	2b00      	cmp	r3, #0
 8002248:	d033      	beq.n	80022b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800224e:	2b00      	cmp	r3, #0
 8002250:	d12f      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002252:	4b72      	ldr	r3, [pc, #456]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800225a:	4a70      	ldr	r2, [pc, #448]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 800225c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002260:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002262:	2380      	movs	r3, #128	@ 0x80
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	e024      	b.n	80022b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d107      	bne.n	8002280 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002270:	4b6a      	ldr	r3, [pc, #424]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0c6      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002280:	4b66      	ldr	r3, [pc, #408]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0be      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002290:	f000 f8ce 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8002294:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4a61      	ldr	r2, [pc, #388]	@ (8002420 <HAL_RCC_ClockConfig+0x268>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d909      	bls.n	80022b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800229e:	4b5f      	ldr	r3, [pc, #380]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022a6:	4a5d      	ldr	r2, [pc, #372]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80022a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022ae:	2380      	movs	r3, #128	@ 0x80
 80022b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	4b5a      	ldr	r3, [pc, #360]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f023 0203 	bic.w	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4957      	ldr	r1, [pc, #348]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c4:	f7fe fd70 	bl	8000da8 <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7fe fd6c 	bl	8000da8 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e095      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	4b4e      	ldr	r3, [pc, #312]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 020c 	and.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1eb      	bne.n	80022cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d023      	beq.n	8002348 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800230c:	4b43      	ldr	r3, [pc, #268]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a42      	ldr	r2, [pc, #264]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002312:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002316:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d007      	beq.n	8002334 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002324:	4b3d      	ldr	r3, [pc, #244]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800232c:	4a3b      	ldr	r2, [pc, #236]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 800232e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002332:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002334:	4b39      	ldr	r3, [pc, #228]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4936      	ldr	r1, [pc, #216]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
 8002346:	e008      	b.n	800235a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2b80      	cmp	r3, #128	@ 0x80
 800234c:	d105      	bne.n	800235a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800234e:	4b33      	ldr	r3, [pc, #204]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4a32      	ldr	r2, [pc, #200]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002354:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002358:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800235a:	4b2f      	ldr	r3, [pc, #188]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d21d      	bcs.n	80023a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002368:	4b2b      	ldr	r3, [pc, #172]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 020f 	bic.w	r2, r3, #15
 8002370:	4929      	ldr	r1, [pc, #164]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002378:	f7fe fd16 	bl	8000da8 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002380:	f7fe fd12 	bl	8000da8 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e03b      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b20      	ldr	r3, [pc, #128]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d1ed      	bne.n	8002380 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b0:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4917      	ldr	r1, [pc, #92]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ce:	4b13      	ldr	r3, [pc, #76]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	490f      	ldr	r1, [pc, #60]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e2:	f000 f825 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023e6:	4602      	mov	r2, r0
 80023e8:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	490c      	ldr	r1, [pc, #48]	@ (8002424 <HAL_RCC_ClockConfig+0x26c>)
 80023f4:	5ccb      	ldrb	r3, [r1, r3]
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	fa22 f303 	lsr.w	r3, r2, r3
 80023fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002428 <HAL_RCC_ClockConfig+0x270>)
 8002400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002402:	4b0a      	ldr	r3, [pc, #40]	@ (800242c <HAL_RCC_ClockConfig+0x274>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fc82 	bl	8000d10 <HAL_InitTick>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40022000 	.word	0x40022000
 800241c:	40021000 	.word	0x40021000
 8002420:	04c4b400 	.word	0x04c4b400
 8002424:	080046b8 	.word	0x080046b8
 8002428:	20000000 	.word	0x20000000
 800242c:	20000004 	.word	0x20000004

08002430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002436:	4b2c      	ldr	r3, [pc, #176]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b04      	cmp	r3, #4
 8002440:	d102      	bne.n	8002448 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002442:	4b2a      	ldr	r3, [pc, #168]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	e047      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002448:	4b27      	ldr	r3, [pc, #156]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	d102      	bne.n	800245a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002454:	4b26      	ldr	r3, [pc, #152]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	e03e      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800245a:	4b23      	ldr	r3, [pc, #140]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d136      	bne.n	80024d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002466:	4b20      	ldr	r3, [pc, #128]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002470:	4b1d      	ldr	r3, [pc, #116]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	3301      	adds	r3, #1
 800247c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d10c      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002484:	4a1a      	ldr	r2, [pc, #104]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	4a16      	ldr	r2, [pc, #88]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800248e:	68d2      	ldr	r2, [r2, #12]
 8002490:	0a12      	lsrs	r2, r2, #8
 8002492:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
      break;
 800249c:	e00c      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800249e:	4a13      	ldr	r2, [pc, #76]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	4a10      	ldr	r2, [pc, #64]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a8:	68d2      	ldr	r2, [r2, #12]
 80024aa:	0a12      	lsrs	r2, r2, #8
 80024ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
      break;
 80024b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0e5b      	lsrs	r3, r3, #25
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	3301      	adds	r3, #1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	e001      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024d8:	693b      	ldr	r3, [r7, #16]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	00f42400 	.word	0x00f42400
 80024f0:	016e3600 	.word	0x016e3600

080024f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f8:	4b03      	ldr	r3, [pc, #12]	@ (8002508 <HAL_RCC_GetHCLKFreq+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000000 	.word	0x20000000

0800250c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002510:	f7ff fff0 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4904      	ldr	r1, [pc, #16]	@ (8002534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	080046c8 	.word	0x080046c8

08002538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800253c:	f7ff ffda 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	0adb      	lsrs	r3, r3, #11
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4904      	ldr	r1, [pc, #16]	@ (8002560 <HAL_RCC_GetPCLK2Freq+0x28>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	080046c8 	.word	0x080046c8

08002564 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800256a:	4b1e      	ldr	r3, [pc, #120]	@ (80025e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002574:	4b1b      	ldr	r3, [pc, #108]	@ (80025e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3301      	adds	r3, #1
 8002580:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d10c      	bne.n	80025a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002588:	4a17      	ldr	r2, [pc, #92]	@ (80025e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	4a14      	ldr	r2, [pc, #80]	@ (80025e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002592:	68d2      	ldr	r2, [r2, #12]
 8002594:	0a12      	lsrs	r2, r2, #8
 8002596:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800259a:	fb02 f303 	mul.w	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]
    break;
 80025a0:	e00c      	b.n	80025bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025a2:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	4a0e      	ldr	r2, [pc, #56]	@ (80025e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ac:	68d2      	ldr	r2, [r2, #12]
 80025ae:	0a12      	lsrs	r2, r2, #8
 80025b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]
    break;
 80025ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025bc:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0e5b      	lsrs	r3, r3, #25
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	3301      	adds	r3, #1
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025d6:	687b      	ldr	r3, [r7, #4]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	40021000 	.word	0x40021000
 80025e8:	016e3600 	.word	0x016e3600
 80025ec:	00f42400 	.word	0x00f42400

080025f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025f8:	2300      	movs	r3, #0
 80025fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025fc:	2300      	movs	r3, #0
 80025fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8098 	beq.w	800273e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002612:	4b43      	ldr	r3, [pc, #268]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10d      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	4b40      	ldr	r3, [pc, #256]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	4a3f      	ldr	r2, [pc, #252]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002628:	6593      	str	r3, [r2, #88]	@ 0x58
 800262a:	4b3d      	ldr	r3, [pc, #244]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002636:	2301      	movs	r3, #1
 8002638:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800263a:	4b3a      	ldr	r3, [pc, #232]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a39      	ldr	r2, [pc, #228]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002644:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002646:	f7fe fbaf 	bl	8000da8 <HAL_GetTick>
 800264a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800264c:	e009      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264e:	f7fe fbab 	bl	8000da8 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d902      	bls.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	74fb      	strb	r3, [r7, #19]
        break;
 8002660:	e005      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002662:	4b30      	ldr	r3, [pc, #192]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0ef      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800266e:	7cfb      	ldrb	r3, [r7, #19]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d159      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002674:	4b2a      	ldr	r3, [pc, #168]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800267e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d01e      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	429a      	cmp	r2, r3
 800268e:	d019      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002690:	4b23      	ldr	r3, [pc, #140]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800269a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800269c:	4b20      	ldr	r3, [pc, #128]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026bc:	4a18      	ldr	r2, [pc, #96]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fe fb6b 	bl	8000da8 <HAL_GetTick>
 80026d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d4:	e00b      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7fe fb67 	bl	8000da8 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d902      	bls.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	74fb      	strb	r3, [r7, #19]
            break;
 80026ec:	e006      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ec      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10b      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002702:	4b07      	ldr	r3, [pc, #28]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002708:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	4903      	ldr	r1, [pc, #12]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002718:	e008      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	74bb      	strb	r3, [r7, #18]
 800271e:	e005      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002720:	40021000 	.word	0x40021000
 8002724:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800272c:	7c7b      	ldrb	r3, [r7, #17]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d105      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002732:	4ba6      	ldr	r3, [pc, #664]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002736:	4aa5      	ldr	r2, [pc, #660]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002738:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800273c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800274a:	4ba0      	ldr	r3, [pc, #640]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002750:	f023 0203 	bic.w	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	499c      	ldr	r1, [pc, #624]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800276c:	4b97      	ldr	r3, [pc, #604]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002772:	f023 020c 	bic.w	r2, r3, #12
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	4994      	ldr	r1, [pc, #592]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800278e:	4b8f      	ldr	r3, [pc, #572]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002794:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	498b      	ldr	r1, [pc, #556]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027b0:	4b86      	ldr	r3, [pc, #536]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	4983      	ldr	r1, [pc, #524]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027d2:	4b7e      	ldr	r3, [pc, #504]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	497a      	ldr	r1, [pc, #488]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f4:	4b75      	ldr	r3, [pc, #468]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	4972      	ldr	r1, [pc, #456]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002816:	4b6d      	ldr	r3, [pc, #436]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	4969      	ldr	r1, [pc, #420]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002838:	4b64      	ldr	r3, [pc, #400]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4961      	ldr	r1, [pc, #388]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800285a:	4b5c      	ldr	r3, [pc, #368]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002860:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002868:	4958      	ldr	r1, [pc, #352]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002878:	2b00      	cmp	r3, #0
 800287a:	d015      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800287c:	4b53      	ldr	r3, [pc, #332]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288a:	4950      	ldr	r1, [pc, #320]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800289a:	d105      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800289c:	4b4b      	ldr	r3, [pc, #300]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a4a      	ldr	r2, [pc, #296]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028a6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d015      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028b4:	4b45      	ldr	r3, [pc, #276]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c2:	4942      	ldr	r1, [pc, #264]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028d2:	d105      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d4:	4b3d      	ldr	r3, [pc, #244]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a3c      	ldr	r2, [pc, #240]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028de:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d015      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028ec:	4b37      	ldr	r3, [pc, #220]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	4934      	ldr	r1, [pc, #208]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800290a:	d105      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800290c:	4b2f      	ldr	r3, [pc, #188]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a2e      	ldr	r2, [pc, #184]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002916:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002924:	4b29      	ldr	r3, [pc, #164]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002932:	4926      	ldr	r1, [pc, #152]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002942:	d105      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002944:	4b21      	ldr	r3, [pc, #132]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a20      	ldr	r2, [pc, #128]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800294a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800294e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d015      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002962:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296a:	4918      	ldr	r1, [pc, #96]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002976:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800297a:	d105      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800297c:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4a12      	ldr	r2, [pc, #72]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002986:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d015      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002994:	4b0d      	ldr	r3, [pc, #52]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a2:	490a      	ldr	r1, [pc, #40]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029b2:	d105      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029b4:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4a04      	ldr	r2, [pc, #16]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80029c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000

080029d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e042      	b.n	8002a68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d106      	bne.n	80029fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7fd fffb 	bl	80009f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2224      	movs	r2, #36	@ 0x24
 80029fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fb82 	bl	8003124 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f8b3 	bl	8002b8c <UART_SetConfig>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e01b      	b.n	8002a68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fc01 	bl	8003268 <UART_CheckIdleState>
 8002a66:	4603      	mov	r3, r0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	@ 0x28
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d17b      	bne.n	8002b82 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_UART_Transmit+0x26>
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e074      	b.n	8002b84 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2221      	movs	r2, #33	@ 0x21
 8002aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aaa:	f7fe f97d 	bl	8000da8 <HAL_GetTick>
 8002aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	88fa      	ldrh	r2, [r7, #6]
 8002ab4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	88fa      	ldrh	r2, [r7, #6]
 8002abc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ac8:	d108      	bne.n	8002adc <HAL_UART_Transmit+0x6c>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d104      	bne.n	8002adc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	e003      	b.n	8002ae4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ae4:	e030      	b.n	8002b48 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2200      	movs	r2, #0
 8002aee:	2180      	movs	r1, #128	@ 0x80
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 fc63 	bl	80033bc <UART_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e03d      	b.n	8002b84 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10b      	bne.n	8002b26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b1c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	3302      	adds	r3, #2
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	e007      	b.n	8002b36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	3301      	adds	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1c8      	bne.n	8002ae6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2140      	movs	r1, #64	@ 0x40
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fc2c 	bl	80033bc <UART_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e006      	b.n	8002b84 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b90:	b08c      	sub	sp, #48	@ 0x30
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	4bab      	ldr	r3, [pc, #684]	@ (8002e68 <UART_SetConfig+0x2dc>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4aa0      	ldr	r2, [pc, #640]	@ (8002e6c <UART_SetConfig+0x2e0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d004      	beq.n	8002bf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002c02:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c16:	f023 010f 	bic.w	r1, r3, #15
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a91      	ldr	r2, [pc, #580]	@ (8002e70 <UART_SetConfig+0x2e4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d125      	bne.n	8002c7c <UART_SetConfig+0xf0>
 8002c30:	4b90      	ldr	r3, [pc, #576]	@ (8002e74 <UART_SetConfig+0x2e8>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d81a      	bhi.n	8002c74 <UART_SetConfig+0xe8>
 8002c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c44 <UART_SetConfig+0xb8>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002c55 	.word	0x08002c55
 8002c48:	08002c65 	.word	0x08002c65
 8002c4c:	08002c5d 	.word	0x08002c5d
 8002c50:	08002c6d 	.word	0x08002c6d
 8002c54:	2301      	movs	r3, #1
 8002c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c5a:	e0d6      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c62:	e0d2      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002c64:	2304      	movs	r3, #4
 8002c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c6a:	e0ce      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002c6c:	2308      	movs	r3, #8
 8002c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c72:	e0ca      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002c74:	2310      	movs	r3, #16
 8002c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c7a:	e0c6      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a7d      	ldr	r2, [pc, #500]	@ (8002e78 <UART_SetConfig+0x2ec>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d138      	bne.n	8002cf8 <UART_SetConfig+0x16c>
 8002c86:	4b7b      	ldr	r3, [pc, #492]	@ (8002e74 <UART_SetConfig+0x2e8>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8c:	f003 030c 	and.w	r3, r3, #12
 8002c90:	2b0c      	cmp	r3, #12
 8002c92:	d82d      	bhi.n	8002cf0 <UART_SetConfig+0x164>
 8002c94:	a201      	add	r2, pc, #4	@ (adr r2, 8002c9c <UART_SetConfig+0x110>)
 8002c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9a:	bf00      	nop
 8002c9c:	08002cd1 	.word	0x08002cd1
 8002ca0:	08002cf1 	.word	0x08002cf1
 8002ca4:	08002cf1 	.word	0x08002cf1
 8002ca8:	08002cf1 	.word	0x08002cf1
 8002cac:	08002ce1 	.word	0x08002ce1
 8002cb0:	08002cf1 	.word	0x08002cf1
 8002cb4:	08002cf1 	.word	0x08002cf1
 8002cb8:	08002cf1 	.word	0x08002cf1
 8002cbc:	08002cd9 	.word	0x08002cd9
 8002cc0:	08002cf1 	.word	0x08002cf1
 8002cc4:	08002cf1 	.word	0x08002cf1
 8002cc8:	08002cf1 	.word	0x08002cf1
 8002ccc:	08002ce9 	.word	0x08002ce9
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cd6:	e098      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cde:	e094      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ce6:	e090      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002ce8:	2308      	movs	r3, #8
 8002cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cee:	e08c      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002cf0:	2310      	movs	r3, #16
 8002cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cf6:	e088      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a5f      	ldr	r2, [pc, #380]	@ (8002e7c <UART_SetConfig+0x2f0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d125      	bne.n	8002d4e <UART_SetConfig+0x1c2>
 8002d02:	4b5c      	ldr	r3, [pc, #368]	@ (8002e74 <UART_SetConfig+0x2e8>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d0c:	2b30      	cmp	r3, #48	@ 0x30
 8002d0e:	d016      	beq.n	8002d3e <UART_SetConfig+0x1b2>
 8002d10:	2b30      	cmp	r3, #48	@ 0x30
 8002d12:	d818      	bhi.n	8002d46 <UART_SetConfig+0x1ba>
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d00a      	beq.n	8002d2e <UART_SetConfig+0x1a2>
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d814      	bhi.n	8002d46 <UART_SetConfig+0x1ba>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <UART_SetConfig+0x19a>
 8002d20:	2b10      	cmp	r3, #16
 8002d22:	d008      	beq.n	8002d36 <UART_SetConfig+0x1aa>
 8002d24:	e00f      	b.n	8002d46 <UART_SetConfig+0x1ba>
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d2c:	e06d      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d34:	e069      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002d36:	2304      	movs	r3, #4
 8002d38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d3c:	e065      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002d3e:	2308      	movs	r3, #8
 8002d40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d44:	e061      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002d46:	2310      	movs	r3, #16
 8002d48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d4c:	e05d      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a4b      	ldr	r2, [pc, #300]	@ (8002e80 <UART_SetConfig+0x2f4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d125      	bne.n	8002da4 <UART_SetConfig+0x218>
 8002d58:	4b46      	ldr	r3, [pc, #280]	@ (8002e74 <UART_SetConfig+0x2e8>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d62:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d64:	d016      	beq.n	8002d94 <UART_SetConfig+0x208>
 8002d66:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d68:	d818      	bhi.n	8002d9c <UART_SetConfig+0x210>
 8002d6a:	2b80      	cmp	r3, #128	@ 0x80
 8002d6c:	d00a      	beq.n	8002d84 <UART_SetConfig+0x1f8>
 8002d6e:	2b80      	cmp	r3, #128	@ 0x80
 8002d70:	d814      	bhi.n	8002d9c <UART_SetConfig+0x210>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <UART_SetConfig+0x1f0>
 8002d76:	2b40      	cmp	r3, #64	@ 0x40
 8002d78:	d008      	beq.n	8002d8c <UART_SetConfig+0x200>
 8002d7a:	e00f      	b.n	8002d9c <UART_SetConfig+0x210>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d82:	e042      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002d84:	2302      	movs	r3, #2
 8002d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d8a:	e03e      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d92:	e03a      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002d94:	2308      	movs	r3, #8
 8002d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d9a:	e036      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002d9c:	2310      	movs	r3, #16
 8002d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002da2:	e032      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a30      	ldr	r2, [pc, #192]	@ (8002e6c <UART_SetConfig+0x2e0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d12a      	bne.n	8002e04 <UART_SetConfig+0x278>
 8002dae:	4b31      	ldr	r3, [pc, #196]	@ (8002e74 <UART_SetConfig+0x2e8>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002db8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002dbc:	d01a      	beq.n	8002df4 <UART_SetConfig+0x268>
 8002dbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002dc2:	d81b      	bhi.n	8002dfc <UART_SetConfig+0x270>
 8002dc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dc8:	d00c      	beq.n	8002de4 <UART_SetConfig+0x258>
 8002dca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dce:	d815      	bhi.n	8002dfc <UART_SetConfig+0x270>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <UART_SetConfig+0x250>
 8002dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd8:	d008      	beq.n	8002dec <UART_SetConfig+0x260>
 8002dda:	e00f      	b.n	8002dfc <UART_SetConfig+0x270>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002de2:	e012      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002de4:	2302      	movs	r3, #2
 8002de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dea:	e00e      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002dec:	2304      	movs	r3, #4
 8002dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002df2:	e00a      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002df4:	2308      	movs	r3, #8
 8002df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dfa:	e006      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002dfc:	2310      	movs	r3, #16
 8002dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e02:	e002      	b.n	8002e0a <UART_SetConfig+0x27e>
 8002e04:	2310      	movs	r3, #16
 8002e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a17      	ldr	r2, [pc, #92]	@ (8002e6c <UART_SetConfig+0x2e0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	f040 80a8 	bne.w	8002f66 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d834      	bhi.n	8002e88 <UART_SetConfig+0x2fc>
 8002e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e24 <UART_SetConfig+0x298>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08002e49 	.word	0x08002e49
 8002e28:	08002e89 	.word	0x08002e89
 8002e2c:	08002e51 	.word	0x08002e51
 8002e30:	08002e89 	.word	0x08002e89
 8002e34:	08002e57 	.word	0x08002e57
 8002e38:	08002e89 	.word	0x08002e89
 8002e3c:	08002e89 	.word	0x08002e89
 8002e40:	08002e89 	.word	0x08002e89
 8002e44:	08002e5f 	.word	0x08002e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e48:	f7ff fb60 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8002e4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e4e:	e021      	b.n	8002e94 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e50:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <UART_SetConfig+0x2f8>)
 8002e52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e54:	e01e      	b.n	8002e94 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e56:	f7ff faeb 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8002e5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e5c:	e01a      	b.n	8002e94 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e64:	e016      	b.n	8002e94 <UART_SetConfig+0x308>
 8002e66:	bf00      	nop
 8002e68:	cfff69f3 	.word	0xcfff69f3
 8002e6c:	40008000 	.word	0x40008000
 8002e70:	40013800 	.word	0x40013800
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40004400 	.word	0x40004400
 8002e7c:	40004800 	.word	0x40004800
 8002e80:	40004c00 	.word	0x40004c00
 8002e84:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e92:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 812a 	beq.w	80030f0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	4a9e      	ldr	r2, [pc, #632]	@ (800311c <UART_SetConfig+0x590>)
 8002ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d305      	bcc.n	8002ecc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d903      	bls.n	8002ed4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002ed2:	e10d      	b.n	80030f0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	60fa      	str	r2, [r7, #12]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	4a8e      	ldr	r2, [pc, #568]	@ (800311c <UART_SetConfig+0x590>)
 8002ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2200      	movs	r2, #0
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ef2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ef6:	f7fd f9eb 	bl	80002d0 <__aeabi_uldivmod>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4610      	mov	r0, r2
 8002f00:	4619      	mov	r1, r3
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	020b      	lsls	r3, r1, #8
 8002f0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f10:	0202      	lsls	r2, r0, #8
 8002f12:	6979      	ldr	r1, [r7, #20]
 8002f14:	6849      	ldr	r1, [r1, #4]
 8002f16:	0849      	lsrs	r1, r1, #1
 8002f18:	2000      	movs	r0, #0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	4605      	mov	r5, r0
 8002f1e:	eb12 0804 	adds.w	r8, r2, r4
 8002f22:	eb43 0905 	adc.w	r9, r3, r5
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	469a      	mov	sl, r3
 8002f2e:	4693      	mov	fp, r2
 8002f30:	4652      	mov	r2, sl
 8002f32:	465b      	mov	r3, fp
 8002f34:	4640      	mov	r0, r8
 8002f36:	4649      	mov	r1, r9
 8002f38:	f7fd f9ca 	bl	80002d0 <__aeabi_uldivmod>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4613      	mov	r3, r2
 8002f42:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f4a:	d308      	bcc.n	8002f5e <UART_SetConfig+0x3d2>
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f52:	d204      	bcs.n	8002f5e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a3a      	ldr	r2, [r7, #32]
 8002f5a:	60da      	str	r2, [r3, #12]
 8002f5c:	e0c8      	b.n	80030f0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f64:	e0c4      	b.n	80030f0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f6e:	d167      	bne.n	8003040 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002f70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d828      	bhi.n	8002fca <UART_SetConfig+0x43e>
 8002f78:	a201      	add	r2, pc, #4	@ (adr r2, 8002f80 <UART_SetConfig+0x3f4>)
 8002f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7e:	bf00      	nop
 8002f80:	08002fa5 	.word	0x08002fa5
 8002f84:	08002fad 	.word	0x08002fad
 8002f88:	08002fb5 	.word	0x08002fb5
 8002f8c:	08002fcb 	.word	0x08002fcb
 8002f90:	08002fbb 	.word	0x08002fbb
 8002f94:	08002fcb 	.word	0x08002fcb
 8002f98:	08002fcb 	.word	0x08002fcb
 8002f9c:	08002fcb 	.word	0x08002fcb
 8002fa0:	08002fc3 	.word	0x08002fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa4:	f7ff fab2 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8002fa8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002faa:	e014      	b.n	8002fd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fac:	f7ff fac4 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8002fb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fb2:	e010      	b.n	8002fd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fb4:	4b5a      	ldr	r3, [pc, #360]	@ (8003120 <UART_SetConfig+0x594>)
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fb8:	e00d      	b.n	8002fd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fba:	f7ff fa39 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8002fbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fc0:	e009      	b.n	8002fd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fc8:	e005      	b.n	8002fd6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002fd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8089 	beq.w	80030f0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	4a4e      	ldr	r2, [pc, #312]	@ (800311c <UART_SetConfig+0x590>)
 8002fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ff0:	005a      	lsls	r2, r3, #1
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	441a      	add	r2, r3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	2b0f      	cmp	r3, #15
 8003008:	d916      	bls.n	8003038 <UART_SetConfig+0x4ac>
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003010:	d212      	bcs.n	8003038 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	b29b      	uxth	r3, r3
 8003016:	f023 030f 	bic.w	r3, r3, #15
 800301a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	b29b      	uxth	r3, r3
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	b29a      	uxth	r2, r3
 8003028:	8bfb      	ldrh	r3, [r7, #30]
 800302a:	4313      	orrs	r3, r2
 800302c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	8bfa      	ldrh	r2, [r7, #30]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	e05b      	b.n	80030f0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800303e:	e057      	b.n	80030f0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003040:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003044:	2b08      	cmp	r3, #8
 8003046:	d828      	bhi.n	800309a <UART_SetConfig+0x50e>
 8003048:	a201      	add	r2, pc, #4	@ (adr r2, 8003050 <UART_SetConfig+0x4c4>)
 800304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304e:	bf00      	nop
 8003050:	08003075 	.word	0x08003075
 8003054:	0800307d 	.word	0x0800307d
 8003058:	08003085 	.word	0x08003085
 800305c:	0800309b 	.word	0x0800309b
 8003060:	0800308b 	.word	0x0800308b
 8003064:	0800309b 	.word	0x0800309b
 8003068:	0800309b 	.word	0x0800309b
 800306c:	0800309b 	.word	0x0800309b
 8003070:	08003093 	.word	0x08003093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003074:	f7ff fa4a 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8003078:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800307a:	e014      	b.n	80030a6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800307c:	f7ff fa5c 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8003080:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003082:	e010      	b.n	80030a6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003084:	4b26      	ldr	r3, [pc, #152]	@ (8003120 <UART_SetConfig+0x594>)
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003088:	e00d      	b.n	80030a6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800308a:	f7ff f9d1 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 800308e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003090:	e009      	b.n	80030a6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003098:	e005      	b.n	80030a6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80030a4:	bf00      	nop
    }

    if (pclk != 0U)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d021      	beq.n	80030f0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	4a1a      	ldr	r2, [pc, #104]	@ (800311c <UART_SetConfig+0x590>)
 80030b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030b6:	461a      	mov	r2, r3
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	441a      	add	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	2b0f      	cmp	r3, #15
 80030d4:	d909      	bls.n	80030ea <UART_SetConfig+0x55e>
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030dc:	d205      	bcs.n	80030ea <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60da      	str	r2, [r3, #12]
 80030e8:	e002      	b.n	80030f0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2200      	movs	r2, #0
 8003104:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2200      	movs	r2, #0
 800310a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800310c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003110:	4618      	mov	r0, r3
 8003112:	3730      	adds	r7, #48	@ 0x30
 8003114:	46bd      	mov	sp, r7
 8003116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800311a:	bf00      	nop
 800311c:	080046d0 	.word	0x080046d0
 8003120:	00f42400 	.word	0x00f42400

08003124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01a      	beq.n	800323a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003222:	d10a      	bne.n	800323a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	605a      	str	r2, [r3, #4]
  }
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b098      	sub	sp, #96	@ 0x60
 800326c:	af02      	add	r7, sp, #8
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003278:	f7fd fd96 	bl	8000da8 <HAL_GetTick>
 800327c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b08      	cmp	r3, #8
 800328a:	d12f      	bne.n	80032ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800328c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003294:	2200      	movs	r2, #0
 8003296:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f88e 	bl	80033bc <UART_WaitOnFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d022      	beq.n	80032ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ae:	e853 3f00 	ldrex	r3, [r3]
 80032b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80032c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032cc:	e841 2300 	strex	r3, r2, [r1]
 80032d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1e6      	bne.n	80032a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e063      	b.n	80033b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d149      	bne.n	800338e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003302:	2200      	movs	r2, #0
 8003304:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f857 	bl	80033bc <UART_WaitOnFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d03c      	beq.n	800338e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	e853 3f00 	ldrex	r3, [r3]
 8003320:	623b      	str	r3, [r7, #32]
   return(result);
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003328:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003332:	633b      	str	r3, [r7, #48]	@ 0x30
 8003334:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e6      	bne.n	8003314 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3308      	adds	r3, #8
 800334c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	60fb      	str	r3, [r7, #12]
   return(result);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3308      	adds	r3, #8
 8003364:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003366:	61fa      	str	r2, [r7, #28]
 8003368:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336a:	69b9      	ldr	r1, [r7, #24]
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	617b      	str	r3, [r7, #20]
   return(result);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e5      	bne.n	8003346 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e012      	b.n	80033b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3758      	adds	r7, #88	@ 0x58
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033cc:	e04f      	b.n	800346e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d04b      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d6:	f7fd fce7 	bl	8000da8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d302      	bcc.n	80033ec <UART_WaitOnFlagUntilTimeout+0x30>
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e04e      	b.n	800348e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d037      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0xb2>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b80      	cmp	r3, #128	@ 0x80
 8003402:	d034      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b40      	cmp	r3, #64	@ 0x40
 8003408:	d031      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b08      	cmp	r3, #8
 8003416:	d110      	bne.n	800343a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2208      	movs	r2, #8
 800341e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f838 	bl	8003496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2208      	movs	r2, #8
 800342a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e029      	b.n	800348e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003448:	d111      	bne.n	800346e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003452:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f81e 	bl	8003496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e00f      	b.n	800348e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4013      	ands	r3, r2
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	bf0c      	ite	eq
 800347e:	2301      	moveq	r3, #1
 8003480:	2300      	movne	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	429a      	cmp	r2, r3
 800348a:	d0a0      	beq.n	80033ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003496:	b480      	push	{r7}
 8003498:	b095      	sub	sp, #84	@ 0x54
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80034be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e6      	bne.n	800349e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3308      	adds	r3, #8
 80034d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	e853 3f00 	ldrex	r3, [r3]
 80034de:	61fb      	str	r3, [r7, #28]
   return(result);
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3308      	adds	r3, #8
 80034f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034fc:	e841 2300 	strex	r3, r2, [r1]
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e3      	bne.n	80034d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800350c:	2b01      	cmp	r3, #1
 800350e:	d118      	bne.n	8003542 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	e853 3f00 	ldrex	r3, [r3]
 800351c:	60bb      	str	r3, [r7, #8]
   return(result);
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f023 0310 	bic.w	r3, r3, #16
 8003524:	647b      	str	r3, [r7, #68]	@ 0x44
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800352e:	61bb      	str	r3, [r7, #24]
 8003530:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	6979      	ldr	r1, [r7, #20]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	613b      	str	r3, [r7, #16]
   return(result);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e6      	bne.n	8003510 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003556:	bf00      	nop
 8003558:	3754      	adds	r7, #84	@ 0x54
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003562:	b480      	push	{r7}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_UARTEx_DisableFifoMode+0x16>
 8003574:	2302      	movs	r3, #2
 8003576:	e027      	b.n	80035c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2224      	movs	r2, #36	@ 0x24
 8003584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80035a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e02d      	b.n	8003648 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2224      	movs	r2, #36	@ 0x24
 80035f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f84f 	bl	80036cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003664:	2302      	movs	r3, #2
 8003666:	e02d      	b.n	80036c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2224      	movs	r2, #36	@ 0x24
 8003674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0201 	bic.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f811 	bl	80036cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d108      	bne.n	80036ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80036ec:	e031      	b.n	8003752 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80036ee:	2308      	movs	r3, #8
 80036f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80036f2:	2308      	movs	r3, #8
 80036f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	0e5b      	lsrs	r3, r3, #25
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	0f5b      	lsrs	r3, r3, #29
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003716:	7bbb      	ldrb	r3, [r7, #14]
 8003718:	7b3a      	ldrb	r2, [r7, #12]
 800371a:	4911      	ldr	r1, [pc, #68]	@ (8003760 <UARTEx_SetNbDataToProcess+0x94>)
 800371c:	5c8a      	ldrb	r2, [r1, r2]
 800371e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003722:	7b3a      	ldrb	r2, [r7, #12]
 8003724:	490f      	ldr	r1, [pc, #60]	@ (8003764 <UARTEx_SetNbDataToProcess+0x98>)
 8003726:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003728:	fb93 f3f2 	sdiv	r3, r3, r2
 800372c:	b29a      	uxth	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	7b7a      	ldrb	r2, [r7, #13]
 8003738:	4909      	ldr	r1, [pc, #36]	@ (8003760 <UARTEx_SetNbDataToProcess+0x94>)
 800373a:	5c8a      	ldrb	r2, [r1, r2]
 800373c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003740:	7b7a      	ldrb	r2, [r7, #13]
 8003742:	4908      	ldr	r1, [pc, #32]	@ (8003764 <UARTEx_SetNbDataToProcess+0x98>)
 8003744:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003746:	fb93 f3f2 	sdiv	r3, r3, r2
 800374a:	b29a      	uxth	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	080046e8 	.word	0x080046e8
 8003764:	080046f0 	.word	0x080046f0

08003768 <setup>:

extern UART_HandleTypeDef hlpuart1;
uint8_t prompt[15] = "\nSTM32G431 >> ";
uint8_t message[50];

void setup() {
 8003768:	b5b0      	push	{r4, r5, r7, lr}
 800376a:	af00      	add	r7, sp, #0
	strcpy((char*)message, "MSC 2024 - Capteurs\r\n");
 800376c:	4a11      	ldr	r2, [pc, #68]	@ (80037b4 <setup+0x4c>)
 800376e:	4b12      	ldr	r3, [pc, #72]	@ (80037b8 <setup+0x50>)
 8003770:	4614      	mov	r4, r2
 8003772:	461d      	mov	r5, r3
 8003774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003778:	e895 0003 	ldmia.w	r5, {r0, r1}
 800377c:	6020      	str	r0, [r4, #0]
 800377e:	3404      	adds	r4, #4
 8003780:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&hlpuart1, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8003782:	480e      	ldr	r0, [pc, #56]	@ (80037bc <setup+0x54>)
 8003784:	f7fc fd4c 	bl	8000220 <strlen>
 8003788:	4603      	mov	r3, r0
 800378a:	b29a      	uxth	r2, r3
 800378c:	f04f 33ff 	mov.w	r3, #4294967295
 8003790:	490a      	ldr	r1, [pc, #40]	@ (80037bc <setup+0x54>)
 8003792:	480b      	ldr	r0, [pc, #44]	@ (80037c0 <setup+0x58>)
 8003794:	f7ff f96c 	bl	8002a70 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, message, strlen((char*)message), HAL_MAX_DELAY);
 8003798:	4806      	ldr	r0, [pc, #24]	@ (80037b4 <setup+0x4c>)
 800379a:	f7fc fd41 	bl	8000220 <strlen>
 800379e:	4603      	mov	r3, r0
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	f04f 33ff 	mov.w	r3, #4294967295
 80037a6:	4903      	ldr	r1, [pc, #12]	@ (80037b4 <setup+0x4c>)
 80037a8:	4805      	ldr	r0, [pc, #20]	@ (80037c0 <setup+0x58>)
 80037aa:	f7ff f961 	bl	8002a70 <HAL_UART_Transmit>
}
 80037ae:	bf00      	nop
 80037b0:	bdb0      	pop	{r4, r5, r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000184 	.word	0x20000184
 80037b8:	08004694 	.word	0x08004694
 80037bc:	2000000c 	.word	0x2000000c
 80037c0:	200000e8 	.word	0x200000e8

080037c4 <test_LEDs>:
/**
  * @brief Make PA5 LED blink.
  * @param delay : current delay
  * @retval HAL status
  */
void test_LEDs(int delay){
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	for(;;){
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80037cc:	2120      	movs	r1, #32
 80037ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037d2:	f7fd fd95 	bl	8001300 <HAL_GPIO_TogglePin>
		HAL_Delay(delay);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fd faf1 	bl	8000dc0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80037de:	bf00      	nop
 80037e0:	e7f4      	b.n	80037cc <test_LEDs+0x8>
	...

080037e4 <std>:
 80037e4:	2300      	movs	r3, #0
 80037e6:	b510      	push	{r4, lr}
 80037e8:	4604      	mov	r4, r0
 80037ea:	e9c0 3300 	strd	r3, r3, [r0]
 80037ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037f2:	6083      	str	r3, [r0, #8]
 80037f4:	8181      	strh	r1, [r0, #12]
 80037f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80037f8:	81c2      	strh	r2, [r0, #14]
 80037fa:	6183      	str	r3, [r0, #24]
 80037fc:	4619      	mov	r1, r3
 80037fe:	2208      	movs	r2, #8
 8003800:	305c      	adds	r0, #92	@ 0x5c
 8003802:	f000 f906 	bl	8003a12 <memset>
 8003806:	4b0d      	ldr	r3, [pc, #52]	@ (800383c <std+0x58>)
 8003808:	6263      	str	r3, [r4, #36]	@ 0x24
 800380a:	4b0d      	ldr	r3, [pc, #52]	@ (8003840 <std+0x5c>)
 800380c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800380e:	4b0d      	ldr	r3, [pc, #52]	@ (8003844 <std+0x60>)
 8003810:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003812:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <std+0x64>)
 8003814:	6323      	str	r3, [r4, #48]	@ 0x30
 8003816:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <std+0x68>)
 8003818:	6224      	str	r4, [r4, #32]
 800381a:	429c      	cmp	r4, r3
 800381c:	d006      	beq.n	800382c <std+0x48>
 800381e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003822:	4294      	cmp	r4, r2
 8003824:	d002      	beq.n	800382c <std+0x48>
 8003826:	33d0      	adds	r3, #208	@ 0xd0
 8003828:	429c      	cmp	r4, r3
 800382a:	d105      	bne.n	8003838 <std+0x54>
 800382c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003834:	f000 b966 	b.w	8003b04 <__retarget_lock_init_recursive>
 8003838:	bd10      	pop	{r4, pc}
 800383a:	bf00      	nop
 800383c:	0800398d 	.word	0x0800398d
 8003840:	080039af 	.word	0x080039af
 8003844:	080039e7 	.word	0x080039e7
 8003848:	08003a0b 	.word	0x08003a0b
 800384c:	200001b8 	.word	0x200001b8

08003850 <stdio_exit_handler>:
 8003850:	4a02      	ldr	r2, [pc, #8]	@ (800385c <stdio_exit_handler+0xc>)
 8003852:	4903      	ldr	r1, [pc, #12]	@ (8003860 <stdio_exit_handler+0x10>)
 8003854:	4803      	ldr	r0, [pc, #12]	@ (8003864 <stdio_exit_handler+0x14>)
 8003856:	f000 b869 	b.w	800392c <_fwalk_sglue>
 800385a:	bf00      	nop
 800385c:	2000001c 	.word	0x2000001c
 8003860:	080043a5 	.word	0x080043a5
 8003864:	2000002c 	.word	0x2000002c

08003868 <cleanup_stdio>:
 8003868:	6841      	ldr	r1, [r0, #4]
 800386a:	4b0c      	ldr	r3, [pc, #48]	@ (800389c <cleanup_stdio+0x34>)
 800386c:	4299      	cmp	r1, r3
 800386e:	b510      	push	{r4, lr}
 8003870:	4604      	mov	r4, r0
 8003872:	d001      	beq.n	8003878 <cleanup_stdio+0x10>
 8003874:	f000 fd96 	bl	80043a4 <_fflush_r>
 8003878:	68a1      	ldr	r1, [r4, #8]
 800387a:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <cleanup_stdio+0x38>)
 800387c:	4299      	cmp	r1, r3
 800387e:	d002      	beq.n	8003886 <cleanup_stdio+0x1e>
 8003880:	4620      	mov	r0, r4
 8003882:	f000 fd8f 	bl	80043a4 <_fflush_r>
 8003886:	68e1      	ldr	r1, [r4, #12]
 8003888:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <cleanup_stdio+0x3c>)
 800388a:	4299      	cmp	r1, r3
 800388c:	d004      	beq.n	8003898 <cleanup_stdio+0x30>
 800388e:	4620      	mov	r0, r4
 8003890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003894:	f000 bd86 	b.w	80043a4 <_fflush_r>
 8003898:	bd10      	pop	{r4, pc}
 800389a:	bf00      	nop
 800389c:	200001b8 	.word	0x200001b8
 80038a0:	20000220 	.word	0x20000220
 80038a4:	20000288 	.word	0x20000288

080038a8 <global_stdio_init.part.0>:
 80038a8:	b510      	push	{r4, lr}
 80038aa:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <global_stdio_init.part.0+0x30>)
 80038ac:	4c0b      	ldr	r4, [pc, #44]	@ (80038dc <global_stdio_init.part.0+0x34>)
 80038ae:	4a0c      	ldr	r2, [pc, #48]	@ (80038e0 <global_stdio_init.part.0+0x38>)
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	4620      	mov	r0, r4
 80038b4:	2200      	movs	r2, #0
 80038b6:	2104      	movs	r1, #4
 80038b8:	f7ff ff94 	bl	80037e4 <std>
 80038bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80038c0:	2201      	movs	r2, #1
 80038c2:	2109      	movs	r1, #9
 80038c4:	f7ff ff8e 	bl	80037e4 <std>
 80038c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80038cc:	2202      	movs	r2, #2
 80038ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038d2:	2112      	movs	r1, #18
 80038d4:	f7ff bf86 	b.w	80037e4 <std>
 80038d8:	200002f0 	.word	0x200002f0
 80038dc:	200001b8 	.word	0x200001b8
 80038e0:	08003851 	.word	0x08003851

080038e4 <__sfp_lock_acquire>:
 80038e4:	4801      	ldr	r0, [pc, #4]	@ (80038ec <__sfp_lock_acquire+0x8>)
 80038e6:	f000 b90e 	b.w	8003b06 <__retarget_lock_acquire_recursive>
 80038ea:	bf00      	nop
 80038ec:	200002f9 	.word	0x200002f9

080038f0 <__sfp_lock_release>:
 80038f0:	4801      	ldr	r0, [pc, #4]	@ (80038f8 <__sfp_lock_release+0x8>)
 80038f2:	f000 b909 	b.w	8003b08 <__retarget_lock_release_recursive>
 80038f6:	bf00      	nop
 80038f8:	200002f9 	.word	0x200002f9

080038fc <__sinit>:
 80038fc:	b510      	push	{r4, lr}
 80038fe:	4604      	mov	r4, r0
 8003900:	f7ff fff0 	bl	80038e4 <__sfp_lock_acquire>
 8003904:	6a23      	ldr	r3, [r4, #32]
 8003906:	b11b      	cbz	r3, 8003910 <__sinit+0x14>
 8003908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800390c:	f7ff bff0 	b.w	80038f0 <__sfp_lock_release>
 8003910:	4b04      	ldr	r3, [pc, #16]	@ (8003924 <__sinit+0x28>)
 8003912:	6223      	str	r3, [r4, #32]
 8003914:	4b04      	ldr	r3, [pc, #16]	@ (8003928 <__sinit+0x2c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f5      	bne.n	8003908 <__sinit+0xc>
 800391c:	f7ff ffc4 	bl	80038a8 <global_stdio_init.part.0>
 8003920:	e7f2      	b.n	8003908 <__sinit+0xc>
 8003922:	bf00      	nop
 8003924:	08003869 	.word	0x08003869
 8003928:	200002f0 	.word	0x200002f0

0800392c <_fwalk_sglue>:
 800392c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003930:	4607      	mov	r7, r0
 8003932:	4688      	mov	r8, r1
 8003934:	4614      	mov	r4, r2
 8003936:	2600      	movs	r6, #0
 8003938:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800393c:	f1b9 0901 	subs.w	r9, r9, #1
 8003940:	d505      	bpl.n	800394e <_fwalk_sglue+0x22>
 8003942:	6824      	ldr	r4, [r4, #0]
 8003944:	2c00      	cmp	r4, #0
 8003946:	d1f7      	bne.n	8003938 <_fwalk_sglue+0xc>
 8003948:	4630      	mov	r0, r6
 800394a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800394e:	89ab      	ldrh	r3, [r5, #12]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d907      	bls.n	8003964 <_fwalk_sglue+0x38>
 8003954:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003958:	3301      	adds	r3, #1
 800395a:	d003      	beq.n	8003964 <_fwalk_sglue+0x38>
 800395c:	4629      	mov	r1, r5
 800395e:	4638      	mov	r0, r7
 8003960:	47c0      	blx	r8
 8003962:	4306      	orrs	r6, r0
 8003964:	3568      	adds	r5, #104	@ 0x68
 8003966:	e7e9      	b.n	800393c <_fwalk_sglue+0x10>

08003968 <iprintf>:
 8003968:	b40f      	push	{r0, r1, r2, r3}
 800396a:	b507      	push	{r0, r1, r2, lr}
 800396c:	4906      	ldr	r1, [pc, #24]	@ (8003988 <iprintf+0x20>)
 800396e:	ab04      	add	r3, sp, #16
 8003970:	6808      	ldr	r0, [r1, #0]
 8003972:	f853 2b04 	ldr.w	r2, [r3], #4
 8003976:	6881      	ldr	r1, [r0, #8]
 8003978:	9301      	str	r3, [sp, #4]
 800397a:	f000 f9e9 	bl	8003d50 <_vfiprintf_r>
 800397e:	b003      	add	sp, #12
 8003980:	f85d eb04 	ldr.w	lr, [sp], #4
 8003984:	b004      	add	sp, #16
 8003986:	4770      	bx	lr
 8003988:	20000028 	.word	0x20000028

0800398c <__sread>:
 800398c:	b510      	push	{r4, lr}
 800398e:	460c      	mov	r4, r1
 8003990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003994:	f000 f868 	bl	8003a68 <_read_r>
 8003998:	2800      	cmp	r0, #0
 800399a:	bfab      	itete	ge
 800399c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800399e:	89a3      	ldrhlt	r3, [r4, #12]
 80039a0:	181b      	addge	r3, r3, r0
 80039a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80039a6:	bfac      	ite	ge
 80039a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80039aa:	81a3      	strhlt	r3, [r4, #12]
 80039ac:	bd10      	pop	{r4, pc}

080039ae <__swrite>:
 80039ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b2:	461f      	mov	r7, r3
 80039b4:	898b      	ldrh	r3, [r1, #12]
 80039b6:	05db      	lsls	r3, r3, #23
 80039b8:	4605      	mov	r5, r0
 80039ba:	460c      	mov	r4, r1
 80039bc:	4616      	mov	r6, r2
 80039be:	d505      	bpl.n	80039cc <__swrite+0x1e>
 80039c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039c4:	2302      	movs	r3, #2
 80039c6:	2200      	movs	r2, #0
 80039c8:	f000 f83c 	bl	8003a44 <_lseek_r>
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039d6:	81a3      	strh	r3, [r4, #12]
 80039d8:	4632      	mov	r2, r6
 80039da:	463b      	mov	r3, r7
 80039dc:	4628      	mov	r0, r5
 80039de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039e2:	f000 b853 	b.w	8003a8c <_write_r>

080039e6 <__sseek>:
 80039e6:	b510      	push	{r4, lr}
 80039e8:	460c      	mov	r4, r1
 80039ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ee:	f000 f829 	bl	8003a44 <_lseek_r>
 80039f2:	1c43      	adds	r3, r0, #1
 80039f4:	89a3      	ldrh	r3, [r4, #12]
 80039f6:	bf15      	itete	ne
 80039f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80039fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80039fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a02:	81a3      	strheq	r3, [r4, #12]
 8003a04:	bf18      	it	ne
 8003a06:	81a3      	strhne	r3, [r4, #12]
 8003a08:	bd10      	pop	{r4, pc}

08003a0a <__sclose>:
 8003a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a0e:	f000 b809 	b.w	8003a24 <_close_r>

08003a12 <memset>:
 8003a12:	4402      	add	r2, r0
 8003a14:	4603      	mov	r3, r0
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d100      	bne.n	8003a1c <memset+0xa>
 8003a1a:	4770      	bx	lr
 8003a1c:	f803 1b01 	strb.w	r1, [r3], #1
 8003a20:	e7f9      	b.n	8003a16 <memset+0x4>
	...

08003a24 <_close_r>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	4d06      	ldr	r5, [pc, #24]	@ (8003a40 <_close_r+0x1c>)
 8003a28:	2300      	movs	r3, #0
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	4608      	mov	r0, r1
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	f7fd f8b0 	bl	8000b94 <_close>
 8003a34:	1c43      	adds	r3, r0, #1
 8003a36:	d102      	bne.n	8003a3e <_close_r+0x1a>
 8003a38:	682b      	ldr	r3, [r5, #0]
 8003a3a:	b103      	cbz	r3, 8003a3e <_close_r+0x1a>
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	bd38      	pop	{r3, r4, r5, pc}
 8003a40:	200002f4 	.word	0x200002f4

08003a44 <_lseek_r>:
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4d07      	ldr	r5, [pc, #28]	@ (8003a64 <_lseek_r+0x20>)
 8003a48:	4604      	mov	r4, r0
 8003a4a:	4608      	mov	r0, r1
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	2200      	movs	r2, #0
 8003a50:	602a      	str	r2, [r5, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f7fd f8c5 	bl	8000be2 <_lseek>
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	d102      	bne.n	8003a62 <_lseek_r+0x1e>
 8003a5c:	682b      	ldr	r3, [r5, #0]
 8003a5e:	b103      	cbz	r3, 8003a62 <_lseek_r+0x1e>
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	bd38      	pop	{r3, r4, r5, pc}
 8003a64:	200002f4 	.word	0x200002f4

08003a68 <_read_r>:
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	4d07      	ldr	r5, [pc, #28]	@ (8003a88 <_read_r+0x20>)
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	4608      	mov	r0, r1
 8003a70:	4611      	mov	r1, r2
 8003a72:	2200      	movs	r2, #0
 8003a74:	602a      	str	r2, [r5, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f7fd f853 	bl	8000b22 <_read>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	d102      	bne.n	8003a86 <_read_r+0x1e>
 8003a80:	682b      	ldr	r3, [r5, #0]
 8003a82:	b103      	cbz	r3, 8003a86 <_read_r+0x1e>
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
 8003a88:	200002f4 	.word	0x200002f4

08003a8c <_write_r>:
 8003a8c:	b538      	push	{r3, r4, r5, lr}
 8003a8e:	4d07      	ldr	r5, [pc, #28]	@ (8003aac <_write_r+0x20>)
 8003a90:	4604      	mov	r4, r0
 8003a92:	4608      	mov	r0, r1
 8003a94:	4611      	mov	r1, r2
 8003a96:	2200      	movs	r2, #0
 8003a98:	602a      	str	r2, [r5, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f7fd f85e 	bl	8000b5c <_write>
 8003aa0:	1c43      	adds	r3, r0, #1
 8003aa2:	d102      	bne.n	8003aaa <_write_r+0x1e>
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	b103      	cbz	r3, 8003aaa <_write_r+0x1e>
 8003aa8:	6023      	str	r3, [r4, #0]
 8003aaa:	bd38      	pop	{r3, r4, r5, pc}
 8003aac:	200002f4 	.word	0x200002f4

08003ab0 <__errno>:
 8003ab0:	4b01      	ldr	r3, [pc, #4]	@ (8003ab8 <__errno+0x8>)
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	20000028 	.word	0x20000028

08003abc <__libc_init_array>:
 8003abc:	b570      	push	{r4, r5, r6, lr}
 8003abe:	4d0d      	ldr	r5, [pc, #52]	@ (8003af4 <__libc_init_array+0x38>)
 8003ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8003af8 <__libc_init_array+0x3c>)
 8003ac2:	1b64      	subs	r4, r4, r5
 8003ac4:	10a4      	asrs	r4, r4, #2
 8003ac6:	2600      	movs	r6, #0
 8003ac8:	42a6      	cmp	r6, r4
 8003aca:	d109      	bne.n	8003ae0 <__libc_init_array+0x24>
 8003acc:	4d0b      	ldr	r5, [pc, #44]	@ (8003afc <__libc_init_array+0x40>)
 8003ace:	4c0c      	ldr	r4, [pc, #48]	@ (8003b00 <__libc_init_array+0x44>)
 8003ad0:	f000 fdb8 	bl	8004644 <_init>
 8003ad4:	1b64      	subs	r4, r4, r5
 8003ad6:	10a4      	asrs	r4, r4, #2
 8003ad8:	2600      	movs	r6, #0
 8003ada:	42a6      	cmp	r6, r4
 8003adc:	d105      	bne.n	8003aea <__libc_init_array+0x2e>
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
 8003ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae4:	4798      	blx	r3
 8003ae6:	3601      	adds	r6, #1
 8003ae8:	e7ee      	b.n	8003ac8 <__libc_init_array+0xc>
 8003aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aee:	4798      	blx	r3
 8003af0:	3601      	adds	r6, #1
 8003af2:	e7f2      	b.n	8003ada <__libc_init_array+0x1e>
 8003af4:	08004734 	.word	0x08004734
 8003af8:	08004734 	.word	0x08004734
 8003afc:	08004734 	.word	0x08004734
 8003b00:	08004738 	.word	0x08004738

08003b04 <__retarget_lock_init_recursive>:
 8003b04:	4770      	bx	lr

08003b06 <__retarget_lock_acquire_recursive>:
 8003b06:	4770      	bx	lr

08003b08 <__retarget_lock_release_recursive>:
 8003b08:	4770      	bx	lr
	...

08003b0c <_free_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4605      	mov	r5, r0
 8003b10:	2900      	cmp	r1, #0
 8003b12:	d041      	beq.n	8003b98 <_free_r+0x8c>
 8003b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b18:	1f0c      	subs	r4, r1, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bfb8      	it	lt
 8003b1e:	18e4      	addlt	r4, r4, r3
 8003b20:	f000 f8e0 	bl	8003ce4 <__malloc_lock>
 8003b24:	4a1d      	ldr	r2, [pc, #116]	@ (8003b9c <_free_r+0x90>)
 8003b26:	6813      	ldr	r3, [r2, #0]
 8003b28:	b933      	cbnz	r3, 8003b38 <_free_r+0x2c>
 8003b2a:	6063      	str	r3, [r4, #4]
 8003b2c:	6014      	str	r4, [r2, #0]
 8003b2e:	4628      	mov	r0, r5
 8003b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b34:	f000 b8dc 	b.w	8003cf0 <__malloc_unlock>
 8003b38:	42a3      	cmp	r3, r4
 8003b3a:	d908      	bls.n	8003b4e <_free_r+0x42>
 8003b3c:	6820      	ldr	r0, [r4, #0]
 8003b3e:	1821      	adds	r1, r4, r0
 8003b40:	428b      	cmp	r3, r1
 8003b42:	bf01      	itttt	eq
 8003b44:	6819      	ldreq	r1, [r3, #0]
 8003b46:	685b      	ldreq	r3, [r3, #4]
 8003b48:	1809      	addeq	r1, r1, r0
 8003b4a:	6021      	streq	r1, [r4, #0]
 8003b4c:	e7ed      	b.n	8003b2a <_free_r+0x1e>
 8003b4e:	461a      	mov	r2, r3
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	b10b      	cbz	r3, 8003b58 <_free_r+0x4c>
 8003b54:	42a3      	cmp	r3, r4
 8003b56:	d9fa      	bls.n	8003b4e <_free_r+0x42>
 8003b58:	6811      	ldr	r1, [r2, #0]
 8003b5a:	1850      	adds	r0, r2, r1
 8003b5c:	42a0      	cmp	r0, r4
 8003b5e:	d10b      	bne.n	8003b78 <_free_r+0x6c>
 8003b60:	6820      	ldr	r0, [r4, #0]
 8003b62:	4401      	add	r1, r0
 8003b64:	1850      	adds	r0, r2, r1
 8003b66:	4283      	cmp	r3, r0
 8003b68:	6011      	str	r1, [r2, #0]
 8003b6a:	d1e0      	bne.n	8003b2e <_free_r+0x22>
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	6053      	str	r3, [r2, #4]
 8003b72:	4408      	add	r0, r1
 8003b74:	6010      	str	r0, [r2, #0]
 8003b76:	e7da      	b.n	8003b2e <_free_r+0x22>
 8003b78:	d902      	bls.n	8003b80 <_free_r+0x74>
 8003b7a:	230c      	movs	r3, #12
 8003b7c:	602b      	str	r3, [r5, #0]
 8003b7e:	e7d6      	b.n	8003b2e <_free_r+0x22>
 8003b80:	6820      	ldr	r0, [r4, #0]
 8003b82:	1821      	adds	r1, r4, r0
 8003b84:	428b      	cmp	r3, r1
 8003b86:	bf04      	itt	eq
 8003b88:	6819      	ldreq	r1, [r3, #0]
 8003b8a:	685b      	ldreq	r3, [r3, #4]
 8003b8c:	6063      	str	r3, [r4, #4]
 8003b8e:	bf04      	itt	eq
 8003b90:	1809      	addeq	r1, r1, r0
 8003b92:	6021      	streq	r1, [r4, #0]
 8003b94:	6054      	str	r4, [r2, #4]
 8003b96:	e7ca      	b.n	8003b2e <_free_r+0x22>
 8003b98:	bd38      	pop	{r3, r4, r5, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000300 	.word	0x20000300

08003ba0 <sbrk_aligned>:
 8003ba0:	b570      	push	{r4, r5, r6, lr}
 8003ba2:	4e0f      	ldr	r6, [pc, #60]	@ (8003be0 <sbrk_aligned+0x40>)
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	6831      	ldr	r1, [r6, #0]
 8003ba8:	4605      	mov	r5, r0
 8003baa:	b911      	cbnz	r1, 8003bb2 <sbrk_aligned+0x12>
 8003bac:	f000 fcb6 	bl	800451c <_sbrk_r>
 8003bb0:	6030      	str	r0, [r6, #0]
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	f000 fcb1 	bl	800451c <_sbrk_r>
 8003bba:	1c43      	adds	r3, r0, #1
 8003bbc:	d103      	bne.n	8003bc6 <sbrk_aligned+0x26>
 8003bbe:	f04f 34ff 	mov.w	r4, #4294967295
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	bd70      	pop	{r4, r5, r6, pc}
 8003bc6:	1cc4      	adds	r4, r0, #3
 8003bc8:	f024 0403 	bic.w	r4, r4, #3
 8003bcc:	42a0      	cmp	r0, r4
 8003bce:	d0f8      	beq.n	8003bc2 <sbrk_aligned+0x22>
 8003bd0:	1a21      	subs	r1, r4, r0
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	f000 fca2 	bl	800451c <_sbrk_r>
 8003bd8:	3001      	adds	r0, #1
 8003bda:	d1f2      	bne.n	8003bc2 <sbrk_aligned+0x22>
 8003bdc:	e7ef      	b.n	8003bbe <sbrk_aligned+0x1e>
 8003bde:	bf00      	nop
 8003be0:	200002fc 	.word	0x200002fc

08003be4 <_malloc_r>:
 8003be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003be8:	1ccd      	adds	r5, r1, #3
 8003bea:	f025 0503 	bic.w	r5, r5, #3
 8003bee:	3508      	adds	r5, #8
 8003bf0:	2d0c      	cmp	r5, #12
 8003bf2:	bf38      	it	cc
 8003bf4:	250c      	movcc	r5, #12
 8003bf6:	2d00      	cmp	r5, #0
 8003bf8:	4606      	mov	r6, r0
 8003bfa:	db01      	blt.n	8003c00 <_malloc_r+0x1c>
 8003bfc:	42a9      	cmp	r1, r5
 8003bfe:	d904      	bls.n	8003c0a <_malloc_r+0x26>
 8003c00:	230c      	movs	r3, #12
 8003c02:	6033      	str	r3, [r6, #0]
 8003c04:	2000      	movs	r0, #0
 8003c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ce0 <_malloc_r+0xfc>
 8003c0e:	f000 f869 	bl	8003ce4 <__malloc_lock>
 8003c12:	f8d8 3000 	ldr.w	r3, [r8]
 8003c16:	461c      	mov	r4, r3
 8003c18:	bb44      	cbnz	r4, 8003c6c <_malloc_r+0x88>
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	f7ff ffbf 	bl	8003ba0 <sbrk_aligned>
 8003c22:	1c43      	adds	r3, r0, #1
 8003c24:	4604      	mov	r4, r0
 8003c26:	d158      	bne.n	8003cda <_malloc_r+0xf6>
 8003c28:	f8d8 4000 	ldr.w	r4, [r8]
 8003c2c:	4627      	mov	r7, r4
 8003c2e:	2f00      	cmp	r7, #0
 8003c30:	d143      	bne.n	8003cba <_malloc_r+0xd6>
 8003c32:	2c00      	cmp	r4, #0
 8003c34:	d04b      	beq.n	8003cce <_malloc_r+0xea>
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	4639      	mov	r1, r7
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	eb04 0903 	add.w	r9, r4, r3
 8003c40:	f000 fc6c 	bl	800451c <_sbrk_r>
 8003c44:	4581      	cmp	r9, r0
 8003c46:	d142      	bne.n	8003cce <_malloc_r+0xea>
 8003c48:	6821      	ldr	r1, [r4, #0]
 8003c4a:	1a6d      	subs	r5, r5, r1
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	4630      	mov	r0, r6
 8003c50:	f7ff ffa6 	bl	8003ba0 <sbrk_aligned>
 8003c54:	3001      	adds	r0, #1
 8003c56:	d03a      	beq.n	8003cce <_malloc_r+0xea>
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	442b      	add	r3, r5
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	bb62      	cbnz	r2, 8003cc0 <_malloc_r+0xdc>
 8003c66:	f8c8 7000 	str.w	r7, [r8]
 8003c6a:	e00f      	b.n	8003c8c <_malloc_r+0xa8>
 8003c6c:	6822      	ldr	r2, [r4, #0]
 8003c6e:	1b52      	subs	r2, r2, r5
 8003c70:	d420      	bmi.n	8003cb4 <_malloc_r+0xd0>
 8003c72:	2a0b      	cmp	r2, #11
 8003c74:	d917      	bls.n	8003ca6 <_malloc_r+0xc2>
 8003c76:	1961      	adds	r1, r4, r5
 8003c78:	42a3      	cmp	r3, r4
 8003c7a:	6025      	str	r5, [r4, #0]
 8003c7c:	bf18      	it	ne
 8003c7e:	6059      	strne	r1, [r3, #4]
 8003c80:	6863      	ldr	r3, [r4, #4]
 8003c82:	bf08      	it	eq
 8003c84:	f8c8 1000 	streq.w	r1, [r8]
 8003c88:	5162      	str	r2, [r4, r5]
 8003c8a:	604b      	str	r3, [r1, #4]
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f000 f82f 	bl	8003cf0 <__malloc_unlock>
 8003c92:	f104 000b 	add.w	r0, r4, #11
 8003c96:	1d23      	adds	r3, r4, #4
 8003c98:	f020 0007 	bic.w	r0, r0, #7
 8003c9c:	1ac2      	subs	r2, r0, r3
 8003c9e:	bf1c      	itt	ne
 8003ca0:	1a1b      	subne	r3, r3, r0
 8003ca2:	50a3      	strne	r3, [r4, r2]
 8003ca4:	e7af      	b.n	8003c06 <_malloc_r+0x22>
 8003ca6:	6862      	ldr	r2, [r4, #4]
 8003ca8:	42a3      	cmp	r3, r4
 8003caa:	bf0c      	ite	eq
 8003cac:	f8c8 2000 	streq.w	r2, [r8]
 8003cb0:	605a      	strne	r2, [r3, #4]
 8003cb2:	e7eb      	b.n	8003c8c <_malloc_r+0xa8>
 8003cb4:	4623      	mov	r3, r4
 8003cb6:	6864      	ldr	r4, [r4, #4]
 8003cb8:	e7ae      	b.n	8003c18 <_malloc_r+0x34>
 8003cba:	463c      	mov	r4, r7
 8003cbc:	687f      	ldr	r7, [r7, #4]
 8003cbe:	e7b6      	b.n	8003c2e <_malloc_r+0x4a>
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	42a3      	cmp	r3, r4
 8003cc6:	d1fb      	bne.n	8003cc0 <_malloc_r+0xdc>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	6053      	str	r3, [r2, #4]
 8003ccc:	e7de      	b.n	8003c8c <_malloc_r+0xa8>
 8003cce:	230c      	movs	r3, #12
 8003cd0:	6033      	str	r3, [r6, #0]
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	f000 f80c 	bl	8003cf0 <__malloc_unlock>
 8003cd8:	e794      	b.n	8003c04 <_malloc_r+0x20>
 8003cda:	6005      	str	r5, [r0, #0]
 8003cdc:	e7d6      	b.n	8003c8c <_malloc_r+0xa8>
 8003cde:	bf00      	nop
 8003ce0:	20000300 	.word	0x20000300

08003ce4 <__malloc_lock>:
 8003ce4:	4801      	ldr	r0, [pc, #4]	@ (8003cec <__malloc_lock+0x8>)
 8003ce6:	f7ff bf0e 	b.w	8003b06 <__retarget_lock_acquire_recursive>
 8003cea:	bf00      	nop
 8003cec:	200002f8 	.word	0x200002f8

08003cf0 <__malloc_unlock>:
 8003cf0:	4801      	ldr	r0, [pc, #4]	@ (8003cf8 <__malloc_unlock+0x8>)
 8003cf2:	f7ff bf09 	b.w	8003b08 <__retarget_lock_release_recursive>
 8003cf6:	bf00      	nop
 8003cf8:	200002f8 	.word	0x200002f8

08003cfc <__sfputc_r>:
 8003cfc:	6893      	ldr	r3, [r2, #8]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	b410      	push	{r4}
 8003d04:	6093      	str	r3, [r2, #8]
 8003d06:	da08      	bge.n	8003d1a <__sfputc_r+0x1e>
 8003d08:	6994      	ldr	r4, [r2, #24]
 8003d0a:	42a3      	cmp	r3, r4
 8003d0c:	db01      	blt.n	8003d12 <__sfputc_r+0x16>
 8003d0e:	290a      	cmp	r1, #10
 8003d10:	d103      	bne.n	8003d1a <__sfputc_r+0x1e>
 8003d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d16:	f000 bb6d 	b.w	80043f4 <__swbuf_r>
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	1c58      	adds	r0, r3, #1
 8003d1e:	6010      	str	r0, [r2, #0]
 8003d20:	7019      	strb	r1, [r3, #0]
 8003d22:	4608      	mov	r0, r1
 8003d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <__sfputs_r>:
 8003d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2c:	4606      	mov	r6, r0
 8003d2e:	460f      	mov	r7, r1
 8003d30:	4614      	mov	r4, r2
 8003d32:	18d5      	adds	r5, r2, r3
 8003d34:	42ac      	cmp	r4, r5
 8003d36:	d101      	bne.n	8003d3c <__sfputs_r+0x12>
 8003d38:	2000      	movs	r0, #0
 8003d3a:	e007      	b.n	8003d4c <__sfputs_r+0x22>
 8003d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d40:	463a      	mov	r2, r7
 8003d42:	4630      	mov	r0, r6
 8003d44:	f7ff ffda 	bl	8003cfc <__sfputc_r>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	d1f3      	bne.n	8003d34 <__sfputs_r+0xa>
 8003d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d50 <_vfiprintf_r>:
 8003d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d54:	460d      	mov	r5, r1
 8003d56:	b09d      	sub	sp, #116	@ 0x74
 8003d58:	4614      	mov	r4, r2
 8003d5a:	4698      	mov	r8, r3
 8003d5c:	4606      	mov	r6, r0
 8003d5e:	b118      	cbz	r0, 8003d68 <_vfiprintf_r+0x18>
 8003d60:	6a03      	ldr	r3, [r0, #32]
 8003d62:	b90b      	cbnz	r3, 8003d68 <_vfiprintf_r+0x18>
 8003d64:	f7ff fdca 	bl	80038fc <__sinit>
 8003d68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d6a:	07d9      	lsls	r1, r3, #31
 8003d6c:	d405      	bmi.n	8003d7a <_vfiprintf_r+0x2a>
 8003d6e:	89ab      	ldrh	r3, [r5, #12]
 8003d70:	059a      	lsls	r2, r3, #22
 8003d72:	d402      	bmi.n	8003d7a <_vfiprintf_r+0x2a>
 8003d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d76:	f7ff fec6 	bl	8003b06 <__retarget_lock_acquire_recursive>
 8003d7a:	89ab      	ldrh	r3, [r5, #12]
 8003d7c:	071b      	lsls	r3, r3, #28
 8003d7e:	d501      	bpl.n	8003d84 <_vfiprintf_r+0x34>
 8003d80:	692b      	ldr	r3, [r5, #16]
 8003d82:	b99b      	cbnz	r3, 8003dac <_vfiprintf_r+0x5c>
 8003d84:	4629      	mov	r1, r5
 8003d86:	4630      	mov	r0, r6
 8003d88:	f000 fb72 	bl	8004470 <__swsetup_r>
 8003d8c:	b170      	cbz	r0, 8003dac <_vfiprintf_r+0x5c>
 8003d8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d90:	07dc      	lsls	r4, r3, #31
 8003d92:	d504      	bpl.n	8003d9e <_vfiprintf_r+0x4e>
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295
 8003d98:	b01d      	add	sp, #116	@ 0x74
 8003d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d9e:	89ab      	ldrh	r3, [r5, #12]
 8003da0:	0598      	lsls	r0, r3, #22
 8003da2:	d4f7      	bmi.n	8003d94 <_vfiprintf_r+0x44>
 8003da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003da6:	f7ff feaf 	bl	8003b08 <__retarget_lock_release_recursive>
 8003daa:	e7f3      	b.n	8003d94 <_vfiprintf_r+0x44>
 8003dac:	2300      	movs	r3, #0
 8003dae:	9309      	str	r3, [sp, #36]	@ 0x24
 8003db0:	2320      	movs	r3, #32
 8003db2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dba:	2330      	movs	r3, #48	@ 0x30
 8003dbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003f6c <_vfiprintf_r+0x21c>
 8003dc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003dc4:	f04f 0901 	mov.w	r9, #1
 8003dc8:	4623      	mov	r3, r4
 8003dca:	469a      	mov	sl, r3
 8003dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dd0:	b10a      	cbz	r2, 8003dd6 <_vfiprintf_r+0x86>
 8003dd2:	2a25      	cmp	r2, #37	@ 0x25
 8003dd4:	d1f9      	bne.n	8003dca <_vfiprintf_r+0x7a>
 8003dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8003dda:	d00b      	beq.n	8003df4 <_vfiprintf_r+0xa4>
 8003ddc:	465b      	mov	r3, fp
 8003dde:	4622      	mov	r2, r4
 8003de0:	4629      	mov	r1, r5
 8003de2:	4630      	mov	r0, r6
 8003de4:	f7ff ffa1 	bl	8003d2a <__sfputs_r>
 8003de8:	3001      	adds	r0, #1
 8003dea:	f000 80a7 	beq.w	8003f3c <_vfiprintf_r+0x1ec>
 8003dee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003df0:	445a      	add	r2, fp
 8003df2:	9209      	str	r2, [sp, #36]	@ 0x24
 8003df4:	f89a 3000 	ldrb.w	r3, [sl]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 809f 	beq.w	8003f3c <_vfiprintf_r+0x1ec>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295
 8003e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e08:	f10a 0a01 	add.w	sl, sl, #1
 8003e0c:	9304      	str	r3, [sp, #16]
 8003e0e:	9307      	str	r3, [sp, #28]
 8003e10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e14:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e16:	4654      	mov	r4, sl
 8003e18:	2205      	movs	r2, #5
 8003e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e1e:	4853      	ldr	r0, [pc, #332]	@ (8003f6c <_vfiprintf_r+0x21c>)
 8003e20:	f7fc fa06 	bl	8000230 <memchr>
 8003e24:	9a04      	ldr	r2, [sp, #16]
 8003e26:	b9d8      	cbnz	r0, 8003e60 <_vfiprintf_r+0x110>
 8003e28:	06d1      	lsls	r1, r2, #27
 8003e2a:	bf44      	itt	mi
 8003e2c:	2320      	movmi	r3, #32
 8003e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e32:	0713      	lsls	r3, r2, #28
 8003e34:	bf44      	itt	mi
 8003e36:	232b      	movmi	r3, #43	@ 0x2b
 8003e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e40:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e42:	d015      	beq.n	8003e70 <_vfiprintf_r+0x120>
 8003e44:	9a07      	ldr	r2, [sp, #28]
 8003e46:	4654      	mov	r4, sl
 8003e48:	2000      	movs	r0, #0
 8003e4a:	f04f 0c0a 	mov.w	ip, #10
 8003e4e:	4621      	mov	r1, r4
 8003e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e54:	3b30      	subs	r3, #48	@ 0x30
 8003e56:	2b09      	cmp	r3, #9
 8003e58:	d94b      	bls.n	8003ef2 <_vfiprintf_r+0x1a2>
 8003e5a:	b1b0      	cbz	r0, 8003e8a <_vfiprintf_r+0x13a>
 8003e5c:	9207      	str	r2, [sp, #28]
 8003e5e:	e014      	b.n	8003e8a <_vfiprintf_r+0x13a>
 8003e60:	eba0 0308 	sub.w	r3, r0, r8
 8003e64:	fa09 f303 	lsl.w	r3, r9, r3
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	9304      	str	r3, [sp, #16]
 8003e6c:	46a2      	mov	sl, r4
 8003e6e:	e7d2      	b.n	8003e16 <_vfiprintf_r+0xc6>
 8003e70:	9b03      	ldr	r3, [sp, #12]
 8003e72:	1d19      	adds	r1, r3, #4
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	9103      	str	r1, [sp, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bfbb      	ittet	lt
 8003e7c:	425b      	neglt	r3, r3
 8003e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8003e82:	9307      	strge	r3, [sp, #28]
 8003e84:	9307      	strlt	r3, [sp, #28]
 8003e86:	bfb8      	it	lt
 8003e88:	9204      	strlt	r2, [sp, #16]
 8003e8a:	7823      	ldrb	r3, [r4, #0]
 8003e8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e8e:	d10a      	bne.n	8003ea6 <_vfiprintf_r+0x156>
 8003e90:	7863      	ldrb	r3, [r4, #1]
 8003e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e94:	d132      	bne.n	8003efc <_vfiprintf_r+0x1ac>
 8003e96:	9b03      	ldr	r3, [sp, #12]
 8003e98:	1d1a      	adds	r2, r3, #4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	9203      	str	r2, [sp, #12]
 8003e9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ea2:	3402      	adds	r4, #2
 8003ea4:	9305      	str	r3, [sp, #20]
 8003ea6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003f7c <_vfiprintf_r+0x22c>
 8003eaa:	7821      	ldrb	r1, [r4, #0]
 8003eac:	2203      	movs	r2, #3
 8003eae:	4650      	mov	r0, sl
 8003eb0:	f7fc f9be 	bl	8000230 <memchr>
 8003eb4:	b138      	cbz	r0, 8003ec6 <_vfiprintf_r+0x176>
 8003eb6:	9b04      	ldr	r3, [sp, #16]
 8003eb8:	eba0 000a 	sub.w	r0, r0, sl
 8003ebc:	2240      	movs	r2, #64	@ 0x40
 8003ebe:	4082      	lsls	r2, r0
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	3401      	adds	r4, #1
 8003ec4:	9304      	str	r3, [sp, #16]
 8003ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eca:	4829      	ldr	r0, [pc, #164]	@ (8003f70 <_vfiprintf_r+0x220>)
 8003ecc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ed0:	2206      	movs	r2, #6
 8003ed2:	f7fc f9ad 	bl	8000230 <memchr>
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	d03f      	beq.n	8003f5a <_vfiprintf_r+0x20a>
 8003eda:	4b26      	ldr	r3, [pc, #152]	@ (8003f74 <_vfiprintf_r+0x224>)
 8003edc:	bb1b      	cbnz	r3, 8003f26 <_vfiprintf_r+0x1d6>
 8003ede:	9b03      	ldr	r3, [sp, #12]
 8003ee0:	3307      	adds	r3, #7
 8003ee2:	f023 0307 	bic.w	r3, r3, #7
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	9303      	str	r3, [sp, #12]
 8003eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003eec:	443b      	add	r3, r7
 8003eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ef0:	e76a      	b.n	8003dc8 <_vfiprintf_r+0x78>
 8003ef2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	2001      	movs	r0, #1
 8003efa:	e7a8      	b.n	8003e4e <_vfiprintf_r+0xfe>
 8003efc:	2300      	movs	r3, #0
 8003efe:	3401      	adds	r4, #1
 8003f00:	9305      	str	r3, [sp, #20]
 8003f02:	4619      	mov	r1, r3
 8003f04:	f04f 0c0a 	mov.w	ip, #10
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f0e:	3a30      	subs	r2, #48	@ 0x30
 8003f10:	2a09      	cmp	r2, #9
 8003f12:	d903      	bls.n	8003f1c <_vfiprintf_r+0x1cc>
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0c6      	beq.n	8003ea6 <_vfiprintf_r+0x156>
 8003f18:	9105      	str	r1, [sp, #20]
 8003f1a:	e7c4      	b.n	8003ea6 <_vfiprintf_r+0x156>
 8003f1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f20:	4604      	mov	r4, r0
 8003f22:	2301      	movs	r3, #1
 8003f24:	e7f0      	b.n	8003f08 <_vfiprintf_r+0x1b8>
 8003f26:	ab03      	add	r3, sp, #12
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	462a      	mov	r2, r5
 8003f2c:	4b12      	ldr	r3, [pc, #72]	@ (8003f78 <_vfiprintf_r+0x228>)
 8003f2e:	a904      	add	r1, sp, #16
 8003f30:	4630      	mov	r0, r6
 8003f32:	f3af 8000 	nop.w
 8003f36:	4607      	mov	r7, r0
 8003f38:	1c78      	adds	r0, r7, #1
 8003f3a:	d1d6      	bne.n	8003eea <_vfiprintf_r+0x19a>
 8003f3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f3e:	07d9      	lsls	r1, r3, #31
 8003f40:	d405      	bmi.n	8003f4e <_vfiprintf_r+0x1fe>
 8003f42:	89ab      	ldrh	r3, [r5, #12]
 8003f44:	059a      	lsls	r2, r3, #22
 8003f46:	d402      	bmi.n	8003f4e <_vfiprintf_r+0x1fe>
 8003f48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f4a:	f7ff fddd 	bl	8003b08 <__retarget_lock_release_recursive>
 8003f4e:	89ab      	ldrh	r3, [r5, #12]
 8003f50:	065b      	lsls	r3, r3, #25
 8003f52:	f53f af1f 	bmi.w	8003d94 <_vfiprintf_r+0x44>
 8003f56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f58:	e71e      	b.n	8003d98 <_vfiprintf_r+0x48>
 8003f5a:	ab03      	add	r3, sp, #12
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	462a      	mov	r2, r5
 8003f60:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <_vfiprintf_r+0x228>)
 8003f62:	a904      	add	r1, sp, #16
 8003f64:	4630      	mov	r0, r6
 8003f66:	f000 f879 	bl	800405c <_printf_i>
 8003f6a:	e7e4      	b.n	8003f36 <_vfiprintf_r+0x1e6>
 8003f6c:	080046f8 	.word	0x080046f8
 8003f70:	08004702 	.word	0x08004702
 8003f74:	00000000 	.word	0x00000000
 8003f78:	08003d2b 	.word	0x08003d2b
 8003f7c:	080046fe 	.word	0x080046fe

08003f80 <_printf_common>:
 8003f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f84:	4616      	mov	r6, r2
 8003f86:	4698      	mov	r8, r3
 8003f88:	688a      	ldr	r2, [r1, #8]
 8003f8a:	690b      	ldr	r3, [r1, #16]
 8003f8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f90:	4293      	cmp	r3, r2
 8003f92:	bfb8      	it	lt
 8003f94:	4613      	movlt	r3, r2
 8003f96:	6033      	str	r3, [r6, #0]
 8003f98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f9c:	4607      	mov	r7, r0
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	b10a      	cbz	r2, 8003fa6 <_printf_common+0x26>
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	6033      	str	r3, [r6, #0]
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	0699      	lsls	r1, r3, #26
 8003faa:	bf42      	ittt	mi
 8003fac:	6833      	ldrmi	r3, [r6, #0]
 8003fae:	3302      	addmi	r3, #2
 8003fb0:	6033      	strmi	r3, [r6, #0]
 8003fb2:	6825      	ldr	r5, [r4, #0]
 8003fb4:	f015 0506 	ands.w	r5, r5, #6
 8003fb8:	d106      	bne.n	8003fc8 <_printf_common+0x48>
 8003fba:	f104 0a19 	add.w	sl, r4, #25
 8003fbe:	68e3      	ldr	r3, [r4, #12]
 8003fc0:	6832      	ldr	r2, [r6, #0]
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	42ab      	cmp	r3, r5
 8003fc6:	dc26      	bgt.n	8004016 <_printf_common+0x96>
 8003fc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fcc:	6822      	ldr	r2, [r4, #0]
 8003fce:	3b00      	subs	r3, #0
 8003fd0:	bf18      	it	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	0692      	lsls	r2, r2, #26
 8003fd6:	d42b      	bmi.n	8004030 <_printf_common+0xb0>
 8003fd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fdc:	4641      	mov	r1, r8
 8003fde:	4638      	mov	r0, r7
 8003fe0:	47c8      	blx	r9
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	d01e      	beq.n	8004024 <_printf_common+0xa4>
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	6922      	ldr	r2, [r4, #16]
 8003fea:	f003 0306 	and.w	r3, r3, #6
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	bf02      	ittt	eq
 8003ff2:	68e5      	ldreq	r5, [r4, #12]
 8003ff4:	6833      	ldreq	r3, [r6, #0]
 8003ff6:	1aed      	subeq	r5, r5, r3
 8003ff8:	68a3      	ldr	r3, [r4, #8]
 8003ffa:	bf0c      	ite	eq
 8003ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004000:	2500      	movne	r5, #0
 8004002:	4293      	cmp	r3, r2
 8004004:	bfc4      	itt	gt
 8004006:	1a9b      	subgt	r3, r3, r2
 8004008:	18ed      	addgt	r5, r5, r3
 800400a:	2600      	movs	r6, #0
 800400c:	341a      	adds	r4, #26
 800400e:	42b5      	cmp	r5, r6
 8004010:	d11a      	bne.n	8004048 <_printf_common+0xc8>
 8004012:	2000      	movs	r0, #0
 8004014:	e008      	b.n	8004028 <_printf_common+0xa8>
 8004016:	2301      	movs	r3, #1
 8004018:	4652      	mov	r2, sl
 800401a:	4641      	mov	r1, r8
 800401c:	4638      	mov	r0, r7
 800401e:	47c8      	blx	r9
 8004020:	3001      	adds	r0, #1
 8004022:	d103      	bne.n	800402c <_printf_common+0xac>
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800402c:	3501      	adds	r5, #1
 800402e:	e7c6      	b.n	8003fbe <_printf_common+0x3e>
 8004030:	18e1      	adds	r1, r4, r3
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	2030      	movs	r0, #48	@ 0x30
 8004036:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800403a:	4422      	add	r2, r4
 800403c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004040:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004044:	3302      	adds	r3, #2
 8004046:	e7c7      	b.n	8003fd8 <_printf_common+0x58>
 8004048:	2301      	movs	r3, #1
 800404a:	4622      	mov	r2, r4
 800404c:	4641      	mov	r1, r8
 800404e:	4638      	mov	r0, r7
 8004050:	47c8      	blx	r9
 8004052:	3001      	adds	r0, #1
 8004054:	d0e6      	beq.n	8004024 <_printf_common+0xa4>
 8004056:	3601      	adds	r6, #1
 8004058:	e7d9      	b.n	800400e <_printf_common+0x8e>
	...

0800405c <_printf_i>:
 800405c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004060:	7e0f      	ldrb	r7, [r1, #24]
 8004062:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004064:	2f78      	cmp	r7, #120	@ 0x78
 8004066:	4691      	mov	r9, r2
 8004068:	4680      	mov	r8, r0
 800406a:	460c      	mov	r4, r1
 800406c:	469a      	mov	sl, r3
 800406e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004072:	d807      	bhi.n	8004084 <_printf_i+0x28>
 8004074:	2f62      	cmp	r7, #98	@ 0x62
 8004076:	d80a      	bhi.n	800408e <_printf_i+0x32>
 8004078:	2f00      	cmp	r7, #0
 800407a:	f000 80d2 	beq.w	8004222 <_printf_i+0x1c6>
 800407e:	2f58      	cmp	r7, #88	@ 0x58
 8004080:	f000 80b9 	beq.w	80041f6 <_printf_i+0x19a>
 8004084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004088:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800408c:	e03a      	b.n	8004104 <_printf_i+0xa8>
 800408e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004092:	2b15      	cmp	r3, #21
 8004094:	d8f6      	bhi.n	8004084 <_printf_i+0x28>
 8004096:	a101      	add	r1, pc, #4	@ (adr r1, 800409c <_printf_i+0x40>)
 8004098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800409c:	080040f5 	.word	0x080040f5
 80040a0:	08004109 	.word	0x08004109
 80040a4:	08004085 	.word	0x08004085
 80040a8:	08004085 	.word	0x08004085
 80040ac:	08004085 	.word	0x08004085
 80040b0:	08004085 	.word	0x08004085
 80040b4:	08004109 	.word	0x08004109
 80040b8:	08004085 	.word	0x08004085
 80040bc:	08004085 	.word	0x08004085
 80040c0:	08004085 	.word	0x08004085
 80040c4:	08004085 	.word	0x08004085
 80040c8:	08004209 	.word	0x08004209
 80040cc:	08004133 	.word	0x08004133
 80040d0:	080041c3 	.word	0x080041c3
 80040d4:	08004085 	.word	0x08004085
 80040d8:	08004085 	.word	0x08004085
 80040dc:	0800422b 	.word	0x0800422b
 80040e0:	08004085 	.word	0x08004085
 80040e4:	08004133 	.word	0x08004133
 80040e8:	08004085 	.word	0x08004085
 80040ec:	08004085 	.word	0x08004085
 80040f0:	080041cb 	.word	0x080041cb
 80040f4:	6833      	ldr	r3, [r6, #0]
 80040f6:	1d1a      	adds	r2, r3, #4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6032      	str	r2, [r6, #0]
 80040fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004100:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004104:	2301      	movs	r3, #1
 8004106:	e09d      	b.n	8004244 <_printf_i+0x1e8>
 8004108:	6833      	ldr	r3, [r6, #0]
 800410a:	6820      	ldr	r0, [r4, #0]
 800410c:	1d19      	adds	r1, r3, #4
 800410e:	6031      	str	r1, [r6, #0]
 8004110:	0606      	lsls	r6, r0, #24
 8004112:	d501      	bpl.n	8004118 <_printf_i+0xbc>
 8004114:	681d      	ldr	r5, [r3, #0]
 8004116:	e003      	b.n	8004120 <_printf_i+0xc4>
 8004118:	0645      	lsls	r5, r0, #25
 800411a:	d5fb      	bpl.n	8004114 <_printf_i+0xb8>
 800411c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004120:	2d00      	cmp	r5, #0
 8004122:	da03      	bge.n	800412c <_printf_i+0xd0>
 8004124:	232d      	movs	r3, #45	@ 0x2d
 8004126:	426d      	negs	r5, r5
 8004128:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800412c:	4859      	ldr	r0, [pc, #356]	@ (8004294 <_printf_i+0x238>)
 800412e:	230a      	movs	r3, #10
 8004130:	e011      	b.n	8004156 <_printf_i+0xfa>
 8004132:	6821      	ldr	r1, [r4, #0]
 8004134:	6833      	ldr	r3, [r6, #0]
 8004136:	0608      	lsls	r0, r1, #24
 8004138:	f853 5b04 	ldr.w	r5, [r3], #4
 800413c:	d402      	bmi.n	8004144 <_printf_i+0xe8>
 800413e:	0649      	lsls	r1, r1, #25
 8004140:	bf48      	it	mi
 8004142:	b2ad      	uxthmi	r5, r5
 8004144:	2f6f      	cmp	r7, #111	@ 0x6f
 8004146:	4853      	ldr	r0, [pc, #332]	@ (8004294 <_printf_i+0x238>)
 8004148:	6033      	str	r3, [r6, #0]
 800414a:	bf14      	ite	ne
 800414c:	230a      	movne	r3, #10
 800414e:	2308      	moveq	r3, #8
 8004150:	2100      	movs	r1, #0
 8004152:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004156:	6866      	ldr	r6, [r4, #4]
 8004158:	60a6      	str	r6, [r4, #8]
 800415a:	2e00      	cmp	r6, #0
 800415c:	bfa2      	ittt	ge
 800415e:	6821      	ldrge	r1, [r4, #0]
 8004160:	f021 0104 	bicge.w	r1, r1, #4
 8004164:	6021      	strge	r1, [r4, #0]
 8004166:	b90d      	cbnz	r5, 800416c <_printf_i+0x110>
 8004168:	2e00      	cmp	r6, #0
 800416a:	d04b      	beq.n	8004204 <_printf_i+0x1a8>
 800416c:	4616      	mov	r6, r2
 800416e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004172:	fb03 5711 	mls	r7, r3, r1, r5
 8004176:	5dc7      	ldrb	r7, [r0, r7]
 8004178:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800417c:	462f      	mov	r7, r5
 800417e:	42bb      	cmp	r3, r7
 8004180:	460d      	mov	r5, r1
 8004182:	d9f4      	bls.n	800416e <_printf_i+0x112>
 8004184:	2b08      	cmp	r3, #8
 8004186:	d10b      	bne.n	80041a0 <_printf_i+0x144>
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	07df      	lsls	r7, r3, #31
 800418c:	d508      	bpl.n	80041a0 <_printf_i+0x144>
 800418e:	6923      	ldr	r3, [r4, #16]
 8004190:	6861      	ldr	r1, [r4, #4]
 8004192:	4299      	cmp	r1, r3
 8004194:	bfde      	ittt	le
 8004196:	2330      	movle	r3, #48	@ 0x30
 8004198:	f806 3c01 	strble.w	r3, [r6, #-1]
 800419c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041a0:	1b92      	subs	r2, r2, r6
 80041a2:	6122      	str	r2, [r4, #16]
 80041a4:	f8cd a000 	str.w	sl, [sp]
 80041a8:	464b      	mov	r3, r9
 80041aa:	aa03      	add	r2, sp, #12
 80041ac:	4621      	mov	r1, r4
 80041ae:	4640      	mov	r0, r8
 80041b0:	f7ff fee6 	bl	8003f80 <_printf_common>
 80041b4:	3001      	adds	r0, #1
 80041b6:	d14a      	bne.n	800424e <_printf_i+0x1f2>
 80041b8:	f04f 30ff 	mov.w	r0, #4294967295
 80041bc:	b004      	add	sp, #16
 80041be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	f043 0320 	orr.w	r3, r3, #32
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	4833      	ldr	r0, [pc, #204]	@ (8004298 <_printf_i+0x23c>)
 80041cc:	2778      	movs	r7, #120	@ 0x78
 80041ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	6831      	ldr	r1, [r6, #0]
 80041d6:	061f      	lsls	r7, r3, #24
 80041d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80041dc:	d402      	bmi.n	80041e4 <_printf_i+0x188>
 80041de:	065f      	lsls	r7, r3, #25
 80041e0:	bf48      	it	mi
 80041e2:	b2ad      	uxthmi	r5, r5
 80041e4:	6031      	str	r1, [r6, #0]
 80041e6:	07d9      	lsls	r1, r3, #31
 80041e8:	bf44      	itt	mi
 80041ea:	f043 0320 	orrmi.w	r3, r3, #32
 80041ee:	6023      	strmi	r3, [r4, #0]
 80041f0:	b11d      	cbz	r5, 80041fa <_printf_i+0x19e>
 80041f2:	2310      	movs	r3, #16
 80041f4:	e7ac      	b.n	8004150 <_printf_i+0xf4>
 80041f6:	4827      	ldr	r0, [pc, #156]	@ (8004294 <_printf_i+0x238>)
 80041f8:	e7e9      	b.n	80041ce <_printf_i+0x172>
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	f023 0320 	bic.w	r3, r3, #32
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	e7f6      	b.n	80041f2 <_printf_i+0x196>
 8004204:	4616      	mov	r6, r2
 8004206:	e7bd      	b.n	8004184 <_printf_i+0x128>
 8004208:	6833      	ldr	r3, [r6, #0]
 800420a:	6825      	ldr	r5, [r4, #0]
 800420c:	6961      	ldr	r1, [r4, #20]
 800420e:	1d18      	adds	r0, r3, #4
 8004210:	6030      	str	r0, [r6, #0]
 8004212:	062e      	lsls	r6, r5, #24
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	d501      	bpl.n	800421c <_printf_i+0x1c0>
 8004218:	6019      	str	r1, [r3, #0]
 800421a:	e002      	b.n	8004222 <_printf_i+0x1c6>
 800421c:	0668      	lsls	r0, r5, #25
 800421e:	d5fb      	bpl.n	8004218 <_printf_i+0x1bc>
 8004220:	8019      	strh	r1, [r3, #0]
 8004222:	2300      	movs	r3, #0
 8004224:	6123      	str	r3, [r4, #16]
 8004226:	4616      	mov	r6, r2
 8004228:	e7bc      	b.n	80041a4 <_printf_i+0x148>
 800422a:	6833      	ldr	r3, [r6, #0]
 800422c:	1d1a      	adds	r2, r3, #4
 800422e:	6032      	str	r2, [r6, #0]
 8004230:	681e      	ldr	r6, [r3, #0]
 8004232:	6862      	ldr	r2, [r4, #4]
 8004234:	2100      	movs	r1, #0
 8004236:	4630      	mov	r0, r6
 8004238:	f7fb fffa 	bl	8000230 <memchr>
 800423c:	b108      	cbz	r0, 8004242 <_printf_i+0x1e6>
 800423e:	1b80      	subs	r0, r0, r6
 8004240:	6060      	str	r0, [r4, #4]
 8004242:	6863      	ldr	r3, [r4, #4]
 8004244:	6123      	str	r3, [r4, #16]
 8004246:	2300      	movs	r3, #0
 8004248:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800424c:	e7aa      	b.n	80041a4 <_printf_i+0x148>
 800424e:	6923      	ldr	r3, [r4, #16]
 8004250:	4632      	mov	r2, r6
 8004252:	4649      	mov	r1, r9
 8004254:	4640      	mov	r0, r8
 8004256:	47d0      	blx	sl
 8004258:	3001      	adds	r0, #1
 800425a:	d0ad      	beq.n	80041b8 <_printf_i+0x15c>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	079b      	lsls	r3, r3, #30
 8004260:	d413      	bmi.n	800428a <_printf_i+0x22e>
 8004262:	68e0      	ldr	r0, [r4, #12]
 8004264:	9b03      	ldr	r3, [sp, #12]
 8004266:	4298      	cmp	r0, r3
 8004268:	bfb8      	it	lt
 800426a:	4618      	movlt	r0, r3
 800426c:	e7a6      	b.n	80041bc <_printf_i+0x160>
 800426e:	2301      	movs	r3, #1
 8004270:	4632      	mov	r2, r6
 8004272:	4649      	mov	r1, r9
 8004274:	4640      	mov	r0, r8
 8004276:	47d0      	blx	sl
 8004278:	3001      	adds	r0, #1
 800427a:	d09d      	beq.n	80041b8 <_printf_i+0x15c>
 800427c:	3501      	adds	r5, #1
 800427e:	68e3      	ldr	r3, [r4, #12]
 8004280:	9903      	ldr	r1, [sp, #12]
 8004282:	1a5b      	subs	r3, r3, r1
 8004284:	42ab      	cmp	r3, r5
 8004286:	dcf2      	bgt.n	800426e <_printf_i+0x212>
 8004288:	e7eb      	b.n	8004262 <_printf_i+0x206>
 800428a:	2500      	movs	r5, #0
 800428c:	f104 0619 	add.w	r6, r4, #25
 8004290:	e7f5      	b.n	800427e <_printf_i+0x222>
 8004292:	bf00      	nop
 8004294:	08004709 	.word	0x08004709
 8004298:	0800471a 	.word	0x0800471a

0800429c <__sflush_r>:
 800429c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a4:	0716      	lsls	r6, r2, #28
 80042a6:	4605      	mov	r5, r0
 80042a8:	460c      	mov	r4, r1
 80042aa:	d454      	bmi.n	8004356 <__sflush_r+0xba>
 80042ac:	684b      	ldr	r3, [r1, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	dc02      	bgt.n	80042b8 <__sflush_r+0x1c>
 80042b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	dd48      	ble.n	800434a <__sflush_r+0xae>
 80042b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042ba:	2e00      	cmp	r6, #0
 80042bc:	d045      	beq.n	800434a <__sflush_r+0xae>
 80042be:	2300      	movs	r3, #0
 80042c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80042c4:	682f      	ldr	r7, [r5, #0]
 80042c6:	6a21      	ldr	r1, [r4, #32]
 80042c8:	602b      	str	r3, [r5, #0]
 80042ca:	d030      	beq.n	800432e <__sflush_r+0x92>
 80042cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	0759      	lsls	r1, r3, #29
 80042d2:	d505      	bpl.n	80042e0 <__sflush_r+0x44>
 80042d4:	6863      	ldr	r3, [r4, #4]
 80042d6:	1ad2      	subs	r2, r2, r3
 80042d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80042da:	b10b      	cbz	r3, 80042e0 <__sflush_r+0x44>
 80042dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80042de:	1ad2      	subs	r2, r2, r3
 80042e0:	2300      	movs	r3, #0
 80042e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042e4:	6a21      	ldr	r1, [r4, #32]
 80042e6:	4628      	mov	r0, r5
 80042e8:	47b0      	blx	r6
 80042ea:	1c43      	adds	r3, r0, #1
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	d106      	bne.n	80042fe <__sflush_r+0x62>
 80042f0:	6829      	ldr	r1, [r5, #0]
 80042f2:	291d      	cmp	r1, #29
 80042f4:	d82b      	bhi.n	800434e <__sflush_r+0xb2>
 80042f6:	4a2a      	ldr	r2, [pc, #168]	@ (80043a0 <__sflush_r+0x104>)
 80042f8:	410a      	asrs	r2, r1
 80042fa:	07d6      	lsls	r6, r2, #31
 80042fc:	d427      	bmi.n	800434e <__sflush_r+0xb2>
 80042fe:	2200      	movs	r2, #0
 8004300:	6062      	str	r2, [r4, #4]
 8004302:	04d9      	lsls	r1, r3, #19
 8004304:	6922      	ldr	r2, [r4, #16]
 8004306:	6022      	str	r2, [r4, #0]
 8004308:	d504      	bpl.n	8004314 <__sflush_r+0x78>
 800430a:	1c42      	adds	r2, r0, #1
 800430c:	d101      	bne.n	8004312 <__sflush_r+0x76>
 800430e:	682b      	ldr	r3, [r5, #0]
 8004310:	b903      	cbnz	r3, 8004314 <__sflush_r+0x78>
 8004312:	6560      	str	r0, [r4, #84]	@ 0x54
 8004314:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004316:	602f      	str	r7, [r5, #0]
 8004318:	b1b9      	cbz	r1, 800434a <__sflush_r+0xae>
 800431a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800431e:	4299      	cmp	r1, r3
 8004320:	d002      	beq.n	8004328 <__sflush_r+0x8c>
 8004322:	4628      	mov	r0, r5
 8004324:	f7ff fbf2 	bl	8003b0c <_free_r>
 8004328:	2300      	movs	r3, #0
 800432a:	6363      	str	r3, [r4, #52]	@ 0x34
 800432c:	e00d      	b.n	800434a <__sflush_r+0xae>
 800432e:	2301      	movs	r3, #1
 8004330:	4628      	mov	r0, r5
 8004332:	47b0      	blx	r6
 8004334:	4602      	mov	r2, r0
 8004336:	1c50      	adds	r0, r2, #1
 8004338:	d1c9      	bne.n	80042ce <__sflush_r+0x32>
 800433a:	682b      	ldr	r3, [r5, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0c6      	beq.n	80042ce <__sflush_r+0x32>
 8004340:	2b1d      	cmp	r3, #29
 8004342:	d001      	beq.n	8004348 <__sflush_r+0xac>
 8004344:	2b16      	cmp	r3, #22
 8004346:	d11e      	bne.n	8004386 <__sflush_r+0xea>
 8004348:	602f      	str	r7, [r5, #0]
 800434a:	2000      	movs	r0, #0
 800434c:	e022      	b.n	8004394 <__sflush_r+0xf8>
 800434e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004352:	b21b      	sxth	r3, r3
 8004354:	e01b      	b.n	800438e <__sflush_r+0xf2>
 8004356:	690f      	ldr	r7, [r1, #16]
 8004358:	2f00      	cmp	r7, #0
 800435a:	d0f6      	beq.n	800434a <__sflush_r+0xae>
 800435c:	0793      	lsls	r3, r2, #30
 800435e:	680e      	ldr	r6, [r1, #0]
 8004360:	bf08      	it	eq
 8004362:	694b      	ldreq	r3, [r1, #20]
 8004364:	600f      	str	r7, [r1, #0]
 8004366:	bf18      	it	ne
 8004368:	2300      	movne	r3, #0
 800436a:	eba6 0807 	sub.w	r8, r6, r7
 800436e:	608b      	str	r3, [r1, #8]
 8004370:	f1b8 0f00 	cmp.w	r8, #0
 8004374:	dde9      	ble.n	800434a <__sflush_r+0xae>
 8004376:	6a21      	ldr	r1, [r4, #32]
 8004378:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800437a:	4643      	mov	r3, r8
 800437c:	463a      	mov	r2, r7
 800437e:	4628      	mov	r0, r5
 8004380:	47b0      	blx	r6
 8004382:	2800      	cmp	r0, #0
 8004384:	dc08      	bgt.n	8004398 <__sflush_r+0xfc>
 8004386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800438a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800438e:	81a3      	strh	r3, [r4, #12]
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004398:	4407      	add	r7, r0
 800439a:	eba8 0800 	sub.w	r8, r8, r0
 800439e:	e7e7      	b.n	8004370 <__sflush_r+0xd4>
 80043a0:	dfbffffe 	.word	0xdfbffffe

080043a4 <_fflush_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	690b      	ldr	r3, [r1, #16]
 80043a8:	4605      	mov	r5, r0
 80043aa:	460c      	mov	r4, r1
 80043ac:	b913      	cbnz	r3, 80043b4 <_fflush_r+0x10>
 80043ae:	2500      	movs	r5, #0
 80043b0:	4628      	mov	r0, r5
 80043b2:	bd38      	pop	{r3, r4, r5, pc}
 80043b4:	b118      	cbz	r0, 80043be <_fflush_r+0x1a>
 80043b6:	6a03      	ldr	r3, [r0, #32]
 80043b8:	b90b      	cbnz	r3, 80043be <_fflush_r+0x1a>
 80043ba:	f7ff fa9f 	bl	80038fc <__sinit>
 80043be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f3      	beq.n	80043ae <_fflush_r+0xa>
 80043c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80043c8:	07d0      	lsls	r0, r2, #31
 80043ca:	d404      	bmi.n	80043d6 <_fflush_r+0x32>
 80043cc:	0599      	lsls	r1, r3, #22
 80043ce:	d402      	bmi.n	80043d6 <_fflush_r+0x32>
 80043d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043d2:	f7ff fb98 	bl	8003b06 <__retarget_lock_acquire_recursive>
 80043d6:	4628      	mov	r0, r5
 80043d8:	4621      	mov	r1, r4
 80043da:	f7ff ff5f 	bl	800429c <__sflush_r>
 80043de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043e0:	07da      	lsls	r2, r3, #31
 80043e2:	4605      	mov	r5, r0
 80043e4:	d4e4      	bmi.n	80043b0 <_fflush_r+0xc>
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	059b      	lsls	r3, r3, #22
 80043ea:	d4e1      	bmi.n	80043b0 <_fflush_r+0xc>
 80043ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ee:	f7ff fb8b 	bl	8003b08 <__retarget_lock_release_recursive>
 80043f2:	e7dd      	b.n	80043b0 <_fflush_r+0xc>

080043f4 <__swbuf_r>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	460e      	mov	r6, r1
 80043f8:	4614      	mov	r4, r2
 80043fa:	4605      	mov	r5, r0
 80043fc:	b118      	cbz	r0, 8004406 <__swbuf_r+0x12>
 80043fe:	6a03      	ldr	r3, [r0, #32]
 8004400:	b90b      	cbnz	r3, 8004406 <__swbuf_r+0x12>
 8004402:	f7ff fa7b 	bl	80038fc <__sinit>
 8004406:	69a3      	ldr	r3, [r4, #24]
 8004408:	60a3      	str	r3, [r4, #8]
 800440a:	89a3      	ldrh	r3, [r4, #12]
 800440c:	071a      	lsls	r2, r3, #28
 800440e:	d501      	bpl.n	8004414 <__swbuf_r+0x20>
 8004410:	6923      	ldr	r3, [r4, #16]
 8004412:	b943      	cbnz	r3, 8004426 <__swbuf_r+0x32>
 8004414:	4621      	mov	r1, r4
 8004416:	4628      	mov	r0, r5
 8004418:	f000 f82a 	bl	8004470 <__swsetup_r>
 800441c:	b118      	cbz	r0, 8004426 <__swbuf_r+0x32>
 800441e:	f04f 37ff 	mov.w	r7, #4294967295
 8004422:	4638      	mov	r0, r7
 8004424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	6922      	ldr	r2, [r4, #16]
 800442a:	1a98      	subs	r0, r3, r2
 800442c:	6963      	ldr	r3, [r4, #20]
 800442e:	b2f6      	uxtb	r6, r6
 8004430:	4283      	cmp	r3, r0
 8004432:	4637      	mov	r7, r6
 8004434:	dc05      	bgt.n	8004442 <__swbuf_r+0x4e>
 8004436:	4621      	mov	r1, r4
 8004438:	4628      	mov	r0, r5
 800443a:	f7ff ffb3 	bl	80043a4 <_fflush_r>
 800443e:	2800      	cmp	r0, #0
 8004440:	d1ed      	bne.n	800441e <__swbuf_r+0x2a>
 8004442:	68a3      	ldr	r3, [r4, #8]
 8004444:	3b01      	subs	r3, #1
 8004446:	60a3      	str	r3, [r4, #8]
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	6022      	str	r2, [r4, #0]
 800444e:	701e      	strb	r6, [r3, #0]
 8004450:	6962      	ldr	r2, [r4, #20]
 8004452:	1c43      	adds	r3, r0, #1
 8004454:	429a      	cmp	r2, r3
 8004456:	d004      	beq.n	8004462 <__swbuf_r+0x6e>
 8004458:	89a3      	ldrh	r3, [r4, #12]
 800445a:	07db      	lsls	r3, r3, #31
 800445c:	d5e1      	bpl.n	8004422 <__swbuf_r+0x2e>
 800445e:	2e0a      	cmp	r6, #10
 8004460:	d1df      	bne.n	8004422 <__swbuf_r+0x2e>
 8004462:	4621      	mov	r1, r4
 8004464:	4628      	mov	r0, r5
 8004466:	f7ff ff9d 	bl	80043a4 <_fflush_r>
 800446a:	2800      	cmp	r0, #0
 800446c:	d0d9      	beq.n	8004422 <__swbuf_r+0x2e>
 800446e:	e7d6      	b.n	800441e <__swbuf_r+0x2a>

08004470 <__swsetup_r>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	4b29      	ldr	r3, [pc, #164]	@ (8004518 <__swsetup_r+0xa8>)
 8004474:	4605      	mov	r5, r0
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	460c      	mov	r4, r1
 800447a:	b118      	cbz	r0, 8004484 <__swsetup_r+0x14>
 800447c:	6a03      	ldr	r3, [r0, #32]
 800447e:	b90b      	cbnz	r3, 8004484 <__swsetup_r+0x14>
 8004480:	f7ff fa3c 	bl	80038fc <__sinit>
 8004484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004488:	0719      	lsls	r1, r3, #28
 800448a:	d422      	bmi.n	80044d2 <__swsetup_r+0x62>
 800448c:	06da      	lsls	r2, r3, #27
 800448e:	d407      	bmi.n	80044a0 <__swsetup_r+0x30>
 8004490:	2209      	movs	r2, #9
 8004492:	602a      	str	r2, [r5, #0]
 8004494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004498:	81a3      	strh	r3, [r4, #12]
 800449a:	f04f 30ff 	mov.w	r0, #4294967295
 800449e:	e033      	b.n	8004508 <__swsetup_r+0x98>
 80044a0:	0758      	lsls	r0, r3, #29
 80044a2:	d512      	bpl.n	80044ca <__swsetup_r+0x5a>
 80044a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044a6:	b141      	cbz	r1, 80044ba <__swsetup_r+0x4a>
 80044a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044ac:	4299      	cmp	r1, r3
 80044ae:	d002      	beq.n	80044b6 <__swsetup_r+0x46>
 80044b0:	4628      	mov	r0, r5
 80044b2:	f7ff fb2b 	bl	8003b0c <_free_r>
 80044b6:	2300      	movs	r3, #0
 80044b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80044ba:	89a3      	ldrh	r3, [r4, #12]
 80044bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80044c0:	81a3      	strh	r3, [r4, #12]
 80044c2:	2300      	movs	r3, #0
 80044c4:	6063      	str	r3, [r4, #4]
 80044c6:	6923      	ldr	r3, [r4, #16]
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	f043 0308 	orr.w	r3, r3, #8
 80044d0:	81a3      	strh	r3, [r4, #12]
 80044d2:	6923      	ldr	r3, [r4, #16]
 80044d4:	b94b      	cbnz	r3, 80044ea <__swsetup_r+0x7a>
 80044d6:	89a3      	ldrh	r3, [r4, #12]
 80044d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80044dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044e0:	d003      	beq.n	80044ea <__swsetup_r+0x7a>
 80044e2:	4621      	mov	r1, r4
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 f84f 	bl	8004588 <__smakebuf_r>
 80044ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ee:	f013 0201 	ands.w	r2, r3, #1
 80044f2:	d00a      	beq.n	800450a <__swsetup_r+0x9a>
 80044f4:	2200      	movs	r2, #0
 80044f6:	60a2      	str	r2, [r4, #8]
 80044f8:	6962      	ldr	r2, [r4, #20]
 80044fa:	4252      	negs	r2, r2
 80044fc:	61a2      	str	r2, [r4, #24]
 80044fe:	6922      	ldr	r2, [r4, #16]
 8004500:	b942      	cbnz	r2, 8004514 <__swsetup_r+0xa4>
 8004502:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004506:	d1c5      	bne.n	8004494 <__swsetup_r+0x24>
 8004508:	bd38      	pop	{r3, r4, r5, pc}
 800450a:	0799      	lsls	r1, r3, #30
 800450c:	bf58      	it	pl
 800450e:	6962      	ldrpl	r2, [r4, #20]
 8004510:	60a2      	str	r2, [r4, #8]
 8004512:	e7f4      	b.n	80044fe <__swsetup_r+0x8e>
 8004514:	2000      	movs	r0, #0
 8004516:	e7f7      	b.n	8004508 <__swsetup_r+0x98>
 8004518:	20000028 	.word	0x20000028

0800451c <_sbrk_r>:
 800451c:	b538      	push	{r3, r4, r5, lr}
 800451e:	4d06      	ldr	r5, [pc, #24]	@ (8004538 <_sbrk_r+0x1c>)
 8004520:	2300      	movs	r3, #0
 8004522:	4604      	mov	r4, r0
 8004524:	4608      	mov	r0, r1
 8004526:	602b      	str	r3, [r5, #0]
 8004528:	f7fc fb68 	bl	8000bfc <_sbrk>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	d102      	bne.n	8004536 <_sbrk_r+0x1a>
 8004530:	682b      	ldr	r3, [r5, #0]
 8004532:	b103      	cbz	r3, 8004536 <_sbrk_r+0x1a>
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	bd38      	pop	{r3, r4, r5, pc}
 8004538:	200002f4 	.word	0x200002f4

0800453c <__swhatbuf_r>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	460c      	mov	r4, r1
 8004540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004544:	2900      	cmp	r1, #0
 8004546:	b096      	sub	sp, #88	@ 0x58
 8004548:	4615      	mov	r5, r2
 800454a:	461e      	mov	r6, r3
 800454c:	da0d      	bge.n	800456a <__swhatbuf_r+0x2e>
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004554:	f04f 0100 	mov.w	r1, #0
 8004558:	bf14      	ite	ne
 800455a:	2340      	movne	r3, #64	@ 0x40
 800455c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004560:	2000      	movs	r0, #0
 8004562:	6031      	str	r1, [r6, #0]
 8004564:	602b      	str	r3, [r5, #0]
 8004566:	b016      	add	sp, #88	@ 0x58
 8004568:	bd70      	pop	{r4, r5, r6, pc}
 800456a:	466a      	mov	r2, sp
 800456c:	f000 f848 	bl	8004600 <_fstat_r>
 8004570:	2800      	cmp	r0, #0
 8004572:	dbec      	blt.n	800454e <__swhatbuf_r+0x12>
 8004574:	9901      	ldr	r1, [sp, #4]
 8004576:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800457a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800457e:	4259      	negs	r1, r3
 8004580:	4159      	adcs	r1, r3
 8004582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004586:	e7eb      	b.n	8004560 <__swhatbuf_r+0x24>

08004588 <__smakebuf_r>:
 8004588:	898b      	ldrh	r3, [r1, #12]
 800458a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800458c:	079d      	lsls	r5, r3, #30
 800458e:	4606      	mov	r6, r0
 8004590:	460c      	mov	r4, r1
 8004592:	d507      	bpl.n	80045a4 <__smakebuf_r+0x1c>
 8004594:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	6123      	str	r3, [r4, #16]
 800459c:	2301      	movs	r3, #1
 800459e:	6163      	str	r3, [r4, #20]
 80045a0:	b003      	add	sp, #12
 80045a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a4:	ab01      	add	r3, sp, #4
 80045a6:	466a      	mov	r2, sp
 80045a8:	f7ff ffc8 	bl	800453c <__swhatbuf_r>
 80045ac:	9f00      	ldr	r7, [sp, #0]
 80045ae:	4605      	mov	r5, r0
 80045b0:	4639      	mov	r1, r7
 80045b2:	4630      	mov	r0, r6
 80045b4:	f7ff fb16 	bl	8003be4 <_malloc_r>
 80045b8:	b948      	cbnz	r0, 80045ce <__smakebuf_r+0x46>
 80045ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045be:	059a      	lsls	r2, r3, #22
 80045c0:	d4ee      	bmi.n	80045a0 <__smakebuf_r+0x18>
 80045c2:	f023 0303 	bic.w	r3, r3, #3
 80045c6:	f043 0302 	orr.w	r3, r3, #2
 80045ca:	81a3      	strh	r3, [r4, #12]
 80045cc:	e7e2      	b.n	8004594 <__smakebuf_r+0xc>
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	6020      	str	r0, [r4, #0]
 80045d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045d6:	81a3      	strh	r3, [r4, #12]
 80045d8:	9b01      	ldr	r3, [sp, #4]
 80045da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80045de:	b15b      	cbz	r3, 80045f8 <__smakebuf_r+0x70>
 80045e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045e4:	4630      	mov	r0, r6
 80045e6:	f000 f81d 	bl	8004624 <_isatty_r>
 80045ea:	b128      	cbz	r0, 80045f8 <__smakebuf_r+0x70>
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	81a3      	strh	r3, [r4, #12]
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	431d      	orrs	r5, r3
 80045fc:	81a5      	strh	r5, [r4, #12]
 80045fe:	e7cf      	b.n	80045a0 <__smakebuf_r+0x18>

08004600 <_fstat_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	4d07      	ldr	r5, [pc, #28]	@ (8004620 <_fstat_r+0x20>)
 8004604:	2300      	movs	r3, #0
 8004606:	4604      	mov	r4, r0
 8004608:	4608      	mov	r0, r1
 800460a:	4611      	mov	r1, r2
 800460c:	602b      	str	r3, [r5, #0]
 800460e:	f7fc facd 	bl	8000bac <_fstat>
 8004612:	1c43      	adds	r3, r0, #1
 8004614:	d102      	bne.n	800461c <_fstat_r+0x1c>
 8004616:	682b      	ldr	r3, [r5, #0]
 8004618:	b103      	cbz	r3, 800461c <_fstat_r+0x1c>
 800461a:	6023      	str	r3, [r4, #0]
 800461c:	bd38      	pop	{r3, r4, r5, pc}
 800461e:	bf00      	nop
 8004620:	200002f4 	.word	0x200002f4

08004624 <_isatty_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	4d06      	ldr	r5, [pc, #24]	@ (8004640 <_isatty_r+0x1c>)
 8004628:	2300      	movs	r3, #0
 800462a:	4604      	mov	r4, r0
 800462c:	4608      	mov	r0, r1
 800462e:	602b      	str	r3, [r5, #0]
 8004630:	f7fc facc 	bl	8000bcc <_isatty>
 8004634:	1c43      	adds	r3, r0, #1
 8004636:	d102      	bne.n	800463e <_isatty_r+0x1a>
 8004638:	682b      	ldr	r3, [r5, #0]
 800463a:	b103      	cbz	r3, 800463e <_isatty_r+0x1a>
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	bd38      	pop	{r3, r4, r5, pc}
 8004640:	200002f4 	.word	0x200002f4

08004644 <_init>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	bf00      	nop
 8004648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464a:	bc08      	pop	{r3}
 800464c:	469e      	mov	lr, r3
 800464e:	4770      	bx	lr

08004650 <_fini>:
 8004650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004652:	bf00      	nop
 8004654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004656:	bc08      	pop	{r3}
 8004658:	469e      	mov	lr, r3
 800465a:	4770      	bx	lr
