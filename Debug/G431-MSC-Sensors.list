
G431-MSC-Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049ec  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004bcc  08004bcc  00005bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd8  08004cd8  00006078  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd8  08004cd8  00005cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce0  08004ce0  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce0  08004ce0  00005ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ce4  08004ce4  00005ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08004ce8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000078  08004d60  00006078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08004d60  00006304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010485  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023de  00000000  00000000  0001652d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00018910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a61  00000000  00000000  00019680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e92d  00000000  00000000  0001a0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011aaf  00000000  00000000  00038a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb55b  00000000  00000000  0004a4bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105a18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb0  00000000  00000000  00105a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0010990c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004bb4 	.word	0x08004bb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08004bb4 	.word	0x08004bb4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005c4:	f000 fb65 	bl	8000c92 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005c8:	f000 f810 	bl	80005ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005cc:	f000 f8e4 	bl	8000798 <MX_GPIO_Init>
	MX_I2C1_Init();
 80005d0:	f000 f858 	bl	8000684 <MX_I2C1_Init>
	MX_LPUART1_UART_Init();
 80005d4:	f000 f896 	bl	8000704 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	setup();
 80005d8:	f003 facc 	bl	8003b74 <setup>
	checkMPU9250Identity();
 80005dc:	f003 fb30 	bl	8003c40 <checkMPU9250Identity>
	verifySensor();
 80005e0:	f003 fb06 	bl	8003bf0 <verifySensor>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		test_LEDs(50);
 80005e4:	2032      	movs	r0, #50	@ 0x32
 80005e6:	f003 faf3 	bl	8003bd0 <test_LEDs>
 80005ea:	e7fb      	b.n	80005e4 <main+0x24>

080005ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0318 	add.w	r3, r7, #24
 80005f6:	2238      	movs	r2, #56	@ 0x38
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fd56 	bl	80040ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800060e:	2000      	movs	r0, #0
 8000610:	f001 fc12 	bl	8001e38 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061e:	2340      	movs	r3, #64	@ 0x40
 8000620:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800062a:	2304      	movs	r3, #4
 800062c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800062e:	2355      	movs	r3, #85	@ 0x55
 8000630:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fcac 	bl	8001fa0 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x66>
	{
		Error_Handler();
 800064e:	f000 f909 	bl	8000864 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2303      	movs	r3, #3
 8000658:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2104      	movs	r1, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f001 ffaa 	bl	80025c4 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000676:	f000 f8f5 	bl	8000864 <Error_Handler>
	}
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	@ 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <MX_I2C1_Init+0x74>)
 800068a:	4a1c      	ldr	r2, [pc, #112]	@ (80006fc <MX_I2C1_Init+0x78>)
 800068c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x40B285C2;
 800068e:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_I2C1_Init+0x74>)
 8000690:	4a1b      	ldr	r2, [pc, #108]	@ (8000700 <MX_I2C1_Init+0x7c>)
 8000692:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_I2C1_Init+0x74>)
 800069c:	2201      	movs	r2, #1
 800069e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006be:	480e      	ldr	r0, [pc, #56]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006c0:	f000 fe12 	bl	80012e8 <HAL_I2C_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80006ca:	f000 f8cb 	bl	8000864 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006d2:	f001 fb19 	bl	8001d08 <HAL_I2CEx_ConfigAnalogFilter>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80006dc:	f000 f8c2 	bl	8000864 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006e0:	2100      	movs	r1, #0
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006e4:	f001 fb5b 	bl	8001d9e <HAL_I2CEx_ConfigDigitalFilter>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80006ee:	f000 f8b9 	bl	8000864 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000094 	.word	0x20000094
 80006fc:	40005400 	.word	0x40005400
 8000700:	40b285c2 	.word	0x40b285c2

08000704 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000708:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_LPUART1_UART_Init+0x8c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	@ (8000794 <MX_LPUART1_UART_Init+0x90>)
 800070c:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_LPUART1_UART_Init+0x8c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_LPUART1_UART_Init+0x8c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <MX_LPUART1_UART_Init+0x8c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_LPUART1_UART_Init+0x8c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_LPUART1_UART_Init+0x8c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_LPUART1_UART_Init+0x8c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_LPUART1_UART_Init+0x8c>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <MX_LPUART1_UART_Init+0x8c>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_LPUART1_UART_Init+0x8c>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000746:	4812      	ldr	r0, [pc, #72]	@ (8000790 <MX_LPUART1_UART_Init+0x8c>)
 8000748:	f002 fb48 	bl	8002ddc <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_LPUART1_UART_Init+0x52>
	{
		Error_Handler();
 8000752:	f000 f887 	bl	8000864 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000756:	2100      	movs	r1, #0
 8000758:	480d      	ldr	r0, [pc, #52]	@ (8000790 <MX_LPUART1_UART_Init+0x8c>)
 800075a:	f003 f941 	bl	80039e0 <HAL_UARTEx_SetTxFifoThreshold>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_LPUART1_UART_Init+0x64>
	{
		Error_Handler();
 8000764:	f000 f87e 	bl	8000864 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000768:	2100      	movs	r1, #0
 800076a:	4809      	ldr	r0, [pc, #36]	@ (8000790 <MX_LPUART1_UART_Init+0x8c>)
 800076c:	f003 f976 	bl	8003a5c <HAL_UARTEx_SetRxFifoThreshold>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_LPUART1_UART_Init+0x76>
	{
		Error_Handler();
 8000776:	f000 f875 	bl	8000864 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_LPUART1_UART_Init+0x8c>)
 800077c:	f003 f8f7 	bl	800396e <HAL_UARTEx_DisableFifoMode>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_LPUART1_UART_Init+0x86>
	{
		Error_Handler();
 8000786:	f000 f86d 	bl	8000864 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000e8 	.word	0x200000e8
 8000794:	40008000 	.word	0x40008000

08000798 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b2b      	ldr	r3, [pc, #172]	@ (800085c <MX_GPIO_Init+0xc4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	4a2a      	ldr	r2, [pc, #168]	@ (800085c <MX_GPIO_Init+0xc4>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ba:	4b28      	ldr	r3, [pc, #160]	@ (800085c <MX_GPIO_Init+0xc4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80007c6:	4b25      	ldr	r3, [pc, #148]	@ (800085c <MX_GPIO_Init+0xc4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	4a24      	ldr	r2, [pc, #144]	@ (800085c <MX_GPIO_Init+0xc4>)
 80007cc:	f043 0320 	orr.w	r3, r3, #32
 80007d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d2:	4b22      	ldr	r3, [pc, #136]	@ (800085c <MX_GPIO_Init+0xc4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	f003 0320 	and.w	r3, r3, #32
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <MX_GPIO_Init+0xc4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	4a1e      	ldr	r2, [pc, #120]	@ (800085c <MX_GPIO_Init+0xc4>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ea:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <MX_GPIO_Init+0xc4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b19      	ldr	r3, [pc, #100]	@ (800085c <MX_GPIO_Init+0xc4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	4a18      	ldr	r2, [pc, #96]	@ (800085c <MX_GPIO_Init+0xc4>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000802:	4b16      	ldr	r3, [pc, #88]	@ (800085c <MX_GPIO_Init+0xc4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2120      	movs	r1, #32
 8000812:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000816:	f000 fd35 	bl	8001284 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800081a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	480c      	ldr	r0, [pc, #48]	@ (8000860 <MX_GPIO_Init+0xc8>)
 8000830:	f000 fba6 	bl	8000f80 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000834:	2320      	movs	r3, #32
 8000836:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084e:	f000 fb97 	bl	8000f80 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	@ 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000
 8000860:	48000800 	.word	0x48000800

08000864 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <Error_Handler+0x8>

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <HAL_MspInit+0x44>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087a:	4a0e      	ldr	r2, [pc, #56]	@ (80008b4 <HAL_MspInit+0x44>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6613      	str	r3, [r2, #96]	@ 0x60
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <HAL_MspInit+0x44>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <HAL_MspInit+0x44>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000892:	4a08      	ldr	r2, [pc, #32]	@ (80008b4 <HAL_MspInit+0x44>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000898:	6593      	str	r3, [r2, #88]	@ 0x58
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_MspInit+0x44>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800089e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008a6:	f001 fb6b 	bl	8001f80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09c      	sub	sp, #112	@ 0x70
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d0:	f107 0318 	add.w	r3, r7, #24
 80008d4:	2244      	movs	r2, #68	@ 0x44
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 fbe7 	bl	80040ac <memset>
  if(hi2c->Instance==I2C1)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a2d      	ldr	r2, [pc, #180]	@ (8000998 <HAL_I2C_MspInit+0xe0>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d153      	bne.n	8000990 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008e8:	2340      	movs	r3, #64	@ 0x40
 80008ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 f881 	bl	80029fc <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000900:	f7ff ffb0 	bl	8000864 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b25      	ldr	r3, [pc, #148]	@ (800099c <HAL_I2C_MspInit+0xe4>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000908:	4a24      	ldr	r2, [pc, #144]	@ (800099c <HAL_I2C_MspInit+0xe4>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000910:	4b22      	ldr	r3, [pc, #136]	@ (800099c <HAL_I2C_MspInit+0xe4>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091c:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <HAL_I2C_MspInit+0xe4>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000920:	4a1e      	ldr	r2, [pc, #120]	@ (800099c <HAL_I2C_MspInit+0xe4>)
 8000922:	f043 0302 	orr.w	r3, r3, #2
 8000926:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000928:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <HAL_I2C_MspInit+0xe4>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092c:	f003 0302 	and.w	r3, r3, #2
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000934:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000938:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093a:	2312      	movs	r3, #18
 800093c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000946:	2304      	movs	r3, #4
 8000948:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000954:	f000 fb14 	bl	8000f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000958:	2380      	movs	r3, #128	@ 0x80
 800095a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095c:	2312      	movs	r3, #18
 800095e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000968:	2304      	movs	r3, #4
 800096a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000970:	4619      	mov	r1, r3
 8000972:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_I2C_MspInit+0xe8>)
 8000974:	f000 fb04 	bl	8000f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_I2C_MspInit+0xe4>)
 800097a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097c:	4a07      	ldr	r2, [pc, #28]	@ (800099c <HAL_I2C_MspInit+0xe4>)
 800097e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000982:	6593      	str	r3, [r2, #88]	@ 0x58
 8000984:	4b05      	ldr	r3, [pc, #20]	@ (800099c <HAL_I2C_MspInit+0xe4>)
 8000986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000988:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000990:	bf00      	nop
 8000992:	3770      	adds	r7, #112	@ 0x70
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40005400 	.word	0x40005400
 800099c:	40021000 	.word	0x40021000
 80009a0:	48000400 	.word	0x48000400

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09a      	sub	sp, #104	@ 0x68
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	2244      	movs	r2, #68	@ 0x44
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f003 fb71 	bl	80040ac <memset>
  if(huart->Instance==LPUART1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a1f      	ldr	r2, [pc, #124]	@ (8000a4c <HAL_UART_MspInit+0xa8>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d136      	bne.n	8000a42 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009d4:	2320      	movs	r3, #32
 80009d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 f80b 	bl	80029fc <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009ec:	f7ff ff3a 	bl	8000864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009f0:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <HAL_UART_MspInit+0xac>)
 80009f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009f4:	4a16      	ldr	r2, [pc, #88]	@ (8000a50 <HAL_UART_MspInit+0xac>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80009fc:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <HAL_UART_MspInit+0xac>)
 80009fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <HAL_UART_MspInit+0xac>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0c:	4a10      	ldr	r2, [pc, #64]	@ (8000a50 <HAL_UART_MspInit+0xac>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a14:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <HAL_UART_MspInit+0xac>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a20:	230c      	movs	r3, #12
 8000a22:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a30:	230c      	movs	r3, #12
 8000a32:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3e:	f000 fa9f 	bl	8000f80 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000a42:	bf00      	nop
 8000a44:	3768      	adds	r7, #104	@ 0x68
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40008000 	.word	0x40008000
 8000a50:	40021000 	.word	0x40021000

08000a54 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000a5c:	1d39      	adds	r1, r7, #4
 8000a5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a62:	2201      	movs	r2, #1
 8000a64:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <__io_putchar+0x20>)
 8000a66:	f002 fa09 	bl	8002e7c <HAL_UART_Transmit>

  return ch;
 8000a6a:	687b      	ldr	r3, [r7, #4]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200000e8 	.word	0x200000e8

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <MemManage_Handler+0x4>

08000a90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <UsageFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ace:	f000 f933 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	e00a      	b.n	8000afe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae8:	f3af 8000 	nop.w
 8000aec:	4601      	mov	r1, r0
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	60ba      	str	r2, [r7, #8]
 8000af4:	b2ca      	uxtb	r2, r1
 8000af6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3301      	adds	r3, #1
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	dbf0      	blt.n	8000ae8 <_read+0x12>
  }

  return len;
 8000b06:	687b      	ldr	r3, [r7, #4]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	e009      	b.n	8000b36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1c5a      	adds	r2, r3, #1
 8000b26:	60ba      	str	r2, [r7, #8]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ff92 	bl	8000a54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	3301      	adds	r3, #1
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	dbf1      	blt.n	8000b22 <_write+0x12>
  }
  return len;
 8000b3e:	687b      	ldr	r3, [r7, #4]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_close>:

int _close(int file)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b70:	605a      	str	r2, [r3, #4]
  return 0;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <_isatty>:

int _isatty(int file)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b88:	2301      	movs	r3, #1
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b085      	sub	sp, #20
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	@ (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d207      	bcs.n	8000bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be0:	f003 fab2 	bl	8004148 <__errno>
 8000be4:	4603      	mov	r3, r0
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <_sbrk+0x64>)
 8000c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20008000 	.word	0x20008000
 8000c10:	00000400 	.word	0x00000400
 8000c14:	2000017c 	.word	0x2000017c
 8000c18:	20000308 	.word	0x20000308

08000c1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c40:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c44:	f7ff ffea 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	@ (8000c80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <LoopForever+0xe>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	@ (8000c8c <LoopForever+0x16>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f003 fa71 	bl	8004154 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c72:	f7ff fca5 	bl	80005c0 <main>

08000c76 <LoopForever>:

LoopForever:
    b LoopForever
 8000c76:	e7fe      	b.n	8000c76 <LoopForever>
  ldr   r0, =_estack
 8000c78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c84:	08004ce8 	.word	0x08004ce8
  ldr r2, =_sbss
 8000c88:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c8c:	20000304 	.word	0x20000304

08000c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC1_2_IRQHandler>

08000c92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f93d 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f80e 	bl	8000cc4 <HAL_InitTick>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	e001      	b.n	8000cb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb4:	f7ff fddc 	bl	8000870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]

}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cd0:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <HAL_InitTick+0x68>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d022      	beq.n	8000d1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <HAL_InitTick+0x6c>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <HAL_InitTick+0x68>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f93a 	bl	8000f66 <HAL_SYSTICK_Config>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d10f      	bne.n	8000d18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b0f      	cmp	r3, #15
 8000cfc:	d809      	bhi.n	8000d12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	f04f 30ff 	mov.w	r0, #4294967295
 8000d06:	f000 f914 	bl	8000f32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <HAL_InitTick+0x70>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	e007      	b.n	8000d22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e004      	b.n	8000d22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
 8000d1c:	e001      	b.n	8000d22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000004 	.word	0x20000004

08000d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <HAL_IncTick+0x1c>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <HAL_IncTick+0x20>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a03      	ldr	r2, [pc, #12]	@ (8000d54 <HAL_IncTick+0x1c>)
 8000d48:	6013      	str	r3, [r2, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	20000180 	.word	0x20000180
 8000d58:	20000008 	.word	0x20000008

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000180 	.word	0x20000180

08000d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff ffee 	bl	8000d5c <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d004      	beq.n	8000d98 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <HAL_Delay+0x40>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	4413      	add	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d98:	bf00      	nop
 8000d9a:	f7ff ffdf 	bl	8000d5c <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d8f7      	bhi.n	8000d9a <HAL_Delay+0x26>
  {
  }
}
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000008 	.word	0x20000008

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	@ (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	@ (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	@ 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	@ 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee8:	d301      	bcc.n	8000eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00f      	b.n	8000f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eee:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <SysTick_Config+0x40>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f7ff ff8e 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <SysTick_Config+0x40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f06:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <SysTick_Config+0x40>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff47 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff5e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff90 	bl	8000e70 <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5f 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffb2 	bl	8000ed8 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f8e:	e15a      	b.n	8001246 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2101      	movs	r1, #1
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 814c 	beq.w	8001240 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d005      	beq.n	8000fc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d130      	bne.n	8001022 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	f003 0201 	and.w	r2, r3, #1
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b03      	cmp	r3, #3
 800102c:	d017      	beq.n	800105e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d123      	bne.n	80010b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	691a      	ldr	r2, [r3, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	6939      	ldr	r1, [r7, #16]
 80010ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0203 	and.w	r2, r3, #3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 80a6 	beq.w	8001240 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001264 <HAL_GPIO_Init+0x2e4>)
 80010f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f8:	4a5a      	ldr	r2, [pc, #360]	@ (8001264 <HAL_GPIO_Init+0x2e4>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001100:	4b58      	ldr	r3, [pc, #352]	@ (8001264 <HAL_GPIO_Init+0x2e4>)
 8001102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800110c:	4a56      	ldr	r2, [pc, #344]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001136:	d01f      	beq.n	8001178 <HAL_GPIO_Init+0x1f8>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a4c      	ldr	r2, [pc, #304]	@ (800126c <HAL_GPIO_Init+0x2ec>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d019      	beq.n	8001174 <HAL_GPIO_Init+0x1f4>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a4b      	ldr	r2, [pc, #300]	@ (8001270 <HAL_GPIO_Init+0x2f0>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d013      	beq.n	8001170 <HAL_GPIO_Init+0x1f0>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a4a      	ldr	r2, [pc, #296]	@ (8001274 <HAL_GPIO_Init+0x2f4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d00d      	beq.n	800116c <HAL_GPIO_Init+0x1ec>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a49      	ldr	r2, [pc, #292]	@ (8001278 <HAL_GPIO_Init+0x2f8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d007      	beq.n	8001168 <HAL_GPIO_Init+0x1e8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a48      	ldr	r2, [pc, #288]	@ (800127c <HAL_GPIO_Init+0x2fc>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d101      	bne.n	8001164 <HAL_GPIO_Init+0x1e4>
 8001160:	2305      	movs	r3, #5
 8001162:	e00a      	b.n	800117a <HAL_GPIO_Init+0x1fa>
 8001164:	2306      	movs	r3, #6
 8001166:	e008      	b.n	800117a <HAL_GPIO_Init+0x1fa>
 8001168:	2304      	movs	r3, #4
 800116a:	e006      	b.n	800117a <HAL_GPIO_Init+0x1fa>
 800116c:	2303      	movs	r3, #3
 800116e:	e004      	b.n	800117a <HAL_GPIO_Init+0x1fa>
 8001170:	2302      	movs	r3, #2
 8001172:	e002      	b.n	800117a <HAL_GPIO_Init+0x1fa>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <HAL_GPIO_Init+0x1fa>
 8001178:	2300      	movs	r3, #0
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	f002 0203 	and.w	r2, r2, #3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4093      	lsls	r3, r2
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800118a:	4937      	ldr	r1, [pc, #220]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001198:	4b39      	ldr	r3, [pc, #228]	@ (8001280 <HAL_GPIO_Init+0x300>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011bc:	4a30      	ldr	r2, [pc, #192]	@ (8001280 <HAL_GPIO_Init+0x300>)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001280 <HAL_GPIO_Init+0x300>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011e6:	4a26      	ldr	r2, [pc, #152]	@ (8001280 <HAL_GPIO_Init+0x300>)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011ec:	4b24      	ldr	r3, [pc, #144]	@ (8001280 <HAL_GPIO_Init+0x300>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001210:	4a1b      	ldr	r2, [pc, #108]	@ (8001280 <HAL_GPIO_Init+0x300>)
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001216:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <HAL_GPIO_Init+0x300>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800123a:	4a11      	ldr	r2, [pc, #68]	@ (8001280 <HAL_GPIO_Init+0x300>)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3301      	adds	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa22 f303 	lsr.w	r3, r2, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	f47f ae9d 	bne.w	8000f90 <HAL_GPIO_Init+0x10>
  }
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	40021000 	.word	0x40021000
 8001268:	40010000 	.word	0x40010000
 800126c:	48000400 	.word	0x48000400
 8001270:	48000800 	.word	0x48000800
 8001274:	48000c00 	.word	0x48000c00
 8001278:	48001000 	.word	0x48001000
 800127c:	48001400 	.word	0x48001400
 8001280:	40010400 	.word	0x40010400

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4013      	ands	r3, r2
 80012cc:	041a      	lsls	r2, r3, #16
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43d9      	mvns	r1, r3
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	400b      	ands	r3, r1
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	619a      	str	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e08d      	b.n	8001416 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d106      	bne.n	8001314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fad2 	bl	80008b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2224      	movs	r2, #36	@ 0x24
 8001318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001338:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001348:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d107      	bne.n	8001362 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	e006      	b.n	8001370 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800136e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d108      	bne.n	800138a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	e007      	b.n	800139a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001398:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691a      	ldr	r2, [r3, #16]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69d9      	ldr	r1, [r3, #28]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1a      	ldr	r2, [r3, #32]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2220      	movs	r2, #32
 8001402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af02      	add	r7, sp, #8
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	4608      	mov	r0, r1
 800142a:	4611      	mov	r1, r2
 800142c:	461a      	mov	r2, r3
 800142e:	4603      	mov	r3, r0
 8001430:	817b      	strh	r3, [r7, #10]
 8001432:	460b      	mov	r3, r1
 8001434:	813b      	strh	r3, [r7, #8]
 8001436:	4613      	mov	r3, r2
 8001438:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b20      	cmp	r3, #32
 8001444:	f040 80fd 	bne.w	8001642 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <HAL_I2C_Mem_Read+0x34>
 800144e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001450:	2b00      	cmp	r3, #0
 8001452:	d105      	bne.n	8001460 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800145a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0f1      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_I2C_Mem_Read+0x4e>
 800146a:	2302      	movs	r3, #2
 800146c:	e0ea      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001476:	f7ff fc71 	bl	8000d5c <HAL_GetTick>
 800147a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2319      	movs	r3, #25
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f000 fa47 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0d5      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2222      	movs	r2, #34	@ 0x22
 800149c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2240      	movs	r2, #64	@ 0x40
 80014a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a3a      	ldr	r2, [r7, #32]
 80014b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80014b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014c0:	88f8      	ldrh	r0, [r7, #6]
 80014c2:	893a      	ldrh	r2, [r7, #8]
 80014c4:	8979      	ldrh	r1, [r7, #10]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	4603      	mov	r3, r0
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 f9ab 	bl	800182c <I2C_RequestMemoryRead>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0ad      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2bff      	cmp	r3, #255	@ 0xff
 80014f0:	d90e      	bls.n	8001510 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	22ff      	movs	r2, #255	@ 0xff
 80014f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	8979      	ldrh	r1, [r7, #10]
 8001500:	4b52      	ldr	r3, [pc, #328]	@ (800164c <HAL_I2C_Mem_Read+0x22c>)
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fbcb 	bl	8001ca4 <I2C_TransferConfig>
 800150e:	e00f      	b.n	8001530 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001514:	b29a      	uxth	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800151e:	b2da      	uxtb	r2, r3
 8001520:	8979      	ldrh	r1, [r7, #10]
 8001522:	4b4a      	ldr	r3, [pc, #296]	@ (800164c <HAL_I2C_Mem_Read+0x22c>)
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 fbba 	bl	8001ca4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001536:	2200      	movs	r2, #0
 8001538:	2104      	movs	r1, #4
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f000 f9ee 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e07c      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001566:	3b01      	subs	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001572:	b29b      	uxth	r3, r3
 8001574:	3b01      	subs	r3, #1
 8001576:	b29a      	uxth	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001580:	b29b      	uxth	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d034      	beq.n	80015f0 <HAL_I2C_Mem_Read+0x1d0>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800158a:	2b00      	cmp	r3, #0
 800158c:	d130      	bne.n	80015f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001594:	2200      	movs	r2, #0
 8001596:	2180      	movs	r1, #128	@ 0x80
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f000 f9bf 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e04d      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	2bff      	cmp	r3, #255	@ 0xff
 80015b0:	d90e      	bls.n	80015d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	22ff      	movs	r2, #255	@ 0xff
 80015b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	8979      	ldrh	r1, [r7, #10]
 80015c0:	2300      	movs	r3, #0
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 fb6b 	bl	8001ca4 <I2C_TransferConfig>
 80015ce:	e00f      	b.n	80015f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	8979      	ldrh	r1, [r7, #10]
 80015e2:	2300      	movs	r3, #0
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 fb5a 	bl	8001ca4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d19a      	bne.n	8001530 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 fa2c 	bl	8001a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e01a      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2220      	movs	r2, #32
 8001614:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <HAL_I2C_Mem_Read+0x230>)
 8001622:	400b      	ands	r3, r1
 8001624:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2220      	movs	r2, #32
 800162a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001642:	2302      	movs	r3, #2
  }
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	80002400 	.word	0x80002400
 8001650:	fe00e800 	.word	0xfe00e800

08001654 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	@ 0x28
 8001658:	af02      	add	r7, sp, #8
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	460b      	mov	r3, r1
 8001662:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b20      	cmp	r3, #32
 8001672:	f040 80d6 	bne.w	8001822 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001684:	d101      	bne.n	800168a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001686:	2302      	movs	r3, #2
 8001688:	e0cc      	b.n	8001824 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_I2C_IsDeviceReady+0x44>
 8001694:	2302      	movs	r3, #2
 8001696:	e0c5      	b.n	8001824 <HAL_I2C_IsDeviceReady+0x1d0>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2224      	movs	r2, #36	@ 0x24
 80016a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d107      	bne.n	80016c6 <HAL_I2C_IsDeviceReady+0x72>
 80016b6:	897b      	ldrh	r3, [r7, #10]
 80016b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016c4:	e006      	b.n	80016d4 <HAL_I2C_IsDeviceReady+0x80>
 80016c6:	897b      	ldrh	r3, [r7, #10]
 80016c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016d0:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80016da:	f7ff fb3f 	bl	8000d5c <HAL_GetTick>
 80016de:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f003 0320 	and.w	r3, r3, #32
 80016ea:	2b20      	cmp	r3, #32
 80016ec:	bf0c      	ite	eq
 80016ee:	2301      	moveq	r3, #1
 80016f0:	2300      	movne	r3, #0
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	2b10      	cmp	r3, #16
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800170c:	e034      	b.n	8001778 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d01a      	beq.n	800174c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001716:	f7ff fb21 	bl	8000d5c <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d302      	bcc.n	800172c <HAL_I2C_IsDeviceReady+0xd8>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10f      	bne.n	800174c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2220      	movs	r2, #32
 8001730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001738:	f043 0220 	orr.w	r2, r3, #32
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e06b      	b.n	8001824 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	2b20      	cmp	r3, #32
 8001758:	bf0c      	ite	eq
 800175a:	2301      	moveq	r3, #1
 800175c:	2300      	movne	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	2b10      	cmp	r3, #16
 800176e:	bf0c      	ite	eq
 8001770:	2301      	moveq	r3, #1
 8001772:	2300      	movne	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001778:	7ffb      	ldrb	r3, [r7, #31]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <HAL_I2C_IsDeviceReady+0x130>
 800177e:	7fbb      	ldrb	r3, [r7, #30]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0c4      	beq.n	800170e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	2b10      	cmp	r3, #16
 8001790:	d01a      	beq.n	80017c8 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2200      	movs	r2, #0
 800179a:	2120      	movs	r1, #32
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 f8bd 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e03b      	b.n	8001824 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2220      	movs	r2, #32
 80017b2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2220      	movs	r2, #32
 80017b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	e02d      	b.n	8001824 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2200      	movs	r2, #0
 80017d0:	2120      	movs	r1, #32
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f8a2 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e020      	b.n	8001824 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2210      	movs	r2, #16
 80017e8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2220      	movs	r2, #32
 80017f0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	f63f af56 	bhi.w	80016ae <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2220      	movs	r2, #32
 8001806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f043 0220 	orr.w	r2, r3, #32
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001822:	2302      	movs	r3, #2
  }
}
 8001824:	4618      	mov	r0, r3
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	4608      	mov	r0, r1
 8001836:	4611      	mov	r1, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4603      	mov	r3, r0
 800183c:	817b      	strh	r3, [r7, #10]
 800183e:	460b      	mov	r3, r1
 8001840:	813b      	strh	r3, [r7, #8]
 8001842:	4613      	mov	r3, r2
 8001844:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	8979      	ldrh	r1, [r7, #10]
 800184c:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <I2C_RequestMemoryRead+0xa4>)
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2300      	movs	r3, #0
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 fa26 	bl	8001ca4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	69b9      	ldr	r1, [r7, #24]
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f000 f8b6 	bl	80019ce <I2C_WaitOnTXISFlagUntilTimeout>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e02c      	b.n	80018c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d105      	bne.n	800187e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001872:	893b      	ldrh	r3, [r7, #8]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	629a      	str	r2, [r3, #40]	@ 0x28
 800187c:	e015      	b.n	80018aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800187e:	893b      	ldrh	r3, [r7, #8]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	b29b      	uxth	r3, r3
 8001884:	b2da      	uxtb	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 f89c 	bl	80019ce <I2C_WaitOnTXISFlagUntilTimeout>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e012      	b.n	80018c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018a0:	893b      	ldrh	r3, [r7, #8]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2200      	movs	r2, #0
 80018b2:	2140      	movs	r1, #64	@ 0x40
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f831 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	80002000 	.word	0x80002000

080018d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d103      	bne.n	80018f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d007      	beq.n	8001910 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699a      	ldr	r2, [r3, #24]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	619a      	str	r2, [r3, #24]
  }
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	4613      	mov	r3, r2
 800192a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800192c:	e03b      	b.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	6839      	ldr	r1, [r7, #0]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f8d6 	bl	8001ae4 <I2C_IsErrorOccurred>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e041      	b.n	80019c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d02d      	beq.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800194a:	f7ff fa07 	bl	8000d5c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d302      	bcc.n	8001960 <I2C_WaitOnFlagUntilTimeout+0x44>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d122      	bne.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	4013      	ands	r3, r2
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	429a      	cmp	r2, r3
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	429a      	cmp	r2, r3
 800197c:	d113      	bne.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	f043 0220 	orr.w	r2, r3, #32
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2220      	movs	r2, #32
 800198e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699a      	ldr	r2, [r3, #24]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4013      	ands	r3, r2
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	bf0c      	ite	eq
 80019b6:	2301      	moveq	r3, #1
 80019b8:	2300      	movne	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d0b4      	beq.n	800192e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019da:	e033      	b.n	8001a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	68b9      	ldr	r1, [r7, #8]
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 f87f 	bl	8001ae4 <I2C_IsErrorOccurred>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e031      	b.n	8001a54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f6:	d025      	beq.n	8001a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f8:	f7ff f9b0 	bl	8000d5c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d302      	bcc.n	8001a0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d11a      	bne.n	8001a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d013      	beq.n	8001a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a20:	f043 0220 	orr.w	r2, r3, #32
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e007      	b.n	8001a54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d1c4      	bne.n	80019dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a68:	e02f      	b.n	8001aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f838 	bl	8001ae4 <I2C_IsErrorOccurred>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e02d      	b.n	8001ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a7e:	f7ff f96d 	bl	8000d5c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d302      	bcc.n	8001a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d11a      	bne.n	8001aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d013      	beq.n	8001aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	f043 0220 	orr.w	r2, r3, #32
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e007      	b.n	8001ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b20      	cmp	r3, #32
 8001ad6:	d1c8      	bne.n	8001a6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d068      	beq.n	8001be2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2210      	movs	r2, #16
 8001b16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b18:	e049      	b.n	8001bae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d045      	beq.n	8001bae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b22:	f7ff f91b 	bl	8000d5c <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d302      	bcc.n	8001b38 <I2C_IsErrorOccurred+0x54>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d13a      	bne.n	8001bae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b5a:	d121      	bne.n	8001ba0 <I2C_IsErrorOccurred+0xbc>
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b62:	d01d      	beq.n	8001ba0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001b64:	7cfb      	ldrb	r3, [r7, #19]
 8001b66:	2b20      	cmp	r3, #32
 8001b68:	d01a      	beq.n	8001ba0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b7a:	f7ff f8ef 	bl	8000d5c <HAL_GetTick>
 8001b7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b80:	e00e      	b.n	8001ba0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b82:	f7ff f8eb 	bl	8000d5c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b19      	cmp	r3, #25
 8001b8e:	d907      	bls.n	8001ba0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	f043 0320 	orr.w	r3, r3, #32
 8001b96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001b9e:	e006      	b.n	8001bae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 0320 	and.w	r3, r3, #32
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	d1e9      	bne.n	8001b82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0320 	and.w	r3, r3, #32
 8001bb8:	2b20      	cmp	r3, #32
 8001bba:	d003      	beq.n	8001bc4 <I2C_IsErrorOccurred+0xe0>
 8001bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0aa      	beq.n	8001b1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d103      	bne.n	8001bd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00b      	beq.n	8001c0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00b      	beq.n	8001c2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00b      	beq.n	8001c50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01c      	beq.n	8001c92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f7ff fe3b 	bl	80018d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca0 <I2C_IsErrorOccurred+0x1bc>)
 8001c6a:	400b      	ands	r3, r1
 8001c6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001c92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3728      	adds	r7, #40	@ 0x28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	fe00e800 	.word	0xfe00e800

08001ca4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	817b      	strh	r3, [r7, #10]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cb6:	897b      	ldrh	r3, [r7, #10]
 8001cb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cbc:	7a7b      	ldrb	r3, [r7, #9]
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	0d5b      	lsrs	r3, r3, #21
 8001cde:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001ce2:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <I2C_TransferConfig+0x60>)
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	ea02 0103 	and.w	r1, r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001cf6:	bf00      	nop
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	03ff63ff 	.word	0x03ff63ff

08001d08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b20      	cmp	r3, #32
 8001d1c:	d138      	bne.n	8001d90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e032      	b.n	8001d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2224      	movs	r2, #36	@ 0x24
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6819      	ldr	r1, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e000      	b.n	8001d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d90:	2302      	movs	r3, #2
  }
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b085      	sub	sp, #20
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d139      	bne.n	8001e28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e033      	b.n	8001e2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2224      	movs	r2, #36	@ 0x24
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001df0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2220      	movs	r2, #32
 8001e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e000      	b.n	8001e2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e28:	2302      	movs	r3, #2
  }
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d141      	bne.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e46:	4b4b      	ldr	r3, [pc, #300]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e52:	d131      	bne.n	8001eb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e54:	4b47      	ldr	r3, [pc, #284]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e5a:	4a46      	ldr	r2, [pc, #280]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e64:	4b43      	ldr	r3, [pc, #268]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e6c:	4a41      	ldr	r2, [pc, #260]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e74:	4b40      	ldr	r3, [pc, #256]	@ (8001f78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2232      	movs	r2, #50	@ 0x32
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
 8001e7e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e80:	fba2 2303 	umull	r2, r3, r2, r3
 8001e84:	0c9b      	lsrs	r3, r3, #18
 8001e86:	3301      	adds	r3, #1
 8001e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e8a:	e002      	b.n	8001e92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e92:	4b38      	ldr	r3, [pc, #224]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e9e:	d102      	bne.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f2      	bne.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ea6:	4b33      	ldr	r3, [pc, #204]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eb2:	d158      	bne.n	8001f66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e057      	b.n	8001f68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ebe:	4a2d      	ldr	r2, [pc, #180]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ec4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ec8:	e04d      	b.n	8001f66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ed0:	d141      	bne.n	8001f56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ed2:	4b28      	ldr	r3, [pc, #160]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ede:	d131      	bne.n	8001f44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ee0:	4b24      	ldr	r3, [pc, #144]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ee6:	4a23      	ldr	r2, [pc, #140]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ef0:	4b20      	ldr	r3, [pc, #128]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ef8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001efe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f00:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2232      	movs	r2, #50	@ 0x32
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	0c9b      	lsrs	r3, r3, #18
 8001f12:	3301      	adds	r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f16:	e002      	b.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f1e:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f2a:	d102      	bne.n	8001f32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f2      	bne.n	8001f18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f32:	4b10      	ldr	r3, [pc, #64]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f3e:	d112      	bne.n	8001f66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e011      	b.n	8001f68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f44:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f54:	e007      	b.n	8001f66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f56:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f5e:	4a05      	ldr	r2, [pc, #20]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	40007000 	.word	0x40007000
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	431bde83 	.word	0x431bde83

08001f80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f84:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	4a04      	ldr	r2, [pc, #16]	@ (8001f9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f8e:	6093      	str	r3, [r2, #8]
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40007000 	.word	0x40007000

08001fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e2fe      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d075      	beq.n	80020aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fbe:	4b97      	ldr	r3, [pc, #604]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc8:	4b94      	ldr	r3, [pc, #592]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2b0c      	cmp	r3, #12
 8001fd6:	d102      	bne.n	8001fde <HAL_RCC_OscConfig+0x3e>
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d002      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x44>
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d10b      	bne.n	8001ffc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	4b8d      	ldr	r3, [pc, #564]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d05b      	beq.n	80020a8 <HAL_RCC_OscConfig+0x108>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d157      	bne.n	80020a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e2d9      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002004:	d106      	bne.n	8002014 <HAL_RCC_OscConfig+0x74>
 8002006:	4b85      	ldr	r3, [pc, #532]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a84      	ldr	r2, [pc, #528]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e01d      	b.n	8002050 <HAL_RCC_OscConfig+0xb0>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x98>
 800201e:	4b7f      	ldr	r3, [pc, #508]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a7e      	ldr	r2, [pc, #504]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 8002024:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b7c      	ldr	r3, [pc, #496]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7b      	ldr	r2, [pc, #492]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e00b      	b.n	8002050 <HAL_RCC_OscConfig+0xb0>
 8002038:	4b78      	ldr	r3, [pc, #480]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a77      	ldr	r2, [pc, #476]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 800203e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	4b75      	ldr	r3, [pc, #468]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a74      	ldr	r2, [pc, #464]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 800204a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800204e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d013      	beq.n	8002080 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe fe80 	bl	8000d5c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002060:	f7fe fe7c 	bl	8000d5c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	@ 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e29e      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002072:	4b6a      	ldr	r3, [pc, #424]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0xc0>
 800207e:	e014      	b.n	80020aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7fe fe6c 	bl	8000d5c <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002088:	f7fe fe68 	bl	8000d5c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	@ 0x64
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e28a      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800209a:	4b60      	ldr	r3, [pc, #384]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0xe8>
 80020a6:	e000      	b.n	80020aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d075      	beq.n	80021a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b6:	4b59      	ldr	r3, [pc, #356]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c0:	4b56      	ldr	r3, [pc, #344]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	2b0c      	cmp	r3, #12
 80020ce:	d102      	bne.n	80020d6 <HAL_RCC_OscConfig+0x136>
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d002      	beq.n	80020dc <HAL_RCC_OscConfig+0x13c>
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d11f      	bne.n	800211c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020dc:	4b4f      	ldr	r3, [pc, #316]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_OscConfig+0x154>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e25d      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f4:	4b49      	ldr	r3, [pc, #292]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	061b      	lsls	r3, r3, #24
 8002102:	4946      	ldr	r1, [pc, #280]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002108:	4b45      	ldr	r3, [pc, #276]	@ (8002220 <HAL_RCC_OscConfig+0x280>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fdd9 	bl	8000cc4 <HAL_InitTick>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d043      	beq.n	80021a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e249      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d023      	beq.n	800216c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002124:	4b3d      	ldr	r3, [pc, #244]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a3c      	ldr	r2, [pc, #240]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 800212a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7fe fe14 	bl	8000d5c <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002138:	f7fe fe10 	bl	8000d5c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e232      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800214a:	4b34      	ldr	r3, [pc, #208]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002156:	4b31      	ldr	r3, [pc, #196]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	061b      	lsls	r3, r3, #24
 8002164:	492d      	ldr	r1, [pc, #180]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
 800216a:	e01a      	b.n	80021a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216c:	4b2b      	ldr	r3, [pc, #172]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a2a      	ldr	r2, [pc, #168]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 8002172:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7fe fdf0 	bl	8000d5c <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002180:	f7fe fdec 	bl	8000d5c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e20e      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002192:	4b22      	ldr	r3, [pc, #136]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x1e0>
 800219e:	e000      	b.n	80021a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d041      	beq.n	8002232 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d01c      	beq.n	80021f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b6:	4b19      	ldr	r3, [pc, #100]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 80021b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021bc:	4a17      	ldr	r2, [pc, #92]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c6:	f7fe fdc9 	bl	8000d5c <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ce:	f7fe fdc5 	bl	8000d5c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e1e7      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021e0:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 80021e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0ef      	beq.n	80021ce <HAL_RCC_OscConfig+0x22e>
 80021ee:	e020      	b.n	8002232 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f0:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 80021f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021f6:	4a09      	ldr	r2, [pc, #36]	@ (800221c <HAL_RCC_OscConfig+0x27c>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7fe fdac 	bl	8000d5c <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002206:	e00d      	b.n	8002224 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002208:	f7fe fda8 	bl	8000d5c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d906      	bls.n	8002224 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e1ca      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002224:	4b8c      	ldr	r3, [pc, #560]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 8002226:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1ea      	bne.n	8002208 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80a6 	beq.w	800238c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002240:	2300      	movs	r3, #0
 8002242:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002244:	4b84      	ldr	r3, [pc, #528]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 8002246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_OscConfig+0x2b4>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_RCC_OscConfig+0x2b6>
 8002254:	2300      	movs	r3, #0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00d      	beq.n	8002276 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	4b7f      	ldr	r3, [pc, #508]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225e:	4a7e      	ldr	r2, [pc, #504]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002264:	6593      	str	r3, [r2, #88]	@ 0x58
 8002266:	4b7c      	ldr	r3, [pc, #496]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002272:	2301      	movs	r3, #1
 8002274:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002276:	4b79      	ldr	r3, [pc, #484]	@ (800245c <HAL_RCC_OscConfig+0x4bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d118      	bne.n	80022b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002282:	4b76      	ldr	r3, [pc, #472]	@ (800245c <HAL_RCC_OscConfig+0x4bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a75      	ldr	r2, [pc, #468]	@ (800245c <HAL_RCC_OscConfig+0x4bc>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228e:	f7fe fd65 	bl	8000d5c <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002296:	f7fe fd61 	bl	8000d5c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e183      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a8:	4b6c      	ldr	r3, [pc, #432]	@ (800245c <HAL_RCC_OscConfig+0x4bc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d108      	bne.n	80022ce <HAL_RCC_OscConfig+0x32e>
 80022bc:	4b66      	ldr	r3, [pc, #408]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 80022be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c2:	4a65      	ldr	r2, [pc, #404]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022cc:	e024      	b.n	8002318 <HAL_RCC_OscConfig+0x378>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	d110      	bne.n	80022f8 <HAL_RCC_OscConfig+0x358>
 80022d6:	4b60      	ldr	r3, [pc, #384]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022dc:	4a5e      	ldr	r2, [pc, #376]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 80022de:	f043 0304 	orr.w	r3, r3, #4
 80022e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022f6:	e00f      	b.n	8002318 <HAL_RCC_OscConfig+0x378>
 80022f8:	4b57      	ldr	r3, [pc, #348]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022fe:	4a56      	ldr	r2, [pc, #344]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002308:	4b53      	ldr	r3, [pc, #332]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230e:	4a52      	ldr	r2, [pc, #328]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 8002310:	f023 0304 	bic.w	r3, r3, #4
 8002314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d016      	beq.n	800234e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002320:	f7fe fd1c 	bl	8000d5c <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002326:	e00a      	b.n	800233e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002328:	f7fe fd18 	bl	8000d5c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e138      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233e:	4b46      	ldr	r3, [pc, #280]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0ed      	beq.n	8002328 <HAL_RCC_OscConfig+0x388>
 800234c:	e015      	b.n	800237a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe fd05 	bl	8000d5c <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe fd01 	bl	8000d5c <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e121      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800236c:	4b3a      	ldr	r3, [pc, #232]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1ed      	bne.n	8002356 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800237a:	7ffb      	ldrb	r3, [r7, #31]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002380:	4b35      	ldr	r3, [pc, #212]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002384:	4a34      	ldr	r2, [pc, #208]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 8002386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800238a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0320 	and.w	r3, r3, #32
 8002394:	2b00      	cmp	r3, #0
 8002396:	d03c      	beq.n	8002412 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01c      	beq.n	80023da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 80023a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7fe fcd4 	bl	8000d5c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023b8:	f7fe fcd0 	bl	8000d5c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e0f2      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023ca:	4b23      	ldr	r3, [pc, #140]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 80023cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0ef      	beq.n	80023b8 <HAL_RCC_OscConfig+0x418>
 80023d8:	e01b      	b.n	8002412 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023da:	4b1f      	ldr	r3, [pc, #124]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 80023dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ea:	f7fe fcb7 	bl	8000d5c <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023f2:	f7fe fcb3 	bl	8000d5c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e0d5      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002404:	4b14      	ldr	r3, [pc, #80]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 8002406:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1ef      	bne.n	80023f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80c9 	beq.w	80025ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800241c:	4b0e      	ldr	r3, [pc, #56]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b0c      	cmp	r3, #12
 8002426:	f000 8083 	beq.w	8002530 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d15e      	bne.n	80024f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a08      	ldr	r2, [pc, #32]	@ (8002458 <HAL_RCC_OscConfig+0x4b8>)
 8002438:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800243c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7fe fc8d 	bl	8000d5c <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002444:	e00c      	b.n	8002460 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002446:	f7fe fc89 	bl	8000d5c <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d905      	bls.n	8002460 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e0ab      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
 8002458:	40021000 	.word	0x40021000
 800245c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002460:	4b55      	ldr	r3, [pc, #340]	@ (80025b8 <HAL_RCC_OscConfig+0x618>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ec      	bne.n	8002446 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246c:	4b52      	ldr	r3, [pc, #328]	@ (80025b8 <HAL_RCC_OscConfig+0x618>)
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	4b52      	ldr	r3, [pc, #328]	@ (80025bc <HAL_RCC_OscConfig+0x61c>)
 8002472:	4013      	ands	r3, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6a11      	ldr	r1, [r2, #32]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800247c:	3a01      	subs	r2, #1
 800247e:	0112      	lsls	r2, r2, #4
 8002480:	4311      	orrs	r1, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002486:	0212      	lsls	r2, r2, #8
 8002488:	4311      	orrs	r1, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800248e:	0852      	lsrs	r2, r2, #1
 8002490:	3a01      	subs	r2, #1
 8002492:	0552      	lsls	r2, r2, #21
 8002494:	4311      	orrs	r1, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800249a:	0852      	lsrs	r2, r2, #1
 800249c:	3a01      	subs	r2, #1
 800249e:	0652      	lsls	r2, r2, #25
 80024a0:	4311      	orrs	r1, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024a6:	06d2      	lsls	r2, r2, #27
 80024a8:	430a      	orrs	r2, r1
 80024aa:	4943      	ldr	r1, [pc, #268]	@ (80025b8 <HAL_RCC_OscConfig+0x618>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b0:	4b41      	ldr	r3, [pc, #260]	@ (80025b8 <HAL_RCC_OscConfig+0x618>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a40      	ldr	r2, [pc, #256]	@ (80025b8 <HAL_RCC_OscConfig+0x618>)
 80024b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024bc:	4b3e      	ldr	r3, [pc, #248]	@ (80025b8 <HAL_RCC_OscConfig+0x618>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a3d      	ldr	r2, [pc, #244]	@ (80025b8 <HAL_RCC_OscConfig+0x618>)
 80024c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fc48 	bl	8000d5c <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d0:	f7fe fc44 	bl	8000d5c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e066      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e2:	4b35      	ldr	r3, [pc, #212]	@ (80025b8 <HAL_RCC_OscConfig+0x618>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x530>
 80024ee:	e05e      	b.n	80025ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f0:	4b31      	ldr	r3, [pc, #196]	@ (80025b8 <HAL_RCC_OscConfig+0x618>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a30      	ldr	r2, [pc, #192]	@ (80025b8 <HAL_RCC_OscConfig+0x618>)
 80024f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe fc2e 	bl	8000d5c <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe fc2a 	bl	8000d5c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e04c      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002516:	4b28      	ldr	r3, [pc, #160]	@ (80025b8 <HAL_RCC_OscConfig+0x618>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002522:	4b25      	ldr	r3, [pc, #148]	@ (80025b8 <HAL_RCC_OscConfig+0x618>)
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	4924      	ldr	r1, [pc, #144]	@ (80025b8 <HAL_RCC_OscConfig+0x618>)
 8002528:	4b25      	ldr	r3, [pc, #148]	@ (80025c0 <HAL_RCC_OscConfig+0x620>)
 800252a:	4013      	ands	r3, r2
 800252c:	60cb      	str	r3, [r1, #12]
 800252e:	e03e      	b.n	80025ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e039      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800253c:	4b1e      	ldr	r3, [pc, #120]	@ (80025b8 <HAL_RCC_OscConfig+0x618>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f003 0203 	and.w	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	429a      	cmp	r2, r3
 800254e:	d12c      	bne.n	80025aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255a:	3b01      	subs	r3, #1
 800255c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d123      	bne.n	80025aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d11b      	bne.n	80025aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d113      	bne.n	80025aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258c:	085b      	lsrs	r3, r3, #1
 800258e:	3b01      	subs	r3, #1
 8002590:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002592:	429a      	cmp	r2, r3
 8002594:	d109      	bne.n	80025aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a0:	085b      	lsrs	r3, r3, #1
 80025a2:	3b01      	subs	r3, #1
 80025a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	019f800c 	.word	0x019f800c
 80025c0:	feeefffc 	.word	0xfeeefffc

080025c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e11e      	b.n	800281a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025dc:	4b91      	ldr	r3, [pc, #580]	@ (8002824 <HAL_RCC_ClockConfig+0x260>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d910      	bls.n	800260c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ea:	4b8e      	ldr	r3, [pc, #568]	@ (8002824 <HAL_RCC_ClockConfig+0x260>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 020f 	bic.w	r2, r3, #15
 80025f2:	498c      	ldr	r1, [pc, #560]	@ (8002824 <HAL_RCC_ClockConfig+0x260>)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b8a      	ldr	r3, [pc, #552]	@ (8002824 <HAL_RCC_ClockConfig+0x260>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e106      	b.n	800281a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d073      	beq.n	8002700 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d129      	bne.n	8002674 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002620:	4b81      	ldr	r3, [pc, #516]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0f4      	b.n	800281a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002630:	f000 f99e 	bl	8002970 <RCC_GetSysClockFreqFromPLLSource>
 8002634:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4a7c      	ldr	r2, [pc, #496]	@ (800282c <HAL_RCC_ClockConfig+0x268>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d93f      	bls.n	80026be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800263e:	4b7a      	ldr	r3, [pc, #488]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d009      	beq.n	800265e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002652:	2b00      	cmp	r3, #0
 8002654:	d033      	beq.n	80026be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800265a:	2b00      	cmp	r3, #0
 800265c:	d12f      	bne.n	80026be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800265e:	4b72      	ldr	r3, [pc, #456]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002666:	4a70      	ldr	r2, [pc, #448]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 8002668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800266c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800266e:	2380      	movs	r3, #128	@ 0x80
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	e024      	b.n	80026be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d107      	bne.n	800268c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800267c:	4b6a      	ldr	r3, [pc, #424]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0c6      	b.n	800281a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800268c:	4b66      	ldr	r3, [pc, #408]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0be      	b.n	800281a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800269c:	f000 f8ce 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4a61      	ldr	r2, [pc, #388]	@ (800282c <HAL_RCC_ClockConfig+0x268>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d909      	bls.n	80026be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026b2:	4a5d      	ldr	r2, [pc, #372]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 80026b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80026ba:	2380      	movs	r3, #128	@ 0x80
 80026bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026be:	4b5a      	ldr	r3, [pc, #360]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f023 0203 	bic.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4957      	ldr	r1, [pc, #348]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d0:	f7fe fb44 	bl	8000d5c <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d8:	f7fe fb40 	bl	8000d5c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e095      	b.n	800281a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 020c 	and.w	r2, r3, #12
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1eb      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d023      	beq.n	8002754 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002718:	4b43      	ldr	r3, [pc, #268]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4a42      	ldr	r2, [pc, #264]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 800271e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002722:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002730:	4b3d      	ldr	r3, [pc, #244]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002738:	4a3b      	ldr	r2, [pc, #236]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 800273a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800273e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002740:	4b39      	ldr	r3, [pc, #228]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4936      	ldr	r1, [pc, #216]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
 8002752:	e008      	b.n	8002766 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2b80      	cmp	r3, #128	@ 0x80
 8002758:	d105      	bne.n	8002766 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800275a:	4b33      	ldr	r3, [pc, #204]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	4a32      	ldr	r2, [pc, #200]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 8002760:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002764:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002766:	4b2f      	ldr	r3, [pc, #188]	@ (8002824 <HAL_RCC_ClockConfig+0x260>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d21d      	bcs.n	80027b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002774:	4b2b      	ldr	r3, [pc, #172]	@ (8002824 <HAL_RCC_ClockConfig+0x260>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 020f 	bic.w	r2, r3, #15
 800277c:	4929      	ldr	r1, [pc, #164]	@ (8002824 <HAL_RCC_ClockConfig+0x260>)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002784:	f7fe faea 	bl	8000d5c <HAL_GetTick>
 8002788:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278c:	f7fe fae6 	bl	8000d5c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e03b      	b.n	800281a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <HAL_RCC_ClockConfig+0x260>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1ed      	bne.n	800278c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4917      	ldr	r1, [pc, #92]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027da:	4b13      	ldr	r3, [pc, #76]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	490f      	ldr	r1, [pc, #60]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027ee:	f000 f825 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80027f2:	4602      	mov	r2, r0
 80027f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <HAL_RCC_ClockConfig+0x264>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	490c      	ldr	r1, [pc, #48]	@ (8002830 <HAL_RCC_ClockConfig+0x26c>)
 8002800:	5ccb      	ldrb	r3, [r1, r3]
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	fa22 f303 	lsr.w	r3, r2, r3
 800280a:	4a0a      	ldr	r2, [pc, #40]	@ (8002834 <HAL_RCC_ClockConfig+0x270>)
 800280c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800280e:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <HAL_RCC_ClockConfig+0x274>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fa56 	bl	8000cc4 <HAL_InitTick>
 8002818:	4603      	mov	r3, r0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40022000 	.word	0x40022000
 8002828:	40021000 	.word	0x40021000
 800282c:	04c4b400 	.word	0x04c4b400
 8002830:	08004c64 	.word	0x08004c64
 8002834:	20000000 	.word	0x20000000
 8002838:	20000004 	.word	0x20000004

0800283c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002842:	4b2c      	ldr	r3, [pc, #176]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b04      	cmp	r3, #4
 800284c:	d102      	bne.n	8002854 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800284e:	4b2a      	ldr	r3, [pc, #168]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	e047      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002854:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d102      	bne.n	8002866 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002860:	4b26      	ldr	r3, [pc, #152]	@ (80028fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	e03e      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002866:	4b23      	ldr	r3, [pc, #140]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b0c      	cmp	r3, #12
 8002870:	d136      	bne.n	80028e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002872:	4b20      	ldr	r3, [pc, #128]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800287c:	4b1d      	ldr	r3, [pc, #116]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	3301      	adds	r3, #1
 8002888:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d10c      	bne.n	80028aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002890:	4a1a      	ldr	r2, [pc, #104]	@ (80028fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	4a16      	ldr	r2, [pc, #88]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800289a:	68d2      	ldr	r2, [r2, #12]
 800289c:	0a12      	lsrs	r2, r2, #8
 800289e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	617b      	str	r3, [r7, #20]
      break;
 80028a8:	e00c      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028aa:	4a13      	ldr	r2, [pc, #76]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b2:	4a10      	ldr	r2, [pc, #64]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028b4:	68d2      	ldr	r2, [r2, #12]
 80028b6:	0a12      	lsrs	r2, r2, #8
 80028b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]
      break;
 80028c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028c4:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0e5b      	lsrs	r3, r3, #25
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	3301      	adds	r3, #1
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	e001      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028e4:	693b      	ldr	r3, [r7, #16]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000
 80028f8:	00f42400 	.word	0x00f42400
 80028fc:	016e3600 	.word	0x016e3600

08002900 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002904:	4b03      	ldr	r3, [pc, #12]	@ (8002914 <HAL_RCC_GetHCLKFreq+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000000 	.word	0x20000000

08002918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800291c:	f7ff fff0 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002920:	4602      	mov	r2, r0
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4904      	ldr	r1, [pc, #16]	@ (8002940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	f003 031f 	and.w	r3, r3, #31
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	08004c74 	.word	0x08004c74

08002944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002948:	f7ff ffda 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 800294c:	4602      	mov	r2, r0
 800294e:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	0adb      	lsrs	r3, r3, #11
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	4904      	ldr	r1, [pc, #16]	@ (800296c <HAL_RCC_GetPCLK2Freq+0x28>)
 800295a:	5ccb      	ldrb	r3, [r1, r3]
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40021000 	.word	0x40021000
 800296c:	08004c74 	.word	0x08004c74

08002970 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002976:	4b1e      	ldr	r3, [pc, #120]	@ (80029f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002980:	4b1b      	ldr	r3, [pc, #108]	@ (80029f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	3301      	adds	r3, #1
 800298c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d10c      	bne.n	80029ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002994:	4a17      	ldr	r2, [pc, #92]	@ (80029f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	fbb2 f3f3 	udiv	r3, r2, r3
 800299c:	4a14      	ldr	r2, [pc, #80]	@ (80029f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800299e:	68d2      	ldr	r2, [r2, #12]
 80029a0:	0a12      	lsrs	r2, r2, #8
 80029a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029a6:	fb02 f303 	mul.w	r3, r2, r3
 80029aa:	617b      	str	r3, [r7, #20]
    break;
 80029ac:	e00c      	b.n	80029c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ae:	4a12      	ldr	r2, [pc, #72]	@ (80029f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	4a0e      	ldr	r2, [pc, #56]	@ (80029f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029b8:	68d2      	ldr	r2, [r2, #12]
 80029ba:	0a12      	lsrs	r2, r2, #8
 80029bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
    break;
 80029c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029c8:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	0e5b      	lsrs	r3, r3, #25
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	3301      	adds	r3, #1
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80029e2:	687b      	ldr	r3, [r7, #4]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40021000 	.word	0x40021000
 80029f4:	016e3600 	.word	0x016e3600
 80029f8:	00f42400 	.word	0x00f42400

080029fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a04:	2300      	movs	r3, #0
 8002a06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a08:	2300      	movs	r3, #0
 8002a0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8098 	beq.w	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1e:	4b43      	ldr	r3, [pc, #268]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10d      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	4b40      	ldr	r3, [pc, #256]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2e:	4a3f      	ldr	r2, [pc, #252]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a36:	4b3d      	ldr	r3, [pc, #244]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a42:	2301      	movs	r3, #1
 8002a44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a46:	4b3a      	ldr	r3, [pc, #232]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a39      	ldr	r2, [pc, #228]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a52:	f7fe f983 	bl	8000d5c <HAL_GetTick>
 8002a56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a58:	e009      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5a:	f7fe f97f 	bl	8000d5c <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d902      	bls.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	74fb      	strb	r3, [r7, #19]
        break;
 8002a6c:	e005      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a6e:	4b30      	ldr	r3, [pc, #192]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0ef      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a7a:	7cfb      	ldrb	r3, [r7, #19]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d159      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a80:	4b2a      	ldr	r3, [pc, #168]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01e      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d019      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a9c:	4b23      	ldr	r3, [pc, #140]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aa8:	4b20      	ldr	r3, [pc, #128]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aae:	4a1f      	ldr	r2, [pc, #124]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002abe:	4a1b      	ldr	r2, [pc, #108]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ac8:	4a18      	ldr	r2, [pc, #96]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ada:	f7fe f93f 	bl	8000d5c <HAL_GetTick>
 8002ade:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae0:	e00b      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fe f93b 	bl	8000d5c <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d902      	bls.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	74fb      	strb	r3, [r7, #19]
            break;
 8002af8:	e006      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afa:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ec      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10b      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b0e:	4b07      	ldr	r3, [pc, #28]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	4903      	ldr	r1, [pc, #12]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b24:	e008      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	74bb      	strb	r3, [r7, #18]
 8002b2a:	e005      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b38:	7c7b      	ldrb	r3, [r7, #17]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d105      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3e:	4ba6      	ldr	r3, [pc, #664]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b42:	4aa5      	ldr	r2, [pc, #660]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b56:	4ba0      	ldr	r3, [pc, #640]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5c:	f023 0203 	bic.w	r2, r3, #3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	499c      	ldr	r1, [pc, #624]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b78:	4b97      	ldr	r3, [pc, #604]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7e:	f023 020c 	bic.w	r2, r3, #12
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	4994      	ldr	r1, [pc, #592]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b9a:	4b8f      	ldr	r3, [pc, #572]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	498b      	ldr	r1, [pc, #556]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bbc:	4b86      	ldr	r3, [pc, #536]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	4983      	ldr	r1, [pc, #524]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bde:	4b7e      	ldr	r3, [pc, #504]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	497a      	ldr	r1, [pc, #488]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c00:	4b75      	ldr	r3, [pc, #468]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	4972      	ldr	r1, [pc, #456]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c22:	4b6d      	ldr	r3, [pc, #436]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c28:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	4969      	ldr	r1, [pc, #420]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c44:	4b64      	ldr	r3, [pc, #400]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	4961      	ldr	r1, [pc, #388]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c66:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	4958      	ldr	r1, [pc, #352]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d015      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c88:	4b53      	ldr	r3, [pc, #332]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c96:	4950      	ldr	r1, [pc, #320]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca8:	4b4b      	ldr	r3, [pc, #300]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a4a      	ldr	r2, [pc, #296]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cb2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d015      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cc0:	4b45      	ldr	r3, [pc, #276]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	4942      	ldr	r1, [pc, #264]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cde:	d105      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cea:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cf8:	4b37      	ldr	r3, [pc, #220]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	4934      	ldr	r1, [pc, #208]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d16:	d105      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d18:	4b2f      	ldr	r3, [pc, #188]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a2e      	ldr	r2, [pc, #184]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d22:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d015      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d30:	4b29      	ldr	r3, [pc, #164]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3e:	4926      	ldr	r1, [pc, #152]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d50:	4b21      	ldr	r3, [pc, #132]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a20      	ldr	r2, [pc, #128]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d015      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d68:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d76:	4918      	ldr	r1, [pc, #96]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d86:	d105      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d88:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a12      	ldr	r2, [pc, #72]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d015      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002da0:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dae:	490a      	ldr	r1, [pc, #40]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002dc0:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002dcc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000

08002ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e042      	b.n	8002e74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d106      	bne.n	8002e06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7fd fdcf 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2224      	movs	r2, #36	@ 0x24
 8002e0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fb82 	bl	8003530 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f8b3 	bl	8002f98 <UART_SetConfig>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e01b      	b.n	8002e74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fc01 	bl	8003674 <UART_CheckIdleState>
 8002e72:	4603      	mov	r3, r0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	@ 0x28
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d17b      	bne.n	8002f8e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_UART_Transmit+0x26>
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e074      	b.n	8002f90 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2221      	movs	r2, #33	@ 0x21
 8002eb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eb6:	f7fd ff51 	bl	8000d5c <HAL_GetTick>
 8002eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	88fa      	ldrh	r2, [r7, #6]
 8002ec0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed4:	d108      	bne.n	8002ee8 <HAL_UART_Transmit+0x6c>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d104      	bne.n	8002ee8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	e003      	b.n	8002ef0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ef0:	e030      	b.n	8002f54 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2180      	movs	r1, #128	@ 0x80
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fc63 	bl	80037c8 <UART_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e03d      	b.n	8002f90 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10b      	bne.n	8002f32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	e007      	b.n	8002f42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	781a      	ldrb	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1c8      	bne.n	8002ef2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2200      	movs	r2, #0
 8002f68:	2140      	movs	r1, #64	@ 0x40
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fc2c 	bl	80037c8 <UART_WaitOnFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e006      	b.n	8002f90 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e000      	b.n	8002f90 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
  }
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3720      	adds	r7, #32
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f9c:	b08c      	sub	sp, #48	@ 0x30
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4bab      	ldr	r3, [pc, #684]	@ (8003274 <UART_SetConfig+0x2dc>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4aa0      	ldr	r2, [pc, #640]	@ (8003278 <UART_SetConfig+0x2e0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d004      	beq.n	8003004 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003000:	4313      	orrs	r3, r2
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800300e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003018:	430b      	orrs	r3, r1
 800301a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003022:	f023 010f 	bic.w	r1, r3, #15
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a91      	ldr	r2, [pc, #580]	@ (800327c <UART_SetConfig+0x2e4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d125      	bne.n	8003088 <UART_SetConfig+0xf0>
 800303c:	4b90      	ldr	r3, [pc, #576]	@ (8003280 <UART_SetConfig+0x2e8>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b03      	cmp	r3, #3
 8003048:	d81a      	bhi.n	8003080 <UART_SetConfig+0xe8>
 800304a:	a201      	add	r2, pc, #4	@ (adr r2, 8003050 <UART_SetConfig+0xb8>)
 800304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003050:	08003061 	.word	0x08003061
 8003054:	08003071 	.word	0x08003071
 8003058:	08003069 	.word	0x08003069
 800305c:	08003079 	.word	0x08003079
 8003060:	2301      	movs	r3, #1
 8003062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003066:	e0d6      	b.n	8003216 <UART_SetConfig+0x27e>
 8003068:	2302      	movs	r3, #2
 800306a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800306e:	e0d2      	b.n	8003216 <UART_SetConfig+0x27e>
 8003070:	2304      	movs	r3, #4
 8003072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003076:	e0ce      	b.n	8003216 <UART_SetConfig+0x27e>
 8003078:	2308      	movs	r3, #8
 800307a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800307e:	e0ca      	b.n	8003216 <UART_SetConfig+0x27e>
 8003080:	2310      	movs	r3, #16
 8003082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003086:	e0c6      	b.n	8003216 <UART_SetConfig+0x27e>
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a7d      	ldr	r2, [pc, #500]	@ (8003284 <UART_SetConfig+0x2ec>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d138      	bne.n	8003104 <UART_SetConfig+0x16c>
 8003092:	4b7b      	ldr	r3, [pc, #492]	@ (8003280 <UART_SetConfig+0x2e8>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b0c      	cmp	r3, #12
 800309e:	d82d      	bhi.n	80030fc <UART_SetConfig+0x164>
 80030a0:	a201      	add	r2, pc, #4	@ (adr r2, 80030a8 <UART_SetConfig+0x110>)
 80030a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a6:	bf00      	nop
 80030a8:	080030dd 	.word	0x080030dd
 80030ac:	080030fd 	.word	0x080030fd
 80030b0:	080030fd 	.word	0x080030fd
 80030b4:	080030fd 	.word	0x080030fd
 80030b8:	080030ed 	.word	0x080030ed
 80030bc:	080030fd 	.word	0x080030fd
 80030c0:	080030fd 	.word	0x080030fd
 80030c4:	080030fd 	.word	0x080030fd
 80030c8:	080030e5 	.word	0x080030e5
 80030cc:	080030fd 	.word	0x080030fd
 80030d0:	080030fd 	.word	0x080030fd
 80030d4:	080030fd 	.word	0x080030fd
 80030d8:	080030f5 	.word	0x080030f5
 80030dc:	2300      	movs	r3, #0
 80030de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030e2:	e098      	b.n	8003216 <UART_SetConfig+0x27e>
 80030e4:	2302      	movs	r3, #2
 80030e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ea:	e094      	b.n	8003216 <UART_SetConfig+0x27e>
 80030ec:	2304      	movs	r3, #4
 80030ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030f2:	e090      	b.n	8003216 <UART_SetConfig+0x27e>
 80030f4:	2308      	movs	r3, #8
 80030f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030fa:	e08c      	b.n	8003216 <UART_SetConfig+0x27e>
 80030fc:	2310      	movs	r3, #16
 80030fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003102:	e088      	b.n	8003216 <UART_SetConfig+0x27e>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a5f      	ldr	r2, [pc, #380]	@ (8003288 <UART_SetConfig+0x2f0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d125      	bne.n	800315a <UART_SetConfig+0x1c2>
 800310e:	4b5c      	ldr	r3, [pc, #368]	@ (8003280 <UART_SetConfig+0x2e8>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003114:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003118:	2b30      	cmp	r3, #48	@ 0x30
 800311a:	d016      	beq.n	800314a <UART_SetConfig+0x1b2>
 800311c:	2b30      	cmp	r3, #48	@ 0x30
 800311e:	d818      	bhi.n	8003152 <UART_SetConfig+0x1ba>
 8003120:	2b20      	cmp	r3, #32
 8003122:	d00a      	beq.n	800313a <UART_SetConfig+0x1a2>
 8003124:	2b20      	cmp	r3, #32
 8003126:	d814      	bhi.n	8003152 <UART_SetConfig+0x1ba>
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <UART_SetConfig+0x19a>
 800312c:	2b10      	cmp	r3, #16
 800312e:	d008      	beq.n	8003142 <UART_SetConfig+0x1aa>
 8003130:	e00f      	b.n	8003152 <UART_SetConfig+0x1ba>
 8003132:	2300      	movs	r3, #0
 8003134:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003138:	e06d      	b.n	8003216 <UART_SetConfig+0x27e>
 800313a:	2302      	movs	r3, #2
 800313c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003140:	e069      	b.n	8003216 <UART_SetConfig+0x27e>
 8003142:	2304      	movs	r3, #4
 8003144:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003148:	e065      	b.n	8003216 <UART_SetConfig+0x27e>
 800314a:	2308      	movs	r3, #8
 800314c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003150:	e061      	b.n	8003216 <UART_SetConfig+0x27e>
 8003152:	2310      	movs	r3, #16
 8003154:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003158:	e05d      	b.n	8003216 <UART_SetConfig+0x27e>
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a4b      	ldr	r2, [pc, #300]	@ (800328c <UART_SetConfig+0x2f4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d125      	bne.n	80031b0 <UART_SetConfig+0x218>
 8003164:	4b46      	ldr	r3, [pc, #280]	@ (8003280 <UART_SetConfig+0x2e8>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800316e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003170:	d016      	beq.n	80031a0 <UART_SetConfig+0x208>
 8003172:	2bc0      	cmp	r3, #192	@ 0xc0
 8003174:	d818      	bhi.n	80031a8 <UART_SetConfig+0x210>
 8003176:	2b80      	cmp	r3, #128	@ 0x80
 8003178:	d00a      	beq.n	8003190 <UART_SetConfig+0x1f8>
 800317a:	2b80      	cmp	r3, #128	@ 0x80
 800317c:	d814      	bhi.n	80031a8 <UART_SetConfig+0x210>
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <UART_SetConfig+0x1f0>
 8003182:	2b40      	cmp	r3, #64	@ 0x40
 8003184:	d008      	beq.n	8003198 <UART_SetConfig+0x200>
 8003186:	e00f      	b.n	80031a8 <UART_SetConfig+0x210>
 8003188:	2300      	movs	r3, #0
 800318a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800318e:	e042      	b.n	8003216 <UART_SetConfig+0x27e>
 8003190:	2302      	movs	r3, #2
 8003192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003196:	e03e      	b.n	8003216 <UART_SetConfig+0x27e>
 8003198:	2304      	movs	r3, #4
 800319a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800319e:	e03a      	b.n	8003216 <UART_SetConfig+0x27e>
 80031a0:	2308      	movs	r3, #8
 80031a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031a6:	e036      	b.n	8003216 <UART_SetConfig+0x27e>
 80031a8:	2310      	movs	r3, #16
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ae:	e032      	b.n	8003216 <UART_SetConfig+0x27e>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a30      	ldr	r2, [pc, #192]	@ (8003278 <UART_SetConfig+0x2e0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d12a      	bne.n	8003210 <UART_SetConfig+0x278>
 80031ba:	4b31      	ldr	r3, [pc, #196]	@ (8003280 <UART_SetConfig+0x2e8>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031c8:	d01a      	beq.n	8003200 <UART_SetConfig+0x268>
 80031ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031ce:	d81b      	bhi.n	8003208 <UART_SetConfig+0x270>
 80031d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031d4:	d00c      	beq.n	80031f0 <UART_SetConfig+0x258>
 80031d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031da:	d815      	bhi.n	8003208 <UART_SetConfig+0x270>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <UART_SetConfig+0x250>
 80031e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e4:	d008      	beq.n	80031f8 <UART_SetConfig+0x260>
 80031e6:	e00f      	b.n	8003208 <UART_SetConfig+0x270>
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ee:	e012      	b.n	8003216 <UART_SetConfig+0x27e>
 80031f0:	2302      	movs	r3, #2
 80031f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031f6:	e00e      	b.n	8003216 <UART_SetConfig+0x27e>
 80031f8:	2304      	movs	r3, #4
 80031fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031fe:	e00a      	b.n	8003216 <UART_SetConfig+0x27e>
 8003200:	2308      	movs	r3, #8
 8003202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003206:	e006      	b.n	8003216 <UART_SetConfig+0x27e>
 8003208:	2310      	movs	r3, #16
 800320a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800320e:	e002      	b.n	8003216 <UART_SetConfig+0x27e>
 8003210:	2310      	movs	r3, #16
 8003212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a17      	ldr	r2, [pc, #92]	@ (8003278 <UART_SetConfig+0x2e0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	f040 80a8 	bne.w	8003372 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003222:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003226:	2b08      	cmp	r3, #8
 8003228:	d834      	bhi.n	8003294 <UART_SetConfig+0x2fc>
 800322a:	a201      	add	r2, pc, #4	@ (adr r2, 8003230 <UART_SetConfig+0x298>)
 800322c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003230:	08003255 	.word	0x08003255
 8003234:	08003295 	.word	0x08003295
 8003238:	0800325d 	.word	0x0800325d
 800323c:	08003295 	.word	0x08003295
 8003240:	08003263 	.word	0x08003263
 8003244:	08003295 	.word	0x08003295
 8003248:	08003295 	.word	0x08003295
 800324c:	08003295 	.word	0x08003295
 8003250:	0800326b 	.word	0x0800326b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003254:	f7ff fb60 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8003258:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800325a:	e021      	b.n	80032a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800325c:	4b0c      	ldr	r3, [pc, #48]	@ (8003290 <UART_SetConfig+0x2f8>)
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003260:	e01e      	b.n	80032a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003262:	f7ff faeb 	bl	800283c <HAL_RCC_GetSysClockFreq>
 8003266:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003268:	e01a      	b.n	80032a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800326a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800326e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003270:	e016      	b.n	80032a0 <UART_SetConfig+0x308>
 8003272:	bf00      	nop
 8003274:	cfff69f3 	.word	0xcfff69f3
 8003278:	40008000 	.word	0x40008000
 800327c:	40013800 	.word	0x40013800
 8003280:	40021000 	.word	0x40021000
 8003284:	40004400 	.word	0x40004400
 8003288:	40004800 	.word	0x40004800
 800328c:	40004c00 	.word	0x40004c00
 8003290:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800329e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 812a 	beq.w	80034fc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	4a9e      	ldr	r2, [pc, #632]	@ (8003528 <UART_SetConfig+0x590>)
 80032ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032b2:	461a      	mov	r2, r3
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	4413      	add	r3, r2
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d305      	bcc.n	80032d8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d903      	bls.n	80032e0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80032de:	e10d      	b.n	80034fc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e2:	2200      	movs	r2, #0
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	60fa      	str	r2, [r7, #12]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	4a8e      	ldr	r2, [pc, #568]	@ (8003528 <UART_SetConfig+0x590>)
 80032ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2200      	movs	r2, #0
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003302:	f7fc ffe5 	bl	80002d0 <__aeabi_uldivmod>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4610      	mov	r0, r2
 800330c:	4619      	mov	r1, r3
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	020b      	lsls	r3, r1, #8
 8003318:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800331c:	0202      	lsls	r2, r0, #8
 800331e:	6979      	ldr	r1, [r7, #20]
 8003320:	6849      	ldr	r1, [r1, #4]
 8003322:	0849      	lsrs	r1, r1, #1
 8003324:	2000      	movs	r0, #0
 8003326:	460c      	mov	r4, r1
 8003328:	4605      	mov	r5, r0
 800332a:	eb12 0804 	adds.w	r8, r2, r4
 800332e:	eb43 0905 	adc.w	r9, r3, r5
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	469a      	mov	sl, r3
 800333a:	4693      	mov	fp, r2
 800333c:	4652      	mov	r2, sl
 800333e:	465b      	mov	r3, fp
 8003340:	4640      	mov	r0, r8
 8003342:	4649      	mov	r1, r9
 8003344:	f7fc ffc4 	bl	80002d0 <__aeabi_uldivmod>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4613      	mov	r3, r2
 800334e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003356:	d308      	bcc.n	800336a <UART_SetConfig+0x3d2>
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800335e:	d204      	bcs.n	800336a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6a3a      	ldr	r2, [r7, #32]
 8003366:	60da      	str	r2, [r3, #12]
 8003368:	e0c8      	b.n	80034fc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003370:	e0c4      	b.n	80034fc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800337a:	d167      	bne.n	800344c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800337c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003380:	2b08      	cmp	r3, #8
 8003382:	d828      	bhi.n	80033d6 <UART_SetConfig+0x43e>
 8003384:	a201      	add	r2, pc, #4	@ (adr r2, 800338c <UART_SetConfig+0x3f4>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	080033b1 	.word	0x080033b1
 8003390:	080033b9 	.word	0x080033b9
 8003394:	080033c1 	.word	0x080033c1
 8003398:	080033d7 	.word	0x080033d7
 800339c:	080033c7 	.word	0x080033c7
 80033a0:	080033d7 	.word	0x080033d7
 80033a4:	080033d7 	.word	0x080033d7
 80033a8:	080033d7 	.word	0x080033d7
 80033ac:	080033cf 	.word	0x080033cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b0:	f7ff fab2 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 80033b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033b6:	e014      	b.n	80033e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b8:	f7ff fac4 	bl	8002944 <HAL_RCC_GetPCLK2Freq>
 80033bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033be:	e010      	b.n	80033e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c0:	4b5a      	ldr	r3, [pc, #360]	@ (800352c <UART_SetConfig+0x594>)
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033c4:	e00d      	b.n	80033e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c6:	f7ff fa39 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80033ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033cc:	e009      	b.n	80033e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033d4:	e005      	b.n	80033e2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80033e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8089 	beq.w	80034fc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	4a4e      	ldr	r2, [pc, #312]	@ (8003528 <UART_SetConfig+0x590>)
 80033f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033f4:	461a      	mov	r2, r3
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80033fc:	005a      	lsls	r2, r3, #1
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	085b      	lsrs	r3, r3, #1
 8003404:	441a      	add	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	fbb2 f3f3 	udiv	r3, r2, r3
 800340e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	2b0f      	cmp	r3, #15
 8003414:	d916      	bls.n	8003444 <UART_SetConfig+0x4ac>
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800341c:	d212      	bcs.n	8003444 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	b29b      	uxth	r3, r3
 8003422:	f023 030f 	bic.w	r3, r3, #15
 8003426:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	b29b      	uxth	r3, r3
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	b29a      	uxth	r2, r3
 8003434:	8bfb      	ldrh	r3, [r7, #30]
 8003436:	4313      	orrs	r3, r2
 8003438:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	8bfa      	ldrh	r2, [r7, #30]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	e05b      	b.n	80034fc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800344a:	e057      	b.n	80034fc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800344c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003450:	2b08      	cmp	r3, #8
 8003452:	d828      	bhi.n	80034a6 <UART_SetConfig+0x50e>
 8003454:	a201      	add	r2, pc, #4	@ (adr r2, 800345c <UART_SetConfig+0x4c4>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	08003481 	.word	0x08003481
 8003460:	08003489 	.word	0x08003489
 8003464:	08003491 	.word	0x08003491
 8003468:	080034a7 	.word	0x080034a7
 800346c:	08003497 	.word	0x08003497
 8003470:	080034a7 	.word	0x080034a7
 8003474:	080034a7 	.word	0x080034a7
 8003478:	080034a7 	.word	0x080034a7
 800347c:	0800349f 	.word	0x0800349f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003480:	f7ff fa4a 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8003484:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003486:	e014      	b.n	80034b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003488:	f7ff fa5c 	bl	8002944 <HAL_RCC_GetPCLK2Freq>
 800348c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800348e:	e010      	b.n	80034b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003490:	4b26      	ldr	r3, [pc, #152]	@ (800352c <UART_SetConfig+0x594>)
 8003492:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003494:	e00d      	b.n	80034b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003496:	f7ff f9d1 	bl	800283c <HAL_RCC_GetSysClockFreq>
 800349a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800349c:	e009      	b.n	80034b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800349e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034a4:	e005      	b.n	80034b2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80034b0:	bf00      	nop
    }

    if (pclk != 0U)
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d021      	beq.n	80034fc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003528 <UART_SetConfig+0x590>)
 80034be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034c2:	461a      	mov	r2, r3
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	441a      	add	r2, r3
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	2b0f      	cmp	r3, #15
 80034e0:	d909      	bls.n	80034f6 <UART_SetConfig+0x55e>
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e8:	d205      	bcs.n	80034f6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60da      	str	r2, [r3, #12]
 80034f4:	e002      	b.n	80034fc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2201      	movs	r2, #1
 8003500:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2201      	movs	r2, #1
 8003508:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2200      	movs	r2, #0
 8003510:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003518:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800351c:	4618      	mov	r0, r3
 800351e:	3730      	adds	r7, #48	@ 0x30
 8003520:	46bd      	mov	sp, r7
 8003522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003526:	bf00      	nop
 8003528:	08004c7c 	.word	0x08004c7c
 800352c:	00f42400 	.word	0x00f42400

08003530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01a      	beq.n	8003646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800362e:	d10a      	bne.n	8003646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
  }
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b098      	sub	sp, #96	@ 0x60
 8003678:	af02      	add	r7, sp, #8
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003684:	f7fd fb6a 	bl	8000d5c <HAL_GetTick>
 8003688:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b08      	cmp	r3, #8
 8003696:	d12f      	bne.n	80036f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003698:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a0:	2200      	movs	r2, #0
 80036a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f88e 	bl	80037c8 <UART_WaitOnFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d022      	beq.n	80036f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ba:	e853 3f00 	ldrex	r3, [r3]
 80036be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036d8:	e841 2300 	strex	r3, r2, [r1]
 80036dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e6      	bne.n	80036b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e063      	b.n	80037c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b04      	cmp	r3, #4
 8003704:	d149      	bne.n	800379a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003706:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370e:	2200      	movs	r2, #0
 8003710:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f857 	bl	80037c8 <UART_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d03c      	beq.n	800379a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	623b      	str	r3, [r7, #32]
   return(result);
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003734:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800373e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003740:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003742:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003746:	e841 2300 	strex	r3, r2, [r1]
 800374a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800374c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1e6      	bne.n	8003720 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3308      	adds	r3, #8
 8003758:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	60fb      	str	r3, [r7, #12]
   return(result);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	64bb      	str	r3, [r7, #72]	@ 0x48
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3308      	adds	r3, #8
 8003770:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003772:	61fa      	str	r2, [r7, #28]
 8003774:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	69b9      	ldr	r1, [r7, #24]
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	617b      	str	r3, [r7, #20]
   return(result);
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e5      	bne.n	8003752 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e012      	b.n	80037c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3758      	adds	r7, #88	@ 0x58
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d8:	e04f      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d04b      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7fd fabb 	bl	8000d5c <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e04e      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d037      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b80      	cmp	r3, #128	@ 0x80
 800380e:	d034      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b40      	cmp	r3, #64	@ 0x40
 8003814:	d031      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b08      	cmp	r3, #8
 8003822:	d110      	bne.n	8003846 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2208      	movs	r2, #8
 800382a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f838 	bl	80038a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2208      	movs	r2, #8
 8003836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e029      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003854:	d111      	bne.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800385e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f81e 	bl	80038a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e00f      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	429a      	cmp	r2, r3
 8003896:	d0a0      	beq.n	80037da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b095      	sub	sp, #84	@ 0x54
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80038ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e6      	bne.n	80038aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3308      	adds	r3, #8
 80038e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	e853 3f00 	ldrex	r3, [r3]
 80038ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3308      	adds	r3, #8
 80038fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003900:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003902:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e3      	bne.n	80038dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d118      	bne.n	800394e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	60bb      	str	r3, [r7, #8]
   return(result);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f023 0310 	bic.w	r3, r3, #16
 8003930:	647b      	str	r3, [r7, #68]	@ 0x44
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	6979      	ldr	r1, [r7, #20]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	e841 2300 	strex	r3, r2, [r1]
 8003946:	613b      	str	r3, [r7, #16]
   return(result);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1e6      	bne.n	800391c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003962:	bf00      	nop
 8003964:	3754      	adds	r7, #84	@ 0x54
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800396e:	b480      	push	{r7}
 8003970:	b085      	sub	sp, #20
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_UARTEx_DisableFifoMode+0x16>
 8003980:	2302      	movs	r3, #2
 8003982:	e027      	b.n	80039d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	@ 0x24
 8003990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80039b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e02d      	b.n	8003a54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2224      	movs	r2, #36	@ 0x24
 8003a04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f84f 	bl	8003ad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e02d      	b.n	8003ad0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2224      	movs	r2, #36	@ 0x24
 8003a80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f811 	bl	8003ad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d108      	bne.n	8003afa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003af8:	e031      	b.n	8003b5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003afa:	2308      	movs	r3, #8
 8003afc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003afe:	2308      	movs	r3, #8
 8003b00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	0e5b      	lsrs	r3, r3, #25
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	0f5b      	lsrs	r3, r3, #29
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b22:	7bbb      	ldrb	r3, [r7, #14]
 8003b24:	7b3a      	ldrb	r2, [r7, #12]
 8003b26:	4911      	ldr	r1, [pc, #68]	@ (8003b6c <UARTEx_SetNbDataToProcess+0x94>)
 8003b28:	5c8a      	ldrb	r2, [r1, r2]
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b2e:	7b3a      	ldrb	r2, [r7, #12]
 8003b30:	490f      	ldr	r1, [pc, #60]	@ (8003b70 <UARTEx_SetNbDataToProcess+0x98>)
 8003b32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b34:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	7b7a      	ldrb	r2, [r7, #13]
 8003b44:	4909      	ldr	r1, [pc, #36]	@ (8003b6c <UARTEx_SetNbDataToProcess+0x94>)
 8003b46:	5c8a      	ldrb	r2, [r1, r2]
 8003b48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b4c:	7b7a      	ldrb	r2, [r7, #13]
 8003b4e:	4908      	ldr	r1, [pc, #32]	@ (8003b70 <UARTEx_SetNbDataToProcess+0x98>)
 8003b50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b52:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	08004c94 	.word	0x08004c94
 8003b70:	08004c9c 	.word	0x08004c9c

08003b74 <setup>:

//global variable
uint8_t prompt[15] = "\nSTM32G431 >> ";
uint8_t message[50];

void setup() {
 8003b74:	b5b0      	push	{r4, r5, r7, lr}
 8003b76:	af00      	add	r7, sp, #0
	strcpy((char*)message, "MSC 2024 - Capteurs\r\n");
 8003b78:	4a11      	ldr	r2, [pc, #68]	@ (8003bc0 <setup+0x4c>)
 8003b7a:	4b12      	ldr	r3, [pc, #72]	@ (8003bc4 <setup+0x50>)
 8003b7c:	4614      	mov	r4, r2
 8003b7e:	461d      	mov	r5, r3
 8003b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b84:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003b88:	6020      	str	r0, [r4, #0]
 8003b8a:	3404      	adds	r4, #4
 8003b8c:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&hlpuart1, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8003b8e:	480e      	ldr	r0, [pc, #56]	@ (8003bc8 <setup+0x54>)
 8003b90:	f7fc fb46 	bl	8000220 <strlen>
 8003b94:	4603      	mov	r3, r0
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9c:	490a      	ldr	r1, [pc, #40]	@ (8003bc8 <setup+0x54>)
 8003b9e:	480b      	ldr	r0, [pc, #44]	@ (8003bcc <setup+0x58>)
 8003ba0:	f7ff f96c 	bl	8002e7c <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, message, strlen((char*)message), HAL_MAX_DELAY);
 8003ba4:	4806      	ldr	r0, [pc, #24]	@ (8003bc0 <setup+0x4c>)
 8003ba6:	f7fc fb3b 	bl	8000220 <strlen>
 8003baa:	4603      	mov	r3, r0
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb2:	4903      	ldr	r1, [pc, #12]	@ (8003bc0 <setup+0x4c>)
 8003bb4:	4805      	ldr	r0, [pc, #20]	@ (8003bcc <setup+0x58>)
 8003bb6:	f7ff f961 	bl	8002e7c <HAL_UART_Transmit>
}
 8003bba:	bf00      	nop
 8003bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000184 	.word	0x20000184
 8003bc4:	08004bcc 	.word	0x08004bcc
 8003bc8:	2000000c 	.word	0x2000000c
 8003bcc:	200000e8 	.word	0x200000e8

08003bd0 <test_LEDs>:
/**
 * @brief Make PA5 LED blink.
 * @param delay : current delay
 * @retval HAL status
 */
void test_LEDs(int delay){
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	for(;;){
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8003bd8:	2120      	movs	r1, #32
 8003bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bde:	f7fd fb69 	bl	80012b4 <HAL_GPIO_TogglePin>
		HAL_Delay(delay);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fd f8c5 	bl	8000d74 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8003bea:	bf00      	nop
 8003bec:	e7f4      	b.n	8003bd8 <test_LEDs+0x8>
	...

08003bf0 <verifySensor>:
	}

}
void verifySensor(){
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
	for (uint8_t i=0x00;i<0xFF;i++){
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	71fb      	strb	r3, [r7, #7]
 8003bfa:	e014      	b.n	8003c26 <verifySensor+0x36>

		if(HAL_I2C_IsDeviceReady(&hi2c1,i,3,100)== HAL_OK){
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	b299      	uxth	r1, r3
 8003c00:	2364      	movs	r3, #100	@ 0x64
 8003c02:	2203      	movs	r2, #3
 8003c04:	480c      	ldr	r0, [pc, #48]	@ (8003c38 <verifySensor+0x48>)
 8003c06:	f7fd fd25 	bl	8001654 <HAL_I2C_IsDeviceReady>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d107      	bne.n	8003c20 <verifySensor+0x30>
			printf("[0x%02X|%d]: Peripheral avaible,avaible at [0x%02X]\r\n",i,(int)i,((uint16_t)i)>>1);
 8003c10:	79f9      	ldrb	r1, [r7, #7]
 8003c12:	79fa      	ldrb	r2, [r7, #7]
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	4808      	ldr	r0, [pc, #32]	@ (8003c3c <verifySensor+0x4c>)
 8003c1c:	f000 f8fe 	bl	8003e1c <iprintf>
	for (uint8_t i=0x00;i<0xFF;i++){
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	3301      	adds	r3, #1
 8003c24:	71fb      	strb	r3, [r7, #7]
 8003c26:	79fb      	ldrb	r3, [r7, #7]
 8003c28:	2bff      	cmp	r3, #255	@ 0xff
 8003c2a:	d1e7      	bne.n	8003bfc <verifySensor+0xc>
		}

	}
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000094 	.word	0x20000094
 8003c3c:	08004bf0 	.word	0x08004bf0

08003c40 <checkMPU9250Identity>:
/**
 * @brief Verify the identity of the MPU-950 sensor
 * @retval uint8_t is_sensor : if 1 the sensor is detected 0 otherwise
 */
uint8_t checkMPU9250Identity() {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af04      	add	r7, sp, #16
	uint8_t who_am_i = 0; // Variable pour stocker la valeur lue
 8003c46:	2300      	movs	r3, #0
 8003c48:	71fb      	strb	r3, [r7, #7]
	// Reading WHO_AM_I register
	if (HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS << 1, WHO_AM_I_REGISTER, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, HAL_MAX_DELAY) == HAL_OK) {
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	9302      	str	r3, [sp, #8]
 8003c50:	2301      	movs	r3, #1
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	1dfb      	adds	r3, r7, #7
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2301      	movs	r3, #1
 8003c5a:	2275      	movs	r2, #117	@ 0x75
 8003c5c:	21d0      	movs	r1, #208	@ 0xd0
 8003c5e:	480b      	ldr	r0, [pc, #44]	@ (8003c8c <checkMPU9250Identity+0x4c>)
 8003c60:	f7fd fbde 	bl	8001420 <HAL_I2C_Mem_Read>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d107      	bne.n	8003c7a <checkMPU9250Identity+0x3a>
		if (who_am_i == EXPECTED_WHO_AM_I) {
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	2b71      	cmp	r3, #113	@ 0x71
 8003c6e:	d104      	bne.n	8003c7a <checkMPU9250Identity+0x3a>
			printf("MPU-950 sensor, detected\r\n");
 8003c70:	4807      	ldr	r0, [pc, #28]	@ (8003c90 <checkMPU9250Identity+0x50>)
 8003c72:	f000 f93b 	bl	8003eec <puts>
			return 1; // Sensor detected
 8003c76:	2301      	movs	r3, #1
 8003c78:	e003      	b.n	8003c82 <checkMPU9250Identity+0x42>
		}
	}
	printf("MPU-950 sensor, not detected\r\n");
 8003c7a:	4806      	ldr	r0, [pc, #24]	@ (8003c94 <checkMPU9250Identity+0x54>)
 8003c7c:	f000 f936 	bl	8003eec <puts>
	return 0; // Sensor not detected
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000094 	.word	0x20000094
 8003c90:	08004c28 	.word	0x08004c28
 8003c94:	08004c44 	.word	0x08004c44

08003c98 <std>:
 8003c98:	2300      	movs	r3, #0
 8003c9a:	b510      	push	{r4, lr}
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8003ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ca6:	6083      	str	r3, [r0, #8]
 8003ca8:	8181      	strh	r1, [r0, #12]
 8003caa:	6643      	str	r3, [r0, #100]	@ 0x64
 8003cac:	81c2      	strh	r2, [r0, #14]
 8003cae:	6183      	str	r3, [r0, #24]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	305c      	adds	r0, #92	@ 0x5c
 8003cb6:	f000 f9f9 	bl	80040ac <memset>
 8003cba:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf0 <std+0x58>)
 8003cbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf4 <std+0x5c>)
 8003cc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf8 <std+0x60>)
 8003cc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cfc <std+0x64>)
 8003cc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003cca:	4b0d      	ldr	r3, [pc, #52]	@ (8003d00 <std+0x68>)
 8003ccc:	6224      	str	r4, [r4, #32]
 8003cce:	429c      	cmp	r4, r3
 8003cd0:	d006      	beq.n	8003ce0 <std+0x48>
 8003cd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003cd6:	4294      	cmp	r4, r2
 8003cd8:	d002      	beq.n	8003ce0 <std+0x48>
 8003cda:	33d0      	adds	r3, #208	@ 0xd0
 8003cdc:	429c      	cmp	r4, r3
 8003cde:	d105      	bne.n	8003cec <std+0x54>
 8003ce0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ce8:	f000 ba58 	b.w	800419c <__retarget_lock_init_recursive>
 8003cec:	bd10      	pop	{r4, pc}
 8003cee:	bf00      	nop
 8003cf0:	08003efd 	.word	0x08003efd
 8003cf4:	08003f1f 	.word	0x08003f1f
 8003cf8:	08003f57 	.word	0x08003f57
 8003cfc:	08003f7b 	.word	0x08003f7b
 8003d00:	200001b8 	.word	0x200001b8

08003d04 <stdio_exit_handler>:
 8003d04:	4a02      	ldr	r2, [pc, #8]	@ (8003d10 <stdio_exit_handler+0xc>)
 8003d06:	4903      	ldr	r1, [pc, #12]	@ (8003d14 <stdio_exit_handler+0x10>)
 8003d08:	4803      	ldr	r0, [pc, #12]	@ (8003d18 <stdio_exit_handler+0x14>)
 8003d0a:	f000 b869 	b.w	8003de0 <_fwalk_sglue>
 8003d0e:	bf00      	nop
 8003d10:	2000001c 	.word	0x2000001c
 8003d14:	08004a3d 	.word	0x08004a3d
 8003d18:	2000002c 	.word	0x2000002c

08003d1c <cleanup_stdio>:
 8003d1c:	6841      	ldr	r1, [r0, #4]
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d50 <cleanup_stdio+0x34>)
 8003d20:	4299      	cmp	r1, r3
 8003d22:	b510      	push	{r4, lr}
 8003d24:	4604      	mov	r4, r0
 8003d26:	d001      	beq.n	8003d2c <cleanup_stdio+0x10>
 8003d28:	f000 fe88 	bl	8004a3c <_fflush_r>
 8003d2c:	68a1      	ldr	r1, [r4, #8]
 8003d2e:	4b09      	ldr	r3, [pc, #36]	@ (8003d54 <cleanup_stdio+0x38>)
 8003d30:	4299      	cmp	r1, r3
 8003d32:	d002      	beq.n	8003d3a <cleanup_stdio+0x1e>
 8003d34:	4620      	mov	r0, r4
 8003d36:	f000 fe81 	bl	8004a3c <_fflush_r>
 8003d3a:	68e1      	ldr	r1, [r4, #12]
 8003d3c:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <cleanup_stdio+0x3c>)
 8003d3e:	4299      	cmp	r1, r3
 8003d40:	d004      	beq.n	8003d4c <cleanup_stdio+0x30>
 8003d42:	4620      	mov	r0, r4
 8003d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d48:	f000 be78 	b.w	8004a3c <_fflush_r>
 8003d4c:	bd10      	pop	{r4, pc}
 8003d4e:	bf00      	nop
 8003d50:	200001b8 	.word	0x200001b8
 8003d54:	20000220 	.word	0x20000220
 8003d58:	20000288 	.word	0x20000288

08003d5c <global_stdio_init.part.0>:
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <global_stdio_init.part.0+0x30>)
 8003d60:	4c0b      	ldr	r4, [pc, #44]	@ (8003d90 <global_stdio_init.part.0+0x34>)
 8003d62:	4a0c      	ldr	r2, [pc, #48]	@ (8003d94 <global_stdio_init.part.0+0x38>)
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	4620      	mov	r0, r4
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2104      	movs	r1, #4
 8003d6c:	f7ff ff94 	bl	8003c98 <std>
 8003d70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d74:	2201      	movs	r2, #1
 8003d76:	2109      	movs	r1, #9
 8003d78:	f7ff ff8e 	bl	8003c98 <std>
 8003d7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d80:	2202      	movs	r2, #2
 8003d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d86:	2112      	movs	r1, #18
 8003d88:	f7ff bf86 	b.w	8003c98 <std>
 8003d8c:	200002f0 	.word	0x200002f0
 8003d90:	200001b8 	.word	0x200001b8
 8003d94:	08003d05 	.word	0x08003d05

08003d98 <__sfp_lock_acquire>:
 8003d98:	4801      	ldr	r0, [pc, #4]	@ (8003da0 <__sfp_lock_acquire+0x8>)
 8003d9a:	f000 ba00 	b.w	800419e <__retarget_lock_acquire_recursive>
 8003d9e:	bf00      	nop
 8003da0:	200002f9 	.word	0x200002f9

08003da4 <__sfp_lock_release>:
 8003da4:	4801      	ldr	r0, [pc, #4]	@ (8003dac <__sfp_lock_release+0x8>)
 8003da6:	f000 b9fb 	b.w	80041a0 <__retarget_lock_release_recursive>
 8003daa:	bf00      	nop
 8003dac:	200002f9 	.word	0x200002f9

08003db0 <__sinit>:
 8003db0:	b510      	push	{r4, lr}
 8003db2:	4604      	mov	r4, r0
 8003db4:	f7ff fff0 	bl	8003d98 <__sfp_lock_acquire>
 8003db8:	6a23      	ldr	r3, [r4, #32]
 8003dba:	b11b      	cbz	r3, 8003dc4 <__sinit+0x14>
 8003dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc0:	f7ff bff0 	b.w	8003da4 <__sfp_lock_release>
 8003dc4:	4b04      	ldr	r3, [pc, #16]	@ (8003dd8 <__sinit+0x28>)
 8003dc6:	6223      	str	r3, [r4, #32]
 8003dc8:	4b04      	ldr	r3, [pc, #16]	@ (8003ddc <__sinit+0x2c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f5      	bne.n	8003dbc <__sinit+0xc>
 8003dd0:	f7ff ffc4 	bl	8003d5c <global_stdio_init.part.0>
 8003dd4:	e7f2      	b.n	8003dbc <__sinit+0xc>
 8003dd6:	bf00      	nop
 8003dd8:	08003d1d 	.word	0x08003d1d
 8003ddc:	200002f0 	.word	0x200002f0

08003de0 <_fwalk_sglue>:
 8003de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003de4:	4607      	mov	r7, r0
 8003de6:	4688      	mov	r8, r1
 8003de8:	4614      	mov	r4, r2
 8003dea:	2600      	movs	r6, #0
 8003dec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003df0:	f1b9 0901 	subs.w	r9, r9, #1
 8003df4:	d505      	bpl.n	8003e02 <_fwalk_sglue+0x22>
 8003df6:	6824      	ldr	r4, [r4, #0]
 8003df8:	2c00      	cmp	r4, #0
 8003dfa:	d1f7      	bne.n	8003dec <_fwalk_sglue+0xc>
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e02:	89ab      	ldrh	r3, [r5, #12]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d907      	bls.n	8003e18 <_fwalk_sglue+0x38>
 8003e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	d003      	beq.n	8003e18 <_fwalk_sglue+0x38>
 8003e10:	4629      	mov	r1, r5
 8003e12:	4638      	mov	r0, r7
 8003e14:	47c0      	blx	r8
 8003e16:	4306      	orrs	r6, r0
 8003e18:	3568      	adds	r5, #104	@ 0x68
 8003e1a:	e7e9      	b.n	8003df0 <_fwalk_sglue+0x10>

08003e1c <iprintf>:
 8003e1c:	b40f      	push	{r0, r1, r2, r3}
 8003e1e:	b507      	push	{r0, r1, r2, lr}
 8003e20:	4906      	ldr	r1, [pc, #24]	@ (8003e3c <iprintf+0x20>)
 8003e22:	ab04      	add	r3, sp, #16
 8003e24:	6808      	ldr	r0, [r1, #0]
 8003e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e2a:	6881      	ldr	r1, [r0, #8]
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	f000 fadb 	bl	80043e8 <_vfiprintf_r>
 8003e32:	b003      	add	sp, #12
 8003e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e38:	b004      	add	sp, #16
 8003e3a:	4770      	bx	lr
 8003e3c:	20000028 	.word	0x20000028

08003e40 <_puts_r>:
 8003e40:	6a03      	ldr	r3, [r0, #32]
 8003e42:	b570      	push	{r4, r5, r6, lr}
 8003e44:	6884      	ldr	r4, [r0, #8]
 8003e46:	4605      	mov	r5, r0
 8003e48:	460e      	mov	r6, r1
 8003e4a:	b90b      	cbnz	r3, 8003e50 <_puts_r+0x10>
 8003e4c:	f7ff ffb0 	bl	8003db0 <__sinit>
 8003e50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e52:	07db      	lsls	r3, r3, #31
 8003e54:	d405      	bmi.n	8003e62 <_puts_r+0x22>
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	0598      	lsls	r0, r3, #22
 8003e5a:	d402      	bmi.n	8003e62 <_puts_r+0x22>
 8003e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e5e:	f000 f99e 	bl	800419e <__retarget_lock_acquire_recursive>
 8003e62:	89a3      	ldrh	r3, [r4, #12]
 8003e64:	0719      	lsls	r1, r3, #28
 8003e66:	d502      	bpl.n	8003e6e <_puts_r+0x2e>
 8003e68:	6923      	ldr	r3, [r4, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d135      	bne.n	8003eda <_puts_r+0x9a>
 8003e6e:	4621      	mov	r1, r4
 8003e70:	4628      	mov	r0, r5
 8003e72:	f000 f8c5 	bl	8004000 <__swsetup_r>
 8003e76:	b380      	cbz	r0, 8003eda <_puts_r+0x9a>
 8003e78:	f04f 35ff 	mov.w	r5, #4294967295
 8003e7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e7e:	07da      	lsls	r2, r3, #31
 8003e80:	d405      	bmi.n	8003e8e <_puts_r+0x4e>
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	059b      	lsls	r3, r3, #22
 8003e86:	d402      	bmi.n	8003e8e <_puts_r+0x4e>
 8003e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e8a:	f000 f989 	bl	80041a0 <__retarget_lock_release_recursive>
 8003e8e:	4628      	mov	r0, r5
 8003e90:	bd70      	pop	{r4, r5, r6, pc}
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	da04      	bge.n	8003ea0 <_puts_r+0x60>
 8003e96:	69a2      	ldr	r2, [r4, #24]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	dc17      	bgt.n	8003ecc <_puts_r+0x8c>
 8003e9c:	290a      	cmp	r1, #10
 8003e9e:	d015      	beq.n	8003ecc <_puts_r+0x8c>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	6022      	str	r2, [r4, #0]
 8003ea6:	7019      	strb	r1, [r3, #0]
 8003ea8:	68a3      	ldr	r3, [r4, #8]
 8003eaa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	60a3      	str	r3, [r4, #8]
 8003eb2:	2900      	cmp	r1, #0
 8003eb4:	d1ed      	bne.n	8003e92 <_puts_r+0x52>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	da11      	bge.n	8003ede <_puts_r+0x9e>
 8003eba:	4622      	mov	r2, r4
 8003ebc:	210a      	movs	r1, #10
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f000 f85f 	bl	8003f82 <__swbuf_r>
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d0d7      	beq.n	8003e78 <_puts_r+0x38>
 8003ec8:	250a      	movs	r5, #10
 8003eca:	e7d7      	b.n	8003e7c <_puts_r+0x3c>
 8003ecc:	4622      	mov	r2, r4
 8003ece:	4628      	mov	r0, r5
 8003ed0:	f000 f857 	bl	8003f82 <__swbuf_r>
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	d1e7      	bne.n	8003ea8 <_puts_r+0x68>
 8003ed8:	e7ce      	b.n	8003e78 <_puts_r+0x38>
 8003eda:	3e01      	subs	r6, #1
 8003edc:	e7e4      	b.n	8003ea8 <_puts_r+0x68>
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	6022      	str	r2, [r4, #0]
 8003ee4:	220a      	movs	r2, #10
 8003ee6:	701a      	strb	r2, [r3, #0]
 8003ee8:	e7ee      	b.n	8003ec8 <_puts_r+0x88>
	...

08003eec <puts>:
 8003eec:	4b02      	ldr	r3, [pc, #8]	@ (8003ef8 <puts+0xc>)
 8003eee:	4601      	mov	r1, r0
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	f7ff bfa5 	b.w	8003e40 <_puts_r>
 8003ef6:	bf00      	nop
 8003ef8:	20000028 	.word	0x20000028

08003efc <__sread>:
 8003efc:	b510      	push	{r4, lr}
 8003efe:	460c      	mov	r4, r1
 8003f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f04:	f000 f8fc 	bl	8004100 <_read_r>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	bfab      	itete	ge
 8003f0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f10:	181b      	addge	r3, r3, r0
 8003f12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f16:	bfac      	ite	ge
 8003f18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f1a:	81a3      	strhlt	r3, [r4, #12]
 8003f1c:	bd10      	pop	{r4, pc}

08003f1e <__swrite>:
 8003f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f22:	461f      	mov	r7, r3
 8003f24:	898b      	ldrh	r3, [r1, #12]
 8003f26:	05db      	lsls	r3, r3, #23
 8003f28:	4605      	mov	r5, r0
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	4616      	mov	r6, r2
 8003f2e:	d505      	bpl.n	8003f3c <__swrite+0x1e>
 8003f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f34:	2302      	movs	r3, #2
 8003f36:	2200      	movs	r2, #0
 8003f38:	f000 f8d0 	bl	80040dc <_lseek_r>
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f46:	81a3      	strh	r3, [r4, #12]
 8003f48:	4632      	mov	r2, r6
 8003f4a:	463b      	mov	r3, r7
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f52:	f000 b8e7 	b.w	8004124 <_write_r>

08003f56 <__sseek>:
 8003f56:	b510      	push	{r4, lr}
 8003f58:	460c      	mov	r4, r1
 8003f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5e:	f000 f8bd 	bl	80040dc <_lseek_r>
 8003f62:	1c43      	adds	r3, r0, #1
 8003f64:	89a3      	ldrh	r3, [r4, #12]
 8003f66:	bf15      	itete	ne
 8003f68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f72:	81a3      	strheq	r3, [r4, #12]
 8003f74:	bf18      	it	ne
 8003f76:	81a3      	strhne	r3, [r4, #12]
 8003f78:	bd10      	pop	{r4, pc}

08003f7a <__sclose>:
 8003f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f7e:	f000 b89d 	b.w	80040bc <_close_r>

08003f82 <__swbuf_r>:
 8003f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f84:	460e      	mov	r6, r1
 8003f86:	4614      	mov	r4, r2
 8003f88:	4605      	mov	r5, r0
 8003f8a:	b118      	cbz	r0, 8003f94 <__swbuf_r+0x12>
 8003f8c:	6a03      	ldr	r3, [r0, #32]
 8003f8e:	b90b      	cbnz	r3, 8003f94 <__swbuf_r+0x12>
 8003f90:	f7ff ff0e 	bl	8003db0 <__sinit>
 8003f94:	69a3      	ldr	r3, [r4, #24]
 8003f96:	60a3      	str	r3, [r4, #8]
 8003f98:	89a3      	ldrh	r3, [r4, #12]
 8003f9a:	071a      	lsls	r2, r3, #28
 8003f9c:	d501      	bpl.n	8003fa2 <__swbuf_r+0x20>
 8003f9e:	6923      	ldr	r3, [r4, #16]
 8003fa0:	b943      	cbnz	r3, 8003fb4 <__swbuf_r+0x32>
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	f000 f82b 	bl	8004000 <__swsetup_r>
 8003faa:	b118      	cbz	r0, 8003fb4 <__swbuf_r+0x32>
 8003fac:	f04f 37ff 	mov.w	r7, #4294967295
 8003fb0:	4638      	mov	r0, r7
 8003fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	6922      	ldr	r2, [r4, #16]
 8003fb8:	1a98      	subs	r0, r3, r2
 8003fba:	6963      	ldr	r3, [r4, #20]
 8003fbc:	b2f6      	uxtb	r6, r6
 8003fbe:	4283      	cmp	r3, r0
 8003fc0:	4637      	mov	r7, r6
 8003fc2:	dc05      	bgt.n	8003fd0 <__swbuf_r+0x4e>
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	f000 fd38 	bl	8004a3c <_fflush_r>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d1ed      	bne.n	8003fac <__swbuf_r+0x2a>
 8003fd0:	68a3      	ldr	r3, [r4, #8]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	60a3      	str	r3, [r4, #8]
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	6022      	str	r2, [r4, #0]
 8003fdc:	701e      	strb	r6, [r3, #0]
 8003fde:	6962      	ldr	r2, [r4, #20]
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d004      	beq.n	8003ff0 <__swbuf_r+0x6e>
 8003fe6:	89a3      	ldrh	r3, [r4, #12]
 8003fe8:	07db      	lsls	r3, r3, #31
 8003fea:	d5e1      	bpl.n	8003fb0 <__swbuf_r+0x2e>
 8003fec:	2e0a      	cmp	r6, #10
 8003fee:	d1df      	bne.n	8003fb0 <__swbuf_r+0x2e>
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	f000 fd22 	bl	8004a3c <_fflush_r>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d0d9      	beq.n	8003fb0 <__swbuf_r+0x2e>
 8003ffc:	e7d6      	b.n	8003fac <__swbuf_r+0x2a>
	...

08004000 <__swsetup_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	4b29      	ldr	r3, [pc, #164]	@ (80040a8 <__swsetup_r+0xa8>)
 8004004:	4605      	mov	r5, r0
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	460c      	mov	r4, r1
 800400a:	b118      	cbz	r0, 8004014 <__swsetup_r+0x14>
 800400c:	6a03      	ldr	r3, [r0, #32]
 800400e:	b90b      	cbnz	r3, 8004014 <__swsetup_r+0x14>
 8004010:	f7ff fece 	bl	8003db0 <__sinit>
 8004014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004018:	0719      	lsls	r1, r3, #28
 800401a:	d422      	bmi.n	8004062 <__swsetup_r+0x62>
 800401c:	06da      	lsls	r2, r3, #27
 800401e:	d407      	bmi.n	8004030 <__swsetup_r+0x30>
 8004020:	2209      	movs	r2, #9
 8004022:	602a      	str	r2, [r5, #0]
 8004024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004028:	81a3      	strh	r3, [r4, #12]
 800402a:	f04f 30ff 	mov.w	r0, #4294967295
 800402e:	e033      	b.n	8004098 <__swsetup_r+0x98>
 8004030:	0758      	lsls	r0, r3, #29
 8004032:	d512      	bpl.n	800405a <__swsetup_r+0x5a>
 8004034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004036:	b141      	cbz	r1, 800404a <__swsetup_r+0x4a>
 8004038:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800403c:	4299      	cmp	r1, r3
 800403e:	d002      	beq.n	8004046 <__swsetup_r+0x46>
 8004040:	4628      	mov	r0, r5
 8004042:	f000 f8af 	bl	80041a4 <_free_r>
 8004046:	2300      	movs	r3, #0
 8004048:	6363      	str	r3, [r4, #52]	@ 0x34
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004050:	81a3      	strh	r3, [r4, #12]
 8004052:	2300      	movs	r3, #0
 8004054:	6063      	str	r3, [r4, #4]
 8004056:	6923      	ldr	r3, [r4, #16]
 8004058:	6023      	str	r3, [r4, #0]
 800405a:	89a3      	ldrh	r3, [r4, #12]
 800405c:	f043 0308 	orr.w	r3, r3, #8
 8004060:	81a3      	strh	r3, [r4, #12]
 8004062:	6923      	ldr	r3, [r4, #16]
 8004064:	b94b      	cbnz	r3, 800407a <__swsetup_r+0x7a>
 8004066:	89a3      	ldrh	r3, [r4, #12]
 8004068:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800406c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004070:	d003      	beq.n	800407a <__swsetup_r+0x7a>
 8004072:	4621      	mov	r1, r4
 8004074:	4628      	mov	r0, r5
 8004076:	f000 fd2f 	bl	8004ad8 <__smakebuf_r>
 800407a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800407e:	f013 0201 	ands.w	r2, r3, #1
 8004082:	d00a      	beq.n	800409a <__swsetup_r+0x9a>
 8004084:	2200      	movs	r2, #0
 8004086:	60a2      	str	r2, [r4, #8]
 8004088:	6962      	ldr	r2, [r4, #20]
 800408a:	4252      	negs	r2, r2
 800408c:	61a2      	str	r2, [r4, #24]
 800408e:	6922      	ldr	r2, [r4, #16]
 8004090:	b942      	cbnz	r2, 80040a4 <__swsetup_r+0xa4>
 8004092:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004096:	d1c5      	bne.n	8004024 <__swsetup_r+0x24>
 8004098:	bd38      	pop	{r3, r4, r5, pc}
 800409a:	0799      	lsls	r1, r3, #30
 800409c:	bf58      	it	pl
 800409e:	6962      	ldrpl	r2, [r4, #20]
 80040a0:	60a2      	str	r2, [r4, #8]
 80040a2:	e7f4      	b.n	800408e <__swsetup_r+0x8e>
 80040a4:	2000      	movs	r0, #0
 80040a6:	e7f7      	b.n	8004098 <__swsetup_r+0x98>
 80040a8:	20000028 	.word	0x20000028

080040ac <memset>:
 80040ac:	4402      	add	r2, r0
 80040ae:	4603      	mov	r3, r0
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d100      	bne.n	80040b6 <memset+0xa>
 80040b4:	4770      	bx	lr
 80040b6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ba:	e7f9      	b.n	80040b0 <memset+0x4>

080040bc <_close_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4d06      	ldr	r5, [pc, #24]	@ (80040d8 <_close_r+0x1c>)
 80040c0:	2300      	movs	r3, #0
 80040c2:	4604      	mov	r4, r0
 80040c4:	4608      	mov	r0, r1
 80040c6:	602b      	str	r3, [r5, #0]
 80040c8:	f7fc fd3e 	bl	8000b48 <_close>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d102      	bne.n	80040d6 <_close_r+0x1a>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	b103      	cbz	r3, 80040d6 <_close_r+0x1a>
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	200002f4 	.word	0x200002f4

080040dc <_lseek_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4d07      	ldr	r5, [pc, #28]	@ (80040fc <_lseek_r+0x20>)
 80040e0:	4604      	mov	r4, r0
 80040e2:	4608      	mov	r0, r1
 80040e4:	4611      	mov	r1, r2
 80040e6:	2200      	movs	r2, #0
 80040e8:	602a      	str	r2, [r5, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	f7fc fd53 	bl	8000b96 <_lseek>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	d102      	bne.n	80040fa <_lseek_r+0x1e>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	b103      	cbz	r3, 80040fa <_lseek_r+0x1e>
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	200002f4 	.word	0x200002f4

08004100 <_read_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4d07      	ldr	r5, [pc, #28]	@ (8004120 <_read_r+0x20>)
 8004104:	4604      	mov	r4, r0
 8004106:	4608      	mov	r0, r1
 8004108:	4611      	mov	r1, r2
 800410a:	2200      	movs	r2, #0
 800410c:	602a      	str	r2, [r5, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	f7fc fce1 	bl	8000ad6 <_read>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	d102      	bne.n	800411e <_read_r+0x1e>
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	b103      	cbz	r3, 800411e <_read_r+0x1e>
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	200002f4 	.word	0x200002f4

08004124 <_write_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4d07      	ldr	r5, [pc, #28]	@ (8004144 <_write_r+0x20>)
 8004128:	4604      	mov	r4, r0
 800412a:	4608      	mov	r0, r1
 800412c:	4611      	mov	r1, r2
 800412e:	2200      	movs	r2, #0
 8004130:	602a      	str	r2, [r5, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f7fc fcec 	bl	8000b10 <_write>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_write_r+0x1e>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_write_r+0x1e>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	200002f4 	.word	0x200002f4

08004148 <__errno>:
 8004148:	4b01      	ldr	r3, [pc, #4]	@ (8004150 <__errno+0x8>)
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20000028 	.word	0x20000028

08004154 <__libc_init_array>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	4d0d      	ldr	r5, [pc, #52]	@ (800418c <__libc_init_array+0x38>)
 8004158:	4c0d      	ldr	r4, [pc, #52]	@ (8004190 <__libc_init_array+0x3c>)
 800415a:	1b64      	subs	r4, r4, r5
 800415c:	10a4      	asrs	r4, r4, #2
 800415e:	2600      	movs	r6, #0
 8004160:	42a6      	cmp	r6, r4
 8004162:	d109      	bne.n	8004178 <__libc_init_array+0x24>
 8004164:	4d0b      	ldr	r5, [pc, #44]	@ (8004194 <__libc_init_array+0x40>)
 8004166:	4c0c      	ldr	r4, [pc, #48]	@ (8004198 <__libc_init_array+0x44>)
 8004168:	f000 fd24 	bl	8004bb4 <_init>
 800416c:	1b64      	subs	r4, r4, r5
 800416e:	10a4      	asrs	r4, r4, #2
 8004170:	2600      	movs	r6, #0
 8004172:	42a6      	cmp	r6, r4
 8004174:	d105      	bne.n	8004182 <__libc_init_array+0x2e>
 8004176:	bd70      	pop	{r4, r5, r6, pc}
 8004178:	f855 3b04 	ldr.w	r3, [r5], #4
 800417c:	4798      	blx	r3
 800417e:	3601      	adds	r6, #1
 8004180:	e7ee      	b.n	8004160 <__libc_init_array+0xc>
 8004182:	f855 3b04 	ldr.w	r3, [r5], #4
 8004186:	4798      	blx	r3
 8004188:	3601      	adds	r6, #1
 800418a:	e7f2      	b.n	8004172 <__libc_init_array+0x1e>
 800418c:	08004ce0 	.word	0x08004ce0
 8004190:	08004ce0 	.word	0x08004ce0
 8004194:	08004ce0 	.word	0x08004ce0
 8004198:	08004ce4 	.word	0x08004ce4

0800419c <__retarget_lock_init_recursive>:
 800419c:	4770      	bx	lr

0800419e <__retarget_lock_acquire_recursive>:
 800419e:	4770      	bx	lr

080041a0 <__retarget_lock_release_recursive>:
 80041a0:	4770      	bx	lr
	...

080041a4 <_free_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4605      	mov	r5, r0
 80041a8:	2900      	cmp	r1, #0
 80041aa:	d041      	beq.n	8004230 <_free_r+0x8c>
 80041ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b0:	1f0c      	subs	r4, r1, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bfb8      	it	lt
 80041b6:	18e4      	addlt	r4, r4, r3
 80041b8:	f000 f8e0 	bl	800437c <__malloc_lock>
 80041bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004234 <_free_r+0x90>)
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	b933      	cbnz	r3, 80041d0 <_free_r+0x2c>
 80041c2:	6063      	str	r3, [r4, #4]
 80041c4:	6014      	str	r4, [r2, #0]
 80041c6:	4628      	mov	r0, r5
 80041c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041cc:	f000 b8dc 	b.w	8004388 <__malloc_unlock>
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	d908      	bls.n	80041e6 <_free_r+0x42>
 80041d4:	6820      	ldr	r0, [r4, #0]
 80041d6:	1821      	adds	r1, r4, r0
 80041d8:	428b      	cmp	r3, r1
 80041da:	bf01      	itttt	eq
 80041dc:	6819      	ldreq	r1, [r3, #0]
 80041de:	685b      	ldreq	r3, [r3, #4]
 80041e0:	1809      	addeq	r1, r1, r0
 80041e2:	6021      	streq	r1, [r4, #0]
 80041e4:	e7ed      	b.n	80041c2 <_free_r+0x1e>
 80041e6:	461a      	mov	r2, r3
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	b10b      	cbz	r3, 80041f0 <_free_r+0x4c>
 80041ec:	42a3      	cmp	r3, r4
 80041ee:	d9fa      	bls.n	80041e6 <_free_r+0x42>
 80041f0:	6811      	ldr	r1, [r2, #0]
 80041f2:	1850      	adds	r0, r2, r1
 80041f4:	42a0      	cmp	r0, r4
 80041f6:	d10b      	bne.n	8004210 <_free_r+0x6c>
 80041f8:	6820      	ldr	r0, [r4, #0]
 80041fa:	4401      	add	r1, r0
 80041fc:	1850      	adds	r0, r2, r1
 80041fe:	4283      	cmp	r3, r0
 8004200:	6011      	str	r1, [r2, #0]
 8004202:	d1e0      	bne.n	80041c6 <_free_r+0x22>
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	6053      	str	r3, [r2, #4]
 800420a:	4408      	add	r0, r1
 800420c:	6010      	str	r0, [r2, #0]
 800420e:	e7da      	b.n	80041c6 <_free_r+0x22>
 8004210:	d902      	bls.n	8004218 <_free_r+0x74>
 8004212:	230c      	movs	r3, #12
 8004214:	602b      	str	r3, [r5, #0]
 8004216:	e7d6      	b.n	80041c6 <_free_r+0x22>
 8004218:	6820      	ldr	r0, [r4, #0]
 800421a:	1821      	adds	r1, r4, r0
 800421c:	428b      	cmp	r3, r1
 800421e:	bf04      	itt	eq
 8004220:	6819      	ldreq	r1, [r3, #0]
 8004222:	685b      	ldreq	r3, [r3, #4]
 8004224:	6063      	str	r3, [r4, #4]
 8004226:	bf04      	itt	eq
 8004228:	1809      	addeq	r1, r1, r0
 800422a:	6021      	streq	r1, [r4, #0]
 800422c:	6054      	str	r4, [r2, #4]
 800422e:	e7ca      	b.n	80041c6 <_free_r+0x22>
 8004230:	bd38      	pop	{r3, r4, r5, pc}
 8004232:	bf00      	nop
 8004234:	20000300 	.word	0x20000300

08004238 <sbrk_aligned>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	4e0f      	ldr	r6, [pc, #60]	@ (8004278 <sbrk_aligned+0x40>)
 800423c:	460c      	mov	r4, r1
 800423e:	6831      	ldr	r1, [r6, #0]
 8004240:	4605      	mov	r5, r0
 8004242:	b911      	cbnz	r1, 800424a <sbrk_aligned+0x12>
 8004244:	f000 fca6 	bl	8004b94 <_sbrk_r>
 8004248:	6030      	str	r0, [r6, #0]
 800424a:	4621      	mov	r1, r4
 800424c:	4628      	mov	r0, r5
 800424e:	f000 fca1 	bl	8004b94 <_sbrk_r>
 8004252:	1c43      	adds	r3, r0, #1
 8004254:	d103      	bne.n	800425e <sbrk_aligned+0x26>
 8004256:	f04f 34ff 	mov.w	r4, #4294967295
 800425a:	4620      	mov	r0, r4
 800425c:	bd70      	pop	{r4, r5, r6, pc}
 800425e:	1cc4      	adds	r4, r0, #3
 8004260:	f024 0403 	bic.w	r4, r4, #3
 8004264:	42a0      	cmp	r0, r4
 8004266:	d0f8      	beq.n	800425a <sbrk_aligned+0x22>
 8004268:	1a21      	subs	r1, r4, r0
 800426a:	4628      	mov	r0, r5
 800426c:	f000 fc92 	bl	8004b94 <_sbrk_r>
 8004270:	3001      	adds	r0, #1
 8004272:	d1f2      	bne.n	800425a <sbrk_aligned+0x22>
 8004274:	e7ef      	b.n	8004256 <sbrk_aligned+0x1e>
 8004276:	bf00      	nop
 8004278:	200002fc 	.word	0x200002fc

0800427c <_malloc_r>:
 800427c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004280:	1ccd      	adds	r5, r1, #3
 8004282:	f025 0503 	bic.w	r5, r5, #3
 8004286:	3508      	adds	r5, #8
 8004288:	2d0c      	cmp	r5, #12
 800428a:	bf38      	it	cc
 800428c:	250c      	movcc	r5, #12
 800428e:	2d00      	cmp	r5, #0
 8004290:	4606      	mov	r6, r0
 8004292:	db01      	blt.n	8004298 <_malloc_r+0x1c>
 8004294:	42a9      	cmp	r1, r5
 8004296:	d904      	bls.n	80042a2 <_malloc_r+0x26>
 8004298:	230c      	movs	r3, #12
 800429a:	6033      	str	r3, [r6, #0]
 800429c:	2000      	movs	r0, #0
 800429e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004378 <_malloc_r+0xfc>
 80042a6:	f000 f869 	bl	800437c <__malloc_lock>
 80042aa:	f8d8 3000 	ldr.w	r3, [r8]
 80042ae:	461c      	mov	r4, r3
 80042b0:	bb44      	cbnz	r4, 8004304 <_malloc_r+0x88>
 80042b2:	4629      	mov	r1, r5
 80042b4:	4630      	mov	r0, r6
 80042b6:	f7ff ffbf 	bl	8004238 <sbrk_aligned>
 80042ba:	1c43      	adds	r3, r0, #1
 80042bc:	4604      	mov	r4, r0
 80042be:	d158      	bne.n	8004372 <_malloc_r+0xf6>
 80042c0:	f8d8 4000 	ldr.w	r4, [r8]
 80042c4:	4627      	mov	r7, r4
 80042c6:	2f00      	cmp	r7, #0
 80042c8:	d143      	bne.n	8004352 <_malloc_r+0xd6>
 80042ca:	2c00      	cmp	r4, #0
 80042cc:	d04b      	beq.n	8004366 <_malloc_r+0xea>
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	4639      	mov	r1, r7
 80042d2:	4630      	mov	r0, r6
 80042d4:	eb04 0903 	add.w	r9, r4, r3
 80042d8:	f000 fc5c 	bl	8004b94 <_sbrk_r>
 80042dc:	4581      	cmp	r9, r0
 80042de:	d142      	bne.n	8004366 <_malloc_r+0xea>
 80042e0:	6821      	ldr	r1, [r4, #0]
 80042e2:	1a6d      	subs	r5, r5, r1
 80042e4:	4629      	mov	r1, r5
 80042e6:	4630      	mov	r0, r6
 80042e8:	f7ff ffa6 	bl	8004238 <sbrk_aligned>
 80042ec:	3001      	adds	r0, #1
 80042ee:	d03a      	beq.n	8004366 <_malloc_r+0xea>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	442b      	add	r3, r5
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	f8d8 3000 	ldr.w	r3, [r8]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	bb62      	cbnz	r2, 8004358 <_malloc_r+0xdc>
 80042fe:	f8c8 7000 	str.w	r7, [r8]
 8004302:	e00f      	b.n	8004324 <_malloc_r+0xa8>
 8004304:	6822      	ldr	r2, [r4, #0]
 8004306:	1b52      	subs	r2, r2, r5
 8004308:	d420      	bmi.n	800434c <_malloc_r+0xd0>
 800430a:	2a0b      	cmp	r2, #11
 800430c:	d917      	bls.n	800433e <_malloc_r+0xc2>
 800430e:	1961      	adds	r1, r4, r5
 8004310:	42a3      	cmp	r3, r4
 8004312:	6025      	str	r5, [r4, #0]
 8004314:	bf18      	it	ne
 8004316:	6059      	strne	r1, [r3, #4]
 8004318:	6863      	ldr	r3, [r4, #4]
 800431a:	bf08      	it	eq
 800431c:	f8c8 1000 	streq.w	r1, [r8]
 8004320:	5162      	str	r2, [r4, r5]
 8004322:	604b      	str	r3, [r1, #4]
 8004324:	4630      	mov	r0, r6
 8004326:	f000 f82f 	bl	8004388 <__malloc_unlock>
 800432a:	f104 000b 	add.w	r0, r4, #11
 800432e:	1d23      	adds	r3, r4, #4
 8004330:	f020 0007 	bic.w	r0, r0, #7
 8004334:	1ac2      	subs	r2, r0, r3
 8004336:	bf1c      	itt	ne
 8004338:	1a1b      	subne	r3, r3, r0
 800433a:	50a3      	strne	r3, [r4, r2]
 800433c:	e7af      	b.n	800429e <_malloc_r+0x22>
 800433e:	6862      	ldr	r2, [r4, #4]
 8004340:	42a3      	cmp	r3, r4
 8004342:	bf0c      	ite	eq
 8004344:	f8c8 2000 	streq.w	r2, [r8]
 8004348:	605a      	strne	r2, [r3, #4]
 800434a:	e7eb      	b.n	8004324 <_malloc_r+0xa8>
 800434c:	4623      	mov	r3, r4
 800434e:	6864      	ldr	r4, [r4, #4]
 8004350:	e7ae      	b.n	80042b0 <_malloc_r+0x34>
 8004352:	463c      	mov	r4, r7
 8004354:	687f      	ldr	r7, [r7, #4]
 8004356:	e7b6      	b.n	80042c6 <_malloc_r+0x4a>
 8004358:	461a      	mov	r2, r3
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	42a3      	cmp	r3, r4
 800435e:	d1fb      	bne.n	8004358 <_malloc_r+0xdc>
 8004360:	2300      	movs	r3, #0
 8004362:	6053      	str	r3, [r2, #4]
 8004364:	e7de      	b.n	8004324 <_malloc_r+0xa8>
 8004366:	230c      	movs	r3, #12
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	4630      	mov	r0, r6
 800436c:	f000 f80c 	bl	8004388 <__malloc_unlock>
 8004370:	e794      	b.n	800429c <_malloc_r+0x20>
 8004372:	6005      	str	r5, [r0, #0]
 8004374:	e7d6      	b.n	8004324 <_malloc_r+0xa8>
 8004376:	bf00      	nop
 8004378:	20000300 	.word	0x20000300

0800437c <__malloc_lock>:
 800437c:	4801      	ldr	r0, [pc, #4]	@ (8004384 <__malloc_lock+0x8>)
 800437e:	f7ff bf0e 	b.w	800419e <__retarget_lock_acquire_recursive>
 8004382:	bf00      	nop
 8004384:	200002f8 	.word	0x200002f8

08004388 <__malloc_unlock>:
 8004388:	4801      	ldr	r0, [pc, #4]	@ (8004390 <__malloc_unlock+0x8>)
 800438a:	f7ff bf09 	b.w	80041a0 <__retarget_lock_release_recursive>
 800438e:	bf00      	nop
 8004390:	200002f8 	.word	0x200002f8

08004394 <__sfputc_r>:
 8004394:	6893      	ldr	r3, [r2, #8]
 8004396:	3b01      	subs	r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	b410      	push	{r4}
 800439c:	6093      	str	r3, [r2, #8]
 800439e:	da08      	bge.n	80043b2 <__sfputc_r+0x1e>
 80043a0:	6994      	ldr	r4, [r2, #24]
 80043a2:	42a3      	cmp	r3, r4
 80043a4:	db01      	blt.n	80043aa <__sfputc_r+0x16>
 80043a6:	290a      	cmp	r1, #10
 80043a8:	d103      	bne.n	80043b2 <__sfputc_r+0x1e>
 80043aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043ae:	f7ff bde8 	b.w	8003f82 <__swbuf_r>
 80043b2:	6813      	ldr	r3, [r2, #0]
 80043b4:	1c58      	adds	r0, r3, #1
 80043b6:	6010      	str	r0, [r2, #0]
 80043b8:	7019      	strb	r1, [r3, #0]
 80043ba:	4608      	mov	r0, r1
 80043bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <__sfputs_r>:
 80043c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c4:	4606      	mov	r6, r0
 80043c6:	460f      	mov	r7, r1
 80043c8:	4614      	mov	r4, r2
 80043ca:	18d5      	adds	r5, r2, r3
 80043cc:	42ac      	cmp	r4, r5
 80043ce:	d101      	bne.n	80043d4 <__sfputs_r+0x12>
 80043d0:	2000      	movs	r0, #0
 80043d2:	e007      	b.n	80043e4 <__sfputs_r+0x22>
 80043d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043d8:	463a      	mov	r2, r7
 80043da:	4630      	mov	r0, r6
 80043dc:	f7ff ffda 	bl	8004394 <__sfputc_r>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	d1f3      	bne.n	80043cc <__sfputs_r+0xa>
 80043e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043e8 <_vfiprintf_r>:
 80043e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	460d      	mov	r5, r1
 80043ee:	b09d      	sub	sp, #116	@ 0x74
 80043f0:	4614      	mov	r4, r2
 80043f2:	4698      	mov	r8, r3
 80043f4:	4606      	mov	r6, r0
 80043f6:	b118      	cbz	r0, 8004400 <_vfiprintf_r+0x18>
 80043f8:	6a03      	ldr	r3, [r0, #32]
 80043fa:	b90b      	cbnz	r3, 8004400 <_vfiprintf_r+0x18>
 80043fc:	f7ff fcd8 	bl	8003db0 <__sinit>
 8004400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004402:	07d9      	lsls	r1, r3, #31
 8004404:	d405      	bmi.n	8004412 <_vfiprintf_r+0x2a>
 8004406:	89ab      	ldrh	r3, [r5, #12]
 8004408:	059a      	lsls	r2, r3, #22
 800440a:	d402      	bmi.n	8004412 <_vfiprintf_r+0x2a>
 800440c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800440e:	f7ff fec6 	bl	800419e <__retarget_lock_acquire_recursive>
 8004412:	89ab      	ldrh	r3, [r5, #12]
 8004414:	071b      	lsls	r3, r3, #28
 8004416:	d501      	bpl.n	800441c <_vfiprintf_r+0x34>
 8004418:	692b      	ldr	r3, [r5, #16]
 800441a:	b99b      	cbnz	r3, 8004444 <_vfiprintf_r+0x5c>
 800441c:	4629      	mov	r1, r5
 800441e:	4630      	mov	r0, r6
 8004420:	f7ff fdee 	bl	8004000 <__swsetup_r>
 8004424:	b170      	cbz	r0, 8004444 <_vfiprintf_r+0x5c>
 8004426:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004428:	07dc      	lsls	r4, r3, #31
 800442a:	d504      	bpl.n	8004436 <_vfiprintf_r+0x4e>
 800442c:	f04f 30ff 	mov.w	r0, #4294967295
 8004430:	b01d      	add	sp, #116	@ 0x74
 8004432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004436:	89ab      	ldrh	r3, [r5, #12]
 8004438:	0598      	lsls	r0, r3, #22
 800443a:	d4f7      	bmi.n	800442c <_vfiprintf_r+0x44>
 800443c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800443e:	f7ff feaf 	bl	80041a0 <__retarget_lock_release_recursive>
 8004442:	e7f3      	b.n	800442c <_vfiprintf_r+0x44>
 8004444:	2300      	movs	r3, #0
 8004446:	9309      	str	r3, [sp, #36]	@ 0x24
 8004448:	2320      	movs	r3, #32
 800444a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800444e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004452:	2330      	movs	r3, #48	@ 0x30
 8004454:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004604 <_vfiprintf_r+0x21c>
 8004458:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800445c:	f04f 0901 	mov.w	r9, #1
 8004460:	4623      	mov	r3, r4
 8004462:	469a      	mov	sl, r3
 8004464:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004468:	b10a      	cbz	r2, 800446e <_vfiprintf_r+0x86>
 800446a:	2a25      	cmp	r2, #37	@ 0x25
 800446c:	d1f9      	bne.n	8004462 <_vfiprintf_r+0x7a>
 800446e:	ebba 0b04 	subs.w	fp, sl, r4
 8004472:	d00b      	beq.n	800448c <_vfiprintf_r+0xa4>
 8004474:	465b      	mov	r3, fp
 8004476:	4622      	mov	r2, r4
 8004478:	4629      	mov	r1, r5
 800447a:	4630      	mov	r0, r6
 800447c:	f7ff ffa1 	bl	80043c2 <__sfputs_r>
 8004480:	3001      	adds	r0, #1
 8004482:	f000 80a7 	beq.w	80045d4 <_vfiprintf_r+0x1ec>
 8004486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004488:	445a      	add	r2, fp
 800448a:	9209      	str	r2, [sp, #36]	@ 0x24
 800448c:	f89a 3000 	ldrb.w	r3, [sl]
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 809f 	beq.w	80045d4 <_vfiprintf_r+0x1ec>
 8004496:	2300      	movs	r3, #0
 8004498:	f04f 32ff 	mov.w	r2, #4294967295
 800449c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044a0:	f10a 0a01 	add.w	sl, sl, #1
 80044a4:	9304      	str	r3, [sp, #16]
 80044a6:	9307      	str	r3, [sp, #28]
 80044a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80044ae:	4654      	mov	r4, sl
 80044b0:	2205      	movs	r2, #5
 80044b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b6:	4853      	ldr	r0, [pc, #332]	@ (8004604 <_vfiprintf_r+0x21c>)
 80044b8:	f7fb feba 	bl	8000230 <memchr>
 80044bc:	9a04      	ldr	r2, [sp, #16]
 80044be:	b9d8      	cbnz	r0, 80044f8 <_vfiprintf_r+0x110>
 80044c0:	06d1      	lsls	r1, r2, #27
 80044c2:	bf44      	itt	mi
 80044c4:	2320      	movmi	r3, #32
 80044c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044ca:	0713      	lsls	r3, r2, #28
 80044cc:	bf44      	itt	mi
 80044ce:	232b      	movmi	r3, #43	@ 0x2b
 80044d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044d4:	f89a 3000 	ldrb.w	r3, [sl]
 80044d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80044da:	d015      	beq.n	8004508 <_vfiprintf_r+0x120>
 80044dc:	9a07      	ldr	r2, [sp, #28]
 80044de:	4654      	mov	r4, sl
 80044e0:	2000      	movs	r0, #0
 80044e2:	f04f 0c0a 	mov.w	ip, #10
 80044e6:	4621      	mov	r1, r4
 80044e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ec:	3b30      	subs	r3, #48	@ 0x30
 80044ee:	2b09      	cmp	r3, #9
 80044f0:	d94b      	bls.n	800458a <_vfiprintf_r+0x1a2>
 80044f2:	b1b0      	cbz	r0, 8004522 <_vfiprintf_r+0x13a>
 80044f4:	9207      	str	r2, [sp, #28]
 80044f6:	e014      	b.n	8004522 <_vfiprintf_r+0x13a>
 80044f8:	eba0 0308 	sub.w	r3, r0, r8
 80044fc:	fa09 f303 	lsl.w	r3, r9, r3
 8004500:	4313      	orrs	r3, r2
 8004502:	9304      	str	r3, [sp, #16]
 8004504:	46a2      	mov	sl, r4
 8004506:	e7d2      	b.n	80044ae <_vfiprintf_r+0xc6>
 8004508:	9b03      	ldr	r3, [sp, #12]
 800450a:	1d19      	adds	r1, r3, #4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	9103      	str	r1, [sp, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	bfbb      	ittet	lt
 8004514:	425b      	neglt	r3, r3
 8004516:	f042 0202 	orrlt.w	r2, r2, #2
 800451a:	9307      	strge	r3, [sp, #28]
 800451c:	9307      	strlt	r3, [sp, #28]
 800451e:	bfb8      	it	lt
 8004520:	9204      	strlt	r2, [sp, #16]
 8004522:	7823      	ldrb	r3, [r4, #0]
 8004524:	2b2e      	cmp	r3, #46	@ 0x2e
 8004526:	d10a      	bne.n	800453e <_vfiprintf_r+0x156>
 8004528:	7863      	ldrb	r3, [r4, #1]
 800452a:	2b2a      	cmp	r3, #42	@ 0x2a
 800452c:	d132      	bne.n	8004594 <_vfiprintf_r+0x1ac>
 800452e:	9b03      	ldr	r3, [sp, #12]
 8004530:	1d1a      	adds	r2, r3, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	9203      	str	r2, [sp, #12]
 8004536:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800453a:	3402      	adds	r4, #2
 800453c:	9305      	str	r3, [sp, #20]
 800453e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004614 <_vfiprintf_r+0x22c>
 8004542:	7821      	ldrb	r1, [r4, #0]
 8004544:	2203      	movs	r2, #3
 8004546:	4650      	mov	r0, sl
 8004548:	f7fb fe72 	bl	8000230 <memchr>
 800454c:	b138      	cbz	r0, 800455e <_vfiprintf_r+0x176>
 800454e:	9b04      	ldr	r3, [sp, #16]
 8004550:	eba0 000a 	sub.w	r0, r0, sl
 8004554:	2240      	movs	r2, #64	@ 0x40
 8004556:	4082      	lsls	r2, r0
 8004558:	4313      	orrs	r3, r2
 800455a:	3401      	adds	r4, #1
 800455c:	9304      	str	r3, [sp, #16]
 800455e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004562:	4829      	ldr	r0, [pc, #164]	@ (8004608 <_vfiprintf_r+0x220>)
 8004564:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004568:	2206      	movs	r2, #6
 800456a:	f7fb fe61 	bl	8000230 <memchr>
 800456e:	2800      	cmp	r0, #0
 8004570:	d03f      	beq.n	80045f2 <_vfiprintf_r+0x20a>
 8004572:	4b26      	ldr	r3, [pc, #152]	@ (800460c <_vfiprintf_r+0x224>)
 8004574:	bb1b      	cbnz	r3, 80045be <_vfiprintf_r+0x1d6>
 8004576:	9b03      	ldr	r3, [sp, #12]
 8004578:	3307      	adds	r3, #7
 800457a:	f023 0307 	bic.w	r3, r3, #7
 800457e:	3308      	adds	r3, #8
 8004580:	9303      	str	r3, [sp, #12]
 8004582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004584:	443b      	add	r3, r7
 8004586:	9309      	str	r3, [sp, #36]	@ 0x24
 8004588:	e76a      	b.n	8004460 <_vfiprintf_r+0x78>
 800458a:	fb0c 3202 	mla	r2, ip, r2, r3
 800458e:	460c      	mov	r4, r1
 8004590:	2001      	movs	r0, #1
 8004592:	e7a8      	b.n	80044e6 <_vfiprintf_r+0xfe>
 8004594:	2300      	movs	r3, #0
 8004596:	3401      	adds	r4, #1
 8004598:	9305      	str	r3, [sp, #20]
 800459a:	4619      	mov	r1, r3
 800459c:	f04f 0c0a 	mov.w	ip, #10
 80045a0:	4620      	mov	r0, r4
 80045a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045a6:	3a30      	subs	r2, #48	@ 0x30
 80045a8:	2a09      	cmp	r2, #9
 80045aa:	d903      	bls.n	80045b4 <_vfiprintf_r+0x1cc>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0c6      	beq.n	800453e <_vfiprintf_r+0x156>
 80045b0:	9105      	str	r1, [sp, #20]
 80045b2:	e7c4      	b.n	800453e <_vfiprintf_r+0x156>
 80045b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80045b8:	4604      	mov	r4, r0
 80045ba:	2301      	movs	r3, #1
 80045bc:	e7f0      	b.n	80045a0 <_vfiprintf_r+0x1b8>
 80045be:	ab03      	add	r3, sp, #12
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	462a      	mov	r2, r5
 80045c4:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <_vfiprintf_r+0x228>)
 80045c6:	a904      	add	r1, sp, #16
 80045c8:	4630      	mov	r0, r6
 80045ca:	f3af 8000 	nop.w
 80045ce:	4607      	mov	r7, r0
 80045d0:	1c78      	adds	r0, r7, #1
 80045d2:	d1d6      	bne.n	8004582 <_vfiprintf_r+0x19a>
 80045d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045d6:	07d9      	lsls	r1, r3, #31
 80045d8:	d405      	bmi.n	80045e6 <_vfiprintf_r+0x1fe>
 80045da:	89ab      	ldrh	r3, [r5, #12]
 80045dc:	059a      	lsls	r2, r3, #22
 80045de:	d402      	bmi.n	80045e6 <_vfiprintf_r+0x1fe>
 80045e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045e2:	f7ff fddd 	bl	80041a0 <__retarget_lock_release_recursive>
 80045e6:	89ab      	ldrh	r3, [r5, #12]
 80045e8:	065b      	lsls	r3, r3, #25
 80045ea:	f53f af1f 	bmi.w	800442c <_vfiprintf_r+0x44>
 80045ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045f0:	e71e      	b.n	8004430 <_vfiprintf_r+0x48>
 80045f2:	ab03      	add	r3, sp, #12
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	462a      	mov	r2, r5
 80045f8:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <_vfiprintf_r+0x228>)
 80045fa:	a904      	add	r1, sp, #16
 80045fc:	4630      	mov	r0, r6
 80045fe:	f000 f879 	bl	80046f4 <_printf_i>
 8004602:	e7e4      	b.n	80045ce <_vfiprintf_r+0x1e6>
 8004604:	08004ca4 	.word	0x08004ca4
 8004608:	08004cae 	.word	0x08004cae
 800460c:	00000000 	.word	0x00000000
 8004610:	080043c3 	.word	0x080043c3
 8004614:	08004caa 	.word	0x08004caa

08004618 <_printf_common>:
 8004618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800461c:	4616      	mov	r6, r2
 800461e:	4698      	mov	r8, r3
 8004620:	688a      	ldr	r2, [r1, #8]
 8004622:	690b      	ldr	r3, [r1, #16]
 8004624:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004628:	4293      	cmp	r3, r2
 800462a:	bfb8      	it	lt
 800462c:	4613      	movlt	r3, r2
 800462e:	6033      	str	r3, [r6, #0]
 8004630:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004634:	4607      	mov	r7, r0
 8004636:	460c      	mov	r4, r1
 8004638:	b10a      	cbz	r2, 800463e <_printf_common+0x26>
 800463a:	3301      	adds	r3, #1
 800463c:	6033      	str	r3, [r6, #0]
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	0699      	lsls	r1, r3, #26
 8004642:	bf42      	ittt	mi
 8004644:	6833      	ldrmi	r3, [r6, #0]
 8004646:	3302      	addmi	r3, #2
 8004648:	6033      	strmi	r3, [r6, #0]
 800464a:	6825      	ldr	r5, [r4, #0]
 800464c:	f015 0506 	ands.w	r5, r5, #6
 8004650:	d106      	bne.n	8004660 <_printf_common+0x48>
 8004652:	f104 0a19 	add.w	sl, r4, #25
 8004656:	68e3      	ldr	r3, [r4, #12]
 8004658:	6832      	ldr	r2, [r6, #0]
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	42ab      	cmp	r3, r5
 800465e:	dc26      	bgt.n	80046ae <_printf_common+0x96>
 8004660:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004664:	6822      	ldr	r2, [r4, #0]
 8004666:	3b00      	subs	r3, #0
 8004668:	bf18      	it	ne
 800466a:	2301      	movne	r3, #1
 800466c:	0692      	lsls	r2, r2, #26
 800466e:	d42b      	bmi.n	80046c8 <_printf_common+0xb0>
 8004670:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004674:	4641      	mov	r1, r8
 8004676:	4638      	mov	r0, r7
 8004678:	47c8      	blx	r9
 800467a:	3001      	adds	r0, #1
 800467c:	d01e      	beq.n	80046bc <_printf_common+0xa4>
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	6922      	ldr	r2, [r4, #16]
 8004682:	f003 0306 	and.w	r3, r3, #6
 8004686:	2b04      	cmp	r3, #4
 8004688:	bf02      	ittt	eq
 800468a:	68e5      	ldreq	r5, [r4, #12]
 800468c:	6833      	ldreq	r3, [r6, #0]
 800468e:	1aed      	subeq	r5, r5, r3
 8004690:	68a3      	ldr	r3, [r4, #8]
 8004692:	bf0c      	ite	eq
 8004694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004698:	2500      	movne	r5, #0
 800469a:	4293      	cmp	r3, r2
 800469c:	bfc4      	itt	gt
 800469e:	1a9b      	subgt	r3, r3, r2
 80046a0:	18ed      	addgt	r5, r5, r3
 80046a2:	2600      	movs	r6, #0
 80046a4:	341a      	adds	r4, #26
 80046a6:	42b5      	cmp	r5, r6
 80046a8:	d11a      	bne.n	80046e0 <_printf_common+0xc8>
 80046aa:	2000      	movs	r0, #0
 80046ac:	e008      	b.n	80046c0 <_printf_common+0xa8>
 80046ae:	2301      	movs	r3, #1
 80046b0:	4652      	mov	r2, sl
 80046b2:	4641      	mov	r1, r8
 80046b4:	4638      	mov	r0, r7
 80046b6:	47c8      	blx	r9
 80046b8:	3001      	adds	r0, #1
 80046ba:	d103      	bne.n	80046c4 <_printf_common+0xac>
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c4:	3501      	adds	r5, #1
 80046c6:	e7c6      	b.n	8004656 <_printf_common+0x3e>
 80046c8:	18e1      	adds	r1, r4, r3
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	2030      	movs	r0, #48	@ 0x30
 80046ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046d2:	4422      	add	r2, r4
 80046d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046dc:	3302      	adds	r3, #2
 80046de:	e7c7      	b.n	8004670 <_printf_common+0x58>
 80046e0:	2301      	movs	r3, #1
 80046e2:	4622      	mov	r2, r4
 80046e4:	4641      	mov	r1, r8
 80046e6:	4638      	mov	r0, r7
 80046e8:	47c8      	blx	r9
 80046ea:	3001      	adds	r0, #1
 80046ec:	d0e6      	beq.n	80046bc <_printf_common+0xa4>
 80046ee:	3601      	adds	r6, #1
 80046f0:	e7d9      	b.n	80046a6 <_printf_common+0x8e>
	...

080046f4 <_printf_i>:
 80046f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046f8:	7e0f      	ldrb	r7, [r1, #24]
 80046fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046fc:	2f78      	cmp	r7, #120	@ 0x78
 80046fe:	4691      	mov	r9, r2
 8004700:	4680      	mov	r8, r0
 8004702:	460c      	mov	r4, r1
 8004704:	469a      	mov	sl, r3
 8004706:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800470a:	d807      	bhi.n	800471c <_printf_i+0x28>
 800470c:	2f62      	cmp	r7, #98	@ 0x62
 800470e:	d80a      	bhi.n	8004726 <_printf_i+0x32>
 8004710:	2f00      	cmp	r7, #0
 8004712:	f000 80d2 	beq.w	80048ba <_printf_i+0x1c6>
 8004716:	2f58      	cmp	r7, #88	@ 0x58
 8004718:	f000 80b9 	beq.w	800488e <_printf_i+0x19a>
 800471c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004720:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004724:	e03a      	b.n	800479c <_printf_i+0xa8>
 8004726:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800472a:	2b15      	cmp	r3, #21
 800472c:	d8f6      	bhi.n	800471c <_printf_i+0x28>
 800472e:	a101      	add	r1, pc, #4	@ (adr r1, 8004734 <_printf_i+0x40>)
 8004730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004734:	0800478d 	.word	0x0800478d
 8004738:	080047a1 	.word	0x080047a1
 800473c:	0800471d 	.word	0x0800471d
 8004740:	0800471d 	.word	0x0800471d
 8004744:	0800471d 	.word	0x0800471d
 8004748:	0800471d 	.word	0x0800471d
 800474c:	080047a1 	.word	0x080047a1
 8004750:	0800471d 	.word	0x0800471d
 8004754:	0800471d 	.word	0x0800471d
 8004758:	0800471d 	.word	0x0800471d
 800475c:	0800471d 	.word	0x0800471d
 8004760:	080048a1 	.word	0x080048a1
 8004764:	080047cb 	.word	0x080047cb
 8004768:	0800485b 	.word	0x0800485b
 800476c:	0800471d 	.word	0x0800471d
 8004770:	0800471d 	.word	0x0800471d
 8004774:	080048c3 	.word	0x080048c3
 8004778:	0800471d 	.word	0x0800471d
 800477c:	080047cb 	.word	0x080047cb
 8004780:	0800471d 	.word	0x0800471d
 8004784:	0800471d 	.word	0x0800471d
 8004788:	08004863 	.word	0x08004863
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	1d1a      	adds	r2, r3, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6032      	str	r2, [r6, #0]
 8004794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004798:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800479c:	2301      	movs	r3, #1
 800479e:	e09d      	b.n	80048dc <_printf_i+0x1e8>
 80047a0:	6833      	ldr	r3, [r6, #0]
 80047a2:	6820      	ldr	r0, [r4, #0]
 80047a4:	1d19      	adds	r1, r3, #4
 80047a6:	6031      	str	r1, [r6, #0]
 80047a8:	0606      	lsls	r6, r0, #24
 80047aa:	d501      	bpl.n	80047b0 <_printf_i+0xbc>
 80047ac:	681d      	ldr	r5, [r3, #0]
 80047ae:	e003      	b.n	80047b8 <_printf_i+0xc4>
 80047b0:	0645      	lsls	r5, r0, #25
 80047b2:	d5fb      	bpl.n	80047ac <_printf_i+0xb8>
 80047b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047b8:	2d00      	cmp	r5, #0
 80047ba:	da03      	bge.n	80047c4 <_printf_i+0xd0>
 80047bc:	232d      	movs	r3, #45	@ 0x2d
 80047be:	426d      	negs	r5, r5
 80047c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047c4:	4859      	ldr	r0, [pc, #356]	@ (800492c <_printf_i+0x238>)
 80047c6:	230a      	movs	r3, #10
 80047c8:	e011      	b.n	80047ee <_printf_i+0xfa>
 80047ca:	6821      	ldr	r1, [r4, #0]
 80047cc:	6833      	ldr	r3, [r6, #0]
 80047ce:	0608      	lsls	r0, r1, #24
 80047d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80047d4:	d402      	bmi.n	80047dc <_printf_i+0xe8>
 80047d6:	0649      	lsls	r1, r1, #25
 80047d8:	bf48      	it	mi
 80047da:	b2ad      	uxthmi	r5, r5
 80047dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80047de:	4853      	ldr	r0, [pc, #332]	@ (800492c <_printf_i+0x238>)
 80047e0:	6033      	str	r3, [r6, #0]
 80047e2:	bf14      	ite	ne
 80047e4:	230a      	movne	r3, #10
 80047e6:	2308      	moveq	r3, #8
 80047e8:	2100      	movs	r1, #0
 80047ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047ee:	6866      	ldr	r6, [r4, #4]
 80047f0:	60a6      	str	r6, [r4, #8]
 80047f2:	2e00      	cmp	r6, #0
 80047f4:	bfa2      	ittt	ge
 80047f6:	6821      	ldrge	r1, [r4, #0]
 80047f8:	f021 0104 	bicge.w	r1, r1, #4
 80047fc:	6021      	strge	r1, [r4, #0]
 80047fe:	b90d      	cbnz	r5, 8004804 <_printf_i+0x110>
 8004800:	2e00      	cmp	r6, #0
 8004802:	d04b      	beq.n	800489c <_printf_i+0x1a8>
 8004804:	4616      	mov	r6, r2
 8004806:	fbb5 f1f3 	udiv	r1, r5, r3
 800480a:	fb03 5711 	mls	r7, r3, r1, r5
 800480e:	5dc7      	ldrb	r7, [r0, r7]
 8004810:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004814:	462f      	mov	r7, r5
 8004816:	42bb      	cmp	r3, r7
 8004818:	460d      	mov	r5, r1
 800481a:	d9f4      	bls.n	8004806 <_printf_i+0x112>
 800481c:	2b08      	cmp	r3, #8
 800481e:	d10b      	bne.n	8004838 <_printf_i+0x144>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	07df      	lsls	r7, r3, #31
 8004824:	d508      	bpl.n	8004838 <_printf_i+0x144>
 8004826:	6923      	ldr	r3, [r4, #16]
 8004828:	6861      	ldr	r1, [r4, #4]
 800482a:	4299      	cmp	r1, r3
 800482c:	bfde      	ittt	le
 800482e:	2330      	movle	r3, #48	@ 0x30
 8004830:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004834:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004838:	1b92      	subs	r2, r2, r6
 800483a:	6122      	str	r2, [r4, #16]
 800483c:	f8cd a000 	str.w	sl, [sp]
 8004840:	464b      	mov	r3, r9
 8004842:	aa03      	add	r2, sp, #12
 8004844:	4621      	mov	r1, r4
 8004846:	4640      	mov	r0, r8
 8004848:	f7ff fee6 	bl	8004618 <_printf_common>
 800484c:	3001      	adds	r0, #1
 800484e:	d14a      	bne.n	80048e6 <_printf_i+0x1f2>
 8004850:	f04f 30ff 	mov.w	r0, #4294967295
 8004854:	b004      	add	sp, #16
 8004856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	f043 0320 	orr.w	r3, r3, #32
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	4833      	ldr	r0, [pc, #204]	@ (8004930 <_printf_i+0x23c>)
 8004864:	2778      	movs	r7, #120	@ 0x78
 8004866:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	6831      	ldr	r1, [r6, #0]
 800486e:	061f      	lsls	r7, r3, #24
 8004870:	f851 5b04 	ldr.w	r5, [r1], #4
 8004874:	d402      	bmi.n	800487c <_printf_i+0x188>
 8004876:	065f      	lsls	r7, r3, #25
 8004878:	bf48      	it	mi
 800487a:	b2ad      	uxthmi	r5, r5
 800487c:	6031      	str	r1, [r6, #0]
 800487e:	07d9      	lsls	r1, r3, #31
 8004880:	bf44      	itt	mi
 8004882:	f043 0320 	orrmi.w	r3, r3, #32
 8004886:	6023      	strmi	r3, [r4, #0]
 8004888:	b11d      	cbz	r5, 8004892 <_printf_i+0x19e>
 800488a:	2310      	movs	r3, #16
 800488c:	e7ac      	b.n	80047e8 <_printf_i+0xf4>
 800488e:	4827      	ldr	r0, [pc, #156]	@ (800492c <_printf_i+0x238>)
 8004890:	e7e9      	b.n	8004866 <_printf_i+0x172>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	f023 0320 	bic.w	r3, r3, #32
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	e7f6      	b.n	800488a <_printf_i+0x196>
 800489c:	4616      	mov	r6, r2
 800489e:	e7bd      	b.n	800481c <_printf_i+0x128>
 80048a0:	6833      	ldr	r3, [r6, #0]
 80048a2:	6825      	ldr	r5, [r4, #0]
 80048a4:	6961      	ldr	r1, [r4, #20]
 80048a6:	1d18      	adds	r0, r3, #4
 80048a8:	6030      	str	r0, [r6, #0]
 80048aa:	062e      	lsls	r6, r5, #24
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	d501      	bpl.n	80048b4 <_printf_i+0x1c0>
 80048b0:	6019      	str	r1, [r3, #0]
 80048b2:	e002      	b.n	80048ba <_printf_i+0x1c6>
 80048b4:	0668      	lsls	r0, r5, #25
 80048b6:	d5fb      	bpl.n	80048b0 <_printf_i+0x1bc>
 80048b8:	8019      	strh	r1, [r3, #0]
 80048ba:	2300      	movs	r3, #0
 80048bc:	6123      	str	r3, [r4, #16]
 80048be:	4616      	mov	r6, r2
 80048c0:	e7bc      	b.n	800483c <_printf_i+0x148>
 80048c2:	6833      	ldr	r3, [r6, #0]
 80048c4:	1d1a      	adds	r2, r3, #4
 80048c6:	6032      	str	r2, [r6, #0]
 80048c8:	681e      	ldr	r6, [r3, #0]
 80048ca:	6862      	ldr	r2, [r4, #4]
 80048cc:	2100      	movs	r1, #0
 80048ce:	4630      	mov	r0, r6
 80048d0:	f7fb fcae 	bl	8000230 <memchr>
 80048d4:	b108      	cbz	r0, 80048da <_printf_i+0x1e6>
 80048d6:	1b80      	subs	r0, r0, r6
 80048d8:	6060      	str	r0, [r4, #4]
 80048da:	6863      	ldr	r3, [r4, #4]
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	2300      	movs	r3, #0
 80048e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048e4:	e7aa      	b.n	800483c <_printf_i+0x148>
 80048e6:	6923      	ldr	r3, [r4, #16]
 80048e8:	4632      	mov	r2, r6
 80048ea:	4649      	mov	r1, r9
 80048ec:	4640      	mov	r0, r8
 80048ee:	47d0      	blx	sl
 80048f0:	3001      	adds	r0, #1
 80048f2:	d0ad      	beq.n	8004850 <_printf_i+0x15c>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	079b      	lsls	r3, r3, #30
 80048f8:	d413      	bmi.n	8004922 <_printf_i+0x22e>
 80048fa:	68e0      	ldr	r0, [r4, #12]
 80048fc:	9b03      	ldr	r3, [sp, #12]
 80048fe:	4298      	cmp	r0, r3
 8004900:	bfb8      	it	lt
 8004902:	4618      	movlt	r0, r3
 8004904:	e7a6      	b.n	8004854 <_printf_i+0x160>
 8004906:	2301      	movs	r3, #1
 8004908:	4632      	mov	r2, r6
 800490a:	4649      	mov	r1, r9
 800490c:	4640      	mov	r0, r8
 800490e:	47d0      	blx	sl
 8004910:	3001      	adds	r0, #1
 8004912:	d09d      	beq.n	8004850 <_printf_i+0x15c>
 8004914:	3501      	adds	r5, #1
 8004916:	68e3      	ldr	r3, [r4, #12]
 8004918:	9903      	ldr	r1, [sp, #12]
 800491a:	1a5b      	subs	r3, r3, r1
 800491c:	42ab      	cmp	r3, r5
 800491e:	dcf2      	bgt.n	8004906 <_printf_i+0x212>
 8004920:	e7eb      	b.n	80048fa <_printf_i+0x206>
 8004922:	2500      	movs	r5, #0
 8004924:	f104 0619 	add.w	r6, r4, #25
 8004928:	e7f5      	b.n	8004916 <_printf_i+0x222>
 800492a:	bf00      	nop
 800492c:	08004cb5 	.word	0x08004cb5
 8004930:	08004cc6 	.word	0x08004cc6

08004934 <__sflush_r>:
 8004934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800493c:	0716      	lsls	r6, r2, #28
 800493e:	4605      	mov	r5, r0
 8004940:	460c      	mov	r4, r1
 8004942:	d454      	bmi.n	80049ee <__sflush_r+0xba>
 8004944:	684b      	ldr	r3, [r1, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	dc02      	bgt.n	8004950 <__sflush_r+0x1c>
 800494a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	dd48      	ble.n	80049e2 <__sflush_r+0xae>
 8004950:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004952:	2e00      	cmp	r6, #0
 8004954:	d045      	beq.n	80049e2 <__sflush_r+0xae>
 8004956:	2300      	movs	r3, #0
 8004958:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800495c:	682f      	ldr	r7, [r5, #0]
 800495e:	6a21      	ldr	r1, [r4, #32]
 8004960:	602b      	str	r3, [r5, #0]
 8004962:	d030      	beq.n	80049c6 <__sflush_r+0x92>
 8004964:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	0759      	lsls	r1, r3, #29
 800496a:	d505      	bpl.n	8004978 <__sflush_r+0x44>
 800496c:	6863      	ldr	r3, [r4, #4]
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004972:	b10b      	cbz	r3, 8004978 <__sflush_r+0x44>
 8004974:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004976:	1ad2      	subs	r2, r2, r3
 8004978:	2300      	movs	r3, #0
 800497a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800497c:	6a21      	ldr	r1, [r4, #32]
 800497e:	4628      	mov	r0, r5
 8004980:	47b0      	blx	r6
 8004982:	1c43      	adds	r3, r0, #1
 8004984:	89a3      	ldrh	r3, [r4, #12]
 8004986:	d106      	bne.n	8004996 <__sflush_r+0x62>
 8004988:	6829      	ldr	r1, [r5, #0]
 800498a:	291d      	cmp	r1, #29
 800498c:	d82b      	bhi.n	80049e6 <__sflush_r+0xb2>
 800498e:	4a2a      	ldr	r2, [pc, #168]	@ (8004a38 <__sflush_r+0x104>)
 8004990:	410a      	asrs	r2, r1
 8004992:	07d6      	lsls	r6, r2, #31
 8004994:	d427      	bmi.n	80049e6 <__sflush_r+0xb2>
 8004996:	2200      	movs	r2, #0
 8004998:	6062      	str	r2, [r4, #4]
 800499a:	04d9      	lsls	r1, r3, #19
 800499c:	6922      	ldr	r2, [r4, #16]
 800499e:	6022      	str	r2, [r4, #0]
 80049a0:	d504      	bpl.n	80049ac <__sflush_r+0x78>
 80049a2:	1c42      	adds	r2, r0, #1
 80049a4:	d101      	bne.n	80049aa <__sflush_r+0x76>
 80049a6:	682b      	ldr	r3, [r5, #0]
 80049a8:	b903      	cbnz	r3, 80049ac <__sflush_r+0x78>
 80049aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80049ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049ae:	602f      	str	r7, [r5, #0]
 80049b0:	b1b9      	cbz	r1, 80049e2 <__sflush_r+0xae>
 80049b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049b6:	4299      	cmp	r1, r3
 80049b8:	d002      	beq.n	80049c0 <__sflush_r+0x8c>
 80049ba:	4628      	mov	r0, r5
 80049bc:	f7ff fbf2 	bl	80041a4 <_free_r>
 80049c0:	2300      	movs	r3, #0
 80049c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80049c4:	e00d      	b.n	80049e2 <__sflush_r+0xae>
 80049c6:	2301      	movs	r3, #1
 80049c8:	4628      	mov	r0, r5
 80049ca:	47b0      	blx	r6
 80049cc:	4602      	mov	r2, r0
 80049ce:	1c50      	adds	r0, r2, #1
 80049d0:	d1c9      	bne.n	8004966 <__sflush_r+0x32>
 80049d2:	682b      	ldr	r3, [r5, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0c6      	beq.n	8004966 <__sflush_r+0x32>
 80049d8:	2b1d      	cmp	r3, #29
 80049da:	d001      	beq.n	80049e0 <__sflush_r+0xac>
 80049dc:	2b16      	cmp	r3, #22
 80049de:	d11e      	bne.n	8004a1e <__sflush_r+0xea>
 80049e0:	602f      	str	r7, [r5, #0]
 80049e2:	2000      	movs	r0, #0
 80049e4:	e022      	b.n	8004a2c <__sflush_r+0xf8>
 80049e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ea:	b21b      	sxth	r3, r3
 80049ec:	e01b      	b.n	8004a26 <__sflush_r+0xf2>
 80049ee:	690f      	ldr	r7, [r1, #16]
 80049f0:	2f00      	cmp	r7, #0
 80049f2:	d0f6      	beq.n	80049e2 <__sflush_r+0xae>
 80049f4:	0793      	lsls	r3, r2, #30
 80049f6:	680e      	ldr	r6, [r1, #0]
 80049f8:	bf08      	it	eq
 80049fa:	694b      	ldreq	r3, [r1, #20]
 80049fc:	600f      	str	r7, [r1, #0]
 80049fe:	bf18      	it	ne
 8004a00:	2300      	movne	r3, #0
 8004a02:	eba6 0807 	sub.w	r8, r6, r7
 8004a06:	608b      	str	r3, [r1, #8]
 8004a08:	f1b8 0f00 	cmp.w	r8, #0
 8004a0c:	dde9      	ble.n	80049e2 <__sflush_r+0xae>
 8004a0e:	6a21      	ldr	r1, [r4, #32]
 8004a10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a12:	4643      	mov	r3, r8
 8004a14:	463a      	mov	r2, r7
 8004a16:	4628      	mov	r0, r5
 8004a18:	47b0      	blx	r6
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	dc08      	bgt.n	8004a30 <__sflush_r+0xfc>
 8004a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a26:	81a3      	strh	r3, [r4, #12]
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a30:	4407      	add	r7, r0
 8004a32:	eba8 0800 	sub.w	r8, r8, r0
 8004a36:	e7e7      	b.n	8004a08 <__sflush_r+0xd4>
 8004a38:	dfbffffe 	.word	0xdfbffffe

08004a3c <_fflush_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	690b      	ldr	r3, [r1, #16]
 8004a40:	4605      	mov	r5, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	b913      	cbnz	r3, 8004a4c <_fflush_r+0x10>
 8004a46:	2500      	movs	r5, #0
 8004a48:	4628      	mov	r0, r5
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	b118      	cbz	r0, 8004a56 <_fflush_r+0x1a>
 8004a4e:	6a03      	ldr	r3, [r0, #32]
 8004a50:	b90b      	cbnz	r3, 8004a56 <_fflush_r+0x1a>
 8004a52:	f7ff f9ad 	bl	8003db0 <__sinit>
 8004a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f3      	beq.n	8004a46 <_fflush_r+0xa>
 8004a5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a60:	07d0      	lsls	r0, r2, #31
 8004a62:	d404      	bmi.n	8004a6e <_fflush_r+0x32>
 8004a64:	0599      	lsls	r1, r3, #22
 8004a66:	d402      	bmi.n	8004a6e <_fflush_r+0x32>
 8004a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a6a:	f7ff fb98 	bl	800419e <__retarget_lock_acquire_recursive>
 8004a6e:	4628      	mov	r0, r5
 8004a70:	4621      	mov	r1, r4
 8004a72:	f7ff ff5f 	bl	8004934 <__sflush_r>
 8004a76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a78:	07da      	lsls	r2, r3, #31
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	d4e4      	bmi.n	8004a48 <_fflush_r+0xc>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	059b      	lsls	r3, r3, #22
 8004a82:	d4e1      	bmi.n	8004a48 <_fflush_r+0xc>
 8004a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a86:	f7ff fb8b 	bl	80041a0 <__retarget_lock_release_recursive>
 8004a8a:	e7dd      	b.n	8004a48 <_fflush_r+0xc>

08004a8c <__swhatbuf_r>:
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	460c      	mov	r4, r1
 8004a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a94:	2900      	cmp	r1, #0
 8004a96:	b096      	sub	sp, #88	@ 0x58
 8004a98:	4615      	mov	r5, r2
 8004a9a:	461e      	mov	r6, r3
 8004a9c:	da0d      	bge.n	8004aba <__swhatbuf_r+0x2e>
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004aa4:	f04f 0100 	mov.w	r1, #0
 8004aa8:	bf14      	ite	ne
 8004aaa:	2340      	movne	r3, #64	@ 0x40
 8004aac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	6031      	str	r1, [r6, #0]
 8004ab4:	602b      	str	r3, [r5, #0]
 8004ab6:	b016      	add	sp, #88	@ 0x58
 8004ab8:	bd70      	pop	{r4, r5, r6, pc}
 8004aba:	466a      	mov	r2, sp
 8004abc:	f000 f848 	bl	8004b50 <_fstat_r>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	dbec      	blt.n	8004a9e <__swhatbuf_r+0x12>
 8004ac4:	9901      	ldr	r1, [sp, #4]
 8004ac6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004aca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004ace:	4259      	negs	r1, r3
 8004ad0:	4159      	adcs	r1, r3
 8004ad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ad6:	e7eb      	b.n	8004ab0 <__swhatbuf_r+0x24>

08004ad8 <__smakebuf_r>:
 8004ad8:	898b      	ldrh	r3, [r1, #12]
 8004ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004adc:	079d      	lsls	r5, r3, #30
 8004ade:	4606      	mov	r6, r0
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	d507      	bpl.n	8004af4 <__smakebuf_r+0x1c>
 8004ae4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	6123      	str	r3, [r4, #16]
 8004aec:	2301      	movs	r3, #1
 8004aee:	6163      	str	r3, [r4, #20]
 8004af0:	b003      	add	sp, #12
 8004af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af4:	ab01      	add	r3, sp, #4
 8004af6:	466a      	mov	r2, sp
 8004af8:	f7ff ffc8 	bl	8004a8c <__swhatbuf_r>
 8004afc:	9f00      	ldr	r7, [sp, #0]
 8004afe:	4605      	mov	r5, r0
 8004b00:	4639      	mov	r1, r7
 8004b02:	4630      	mov	r0, r6
 8004b04:	f7ff fbba 	bl	800427c <_malloc_r>
 8004b08:	b948      	cbnz	r0, 8004b1e <__smakebuf_r+0x46>
 8004b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b0e:	059a      	lsls	r2, r3, #22
 8004b10:	d4ee      	bmi.n	8004af0 <__smakebuf_r+0x18>
 8004b12:	f023 0303 	bic.w	r3, r3, #3
 8004b16:	f043 0302 	orr.w	r3, r3, #2
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	e7e2      	b.n	8004ae4 <__smakebuf_r+0xc>
 8004b1e:	89a3      	ldrh	r3, [r4, #12]
 8004b20:	6020      	str	r0, [r4, #0]
 8004b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b26:	81a3      	strh	r3, [r4, #12]
 8004b28:	9b01      	ldr	r3, [sp, #4]
 8004b2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b2e:	b15b      	cbz	r3, 8004b48 <__smakebuf_r+0x70>
 8004b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b34:	4630      	mov	r0, r6
 8004b36:	f000 f81d 	bl	8004b74 <_isatty_r>
 8004b3a:	b128      	cbz	r0, 8004b48 <__smakebuf_r+0x70>
 8004b3c:	89a3      	ldrh	r3, [r4, #12]
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	81a3      	strh	r3, [r4, #12]
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	431d      	orrs	r5, r3
 8004b4c:	81a5      	strh	r5, [r4, #12]
 8004b4e:	e7cf      	b.n	8004af0 <__smakebuf_r+0x18>

08004b50 <_fstat_r>:
 8004b50:	b538      	push	{r3, r4, r5, lr}
 8004b52:	4d07      	ldr	r5, [pc, #28]	@ (8004b70 <_fstat_r+0x20>)
 8004b54:	2300      	movs	r3, #0
 8004b56:	4604      	mov	r4, r0
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	602b      	str	r3, [r5, #0]
 8004b5e:	f7fb ffff 	bl	8000b60 <_fstat>
 8004b62:	1c43      	adds	r3, r0, #1
 8004b64:	d102      	bne.n	8004b6c <_fstat_r+0x1c>
 8004b66:	682b      	ldr	r3, [r5, #0]
 8004b68:	b103      	cbz	r3, 8004b6c <_fstat_r+0x1c>
 8004b6a:	6023      	str	r3, [r4, #0]
 8004b6c:	bd38      	pop	{r3, r4, r5, pc}
 8004b6e:	bf00      	nop
 8004b70:	200002f4 	.word	0x200002f4

08004b74 <_isatty_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4d06      	ldr	r5, [pc, #24]	@ (8004b90 <_isatty_r+0x1c>)
 8004b78:	2300      	movs	r3, #0
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	602b      	str	r3, [r5, #0]
 8004b80:	f7fb fffe 	bl	8000b80 <_isatty>
 8004b84:	1c43      	adds	r3, r0, #1
 8004b86:	d102      	bne.n	8004b8e <_isatty_r+0x1a>
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	b103      	cbz	r3, 8004b8e <_isatty_r+0x1a>
 8004b8c:	6023      	str	r3, [r4, #0]
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}
 8004b90:	200002f4 	.word	0x200002f4

08004b94 <_sbrk_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4d06      	ldr	r5, [pc, #24]	@ (8004bb0 <_sbrk_r+0x1c>)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	4608      	mov	r0, r1
 8004b9e:	602b      	str	r3, [r5, #0]
 8004ba0:	f7fc f806 	bl	8000bb0 <_sbrk>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d102      	bne.n	8004bae <_sbrk_r+0x1a>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	b103      	cbz	r3, 8004bae <_sbrk_r+0x1a>
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	200002f4 	.word	0x200002f4

08004bb4 <_init>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	bf00      	nop
 8004bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bba:	bc08      	pop	{r3}
 8004bbc:	469e      	mov	lr, r3
 8004bbe:	4770      	bx	lr

08004bc0 <_fini>:
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc2:	bf00      	nop
 8004bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc6:	bc08      	pop	{r3}
 8004bc8:	469e      	mov	lr, r3
 8004bca:	4770      	bx	lr
