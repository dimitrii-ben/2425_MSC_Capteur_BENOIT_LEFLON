
G431-MSC-Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004478  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004658  08004658  00005658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004714  08004714  00006078  2**0
                  CONTENTS
  4 .ARM          00000008  08004714  08004714  00005714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800471c  0800471c  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800471c  0800471c  0000571c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004720  08004720  00005720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08004724  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000078  0800479c  00006078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  0800479c  00006304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010140  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ac  00000000  00000000  000161e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00018598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5b  00000000  00000000  00019300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e913  00000000  00000000  00019d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a7b  00000000  00000000  0003866e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb4fa  00000000  00000000  0004a0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001055e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e50  00000000  00000000  00105628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00109478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004640 	.word	0x08004640

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08004640 	.word	0x08004640

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <verifySensor>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void verifySensor(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
	for (uint8_t i=0x00;i<0xFF;i++){
 80005c6:	2300      	movs	r3, #0
 80005c8:	71fb      	strb	r3, [r7, #7]
 80005ca:	e012      	b.n	80005f2 <verifySensor+0x32>

		if(HAL_I2C_IsDeviceReady(&hi2c1,i,3,100)== HAL_OK){
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	b299      	uxth	r1, r3
 80005d0:	2364      	movs	r3, #100	@ 0x64
 80005d2:	2203      	movs	r2, #3
 80005d4:	480b      	ldr	r0, [pc, #44]	@ (8000604 <verifySensor+0x44>)
 80005d6:	f000 ff46 	bl	8001466 <HAL_I2C_IsDeviceReady>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d105      	bne.n	80005ec <verifySensor+0x2c>
			printf("[0x%02X|%d]: Peripheral avaible\r\n",i,(int)i);
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	79fa      	ldrb	r2, [r7, #7]
 80005e4:	4619      	mov	r1, r3
 80005e6:	4808      	ldr	r0, [pc, #32]	@ (8000608 <verifySensor+0x48>)
 80005e8:	f003 f9bc 	bl	8003964 <iprintf>
	for (uint8_t i=0x00;i<0xFF;i++){
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	3301      	adds	r3, #1
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2bff      	cmp	r3, #255	@ 0xff
 80005f6:	d1e9      	bne.n	80005cc <verifySensor+0xc>
		}

	}
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000094 	.word	0x20000094
 8000608:	08004658 	.word	0x08004658

0800060c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000610:	f000 fb63 	bl	8000cda <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000614:	f000 f80e 	bl	8000634 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000618:	f000 f8e2 	bl	80007e0 <MX_GPIO_Init>
	MX_I2C1_Init();
 800061c:	f000 f856 	bl	80006cc <MX_I2C1_Init>
	MX_LPUART1_UART_Init();
 8000620:	f000 f894 	bl	800074c <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	setup();
 8000624:	f003 f89e 	bl	8003764 <setup>
	verifySensor();
 8000628:	f7ff ffca 	bl	80005c0 <verifySensor>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		test_LEDs(50);
 800062c:	2032      	movs	r0, #50	@ 0x32
 800062e:	f003 f8c7 	bl	80037c0 <test_LEDs>
 8000632:	e7fb      	b.n	800062c <main+0x20>

08000634 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	2238      	movs	r2, #56	@ 0x38
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f003 f9e3 	bl	8003a0e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000656:	2000      	movs	r0, #0
 8000658:	f001 f9e6 	bl	8001a28 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000666:	2340      	movs	r3, #64	@ 0x40
 8000668:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000672:	2304      	movs	r3, #4
 8000674:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000676:	2355      	movs	r3, #85	@ 0x55
 8000678:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fa80 	bl	8001b90 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000696:	f000 f909 	bl	80008ac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2303      	movs	r3, #3
 80006a0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2104      	movs	r1, #4
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fd7e 	bl	80021b4 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80006be:	f000 f8f5 	bl	80008ac <Error_Handler>
	}
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	@ 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <MX_I2C1_Init+0x74>)
 80006d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000744 <MX_I2C1_Init+0x78>)
 80006d4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x40B285C2;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <MX_I2C1_Init+0x74>)
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <MX_I2C1_Init+0x7c>)
 80006da:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80006dc:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e2:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <MX_I2C1_Init+0x74>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e8:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <MX_I2C1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <MX_I2C1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000706:	480e      	ldr	r0, [pc, #56]	@ (8000740 <MX_I2C1_Init+0x74>)
 8000708:	f000 fe12 	bl	8001330 <HAL_I2C_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000712:	f000 f8cb 	bl	80008ac <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000716:	2100      	movs	r1, #0
 8000718:	4809      	ldr	r0, [pc, #36]	@ (8000740 <MX_I2C1_Init+0x74>)
 800071a:	f001 f8ed 	bl	80018f8 <HAL_I2CEx_ConfigAnalogFilter>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000724:	f000 f8c2 	bl	80008ac <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000728:	2100      	movs	r1, #0
 800072a:	4805      	ldr	r0, [pc, #20]	@ (8000740 <MX_I2C1_Init+0x74>)
 800072c:	f001 f92f 	bl	800198e <HAL_I2CEx_ConfigDigitalFilter>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000736:	f000 f8b9 	bl	80008ac <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000094 	.word	0x20000094
 8000744:	40005400 	.word	0x40005400
 8000748:	40b285c2 	.word	0x40b285c2

0800074c <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000750:	4b21      	ldr	r3, [pc, #132]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000752:	4a22      	ldr	r2, [pc, #136]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000754:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8000756:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b1e      	ldr	r3, [pc, #120]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 800076a:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077c:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800078e:	4812      	ldr	r0, [pc, #72]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000790:	f002 f91c 	bl	80029cc <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_LPUART1_UART_Init+0x52>
	{
		Error_Handler();
 800079a:	f000 f887 	bl	80008ac <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 80007a2:	f002 ff15 	bl	80035d0 <HAL_UARTEx_SetTxFifoThreshold>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_LPUART1_UART_Init+0x64>
	{
		Error_Handler();
 80007ac:	f000 f87e 	bl	80008ac <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 80007b4:	f002 ff4a 	bl	800364c <HAL_UARTEx_SetRxFifoThreshold>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_LPUART1_UART_Init+0x76>
	{
		Error_Handler();
 80007be:	f000 f875 	bl	80008ac <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 80007c4:	f002 fecb 	bl	800355e <HAL_UARTEx_DisableFifoMode>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_LPUART1_UART_Init+0x86>
	{
		Error_Handler();
 80007ce:	f000 f86d 	bl	80008ac <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000e8 	.word	0x200000e8
 80007dc:	40008000 	.word	0x40008000

080007e0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	@ 0x28
 80007e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b2b      	ldr	r3, [pc, #172]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	4a2a      	ldr	r2, [pc, #168]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000802:	4b28      	ldr	r3, [pc, #160]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800080e:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	4a24      	ldr	r2, [pc, #144]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 8000814:	f043 0320 	orr.w	r3, r3, #32
 8000818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081a:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	f003 0320 	and.w	r3, r3, #32
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	4a1e      	ldr	r2, [pc, #120]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000832:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	4a18      	ldr	r2, [pc, #96]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084a:	4b16      	ldr	r3, [pc, #88]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2120      	movs	r1, #32
 800085a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085e:	f000 fd35 	bl	80012cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000862:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000866:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <MX_GPIO_Init+0xc8>)
 8000878:	f000 fba6 	bl	8000fc8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800087c:	2320      	movs	r3, #32
 800087e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000896:	f000 fb97 	bl	8000fc8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	@ 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48000800 	.word	0x48000800

080008ac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <Error_Handler+0x8>

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c2:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <HAL_MspInit+0x44>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <HAL_MspInit+0x44>)
 80008cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008da:	4a08      	ldr	r2, [pc, #32]	@ (80008fc <HAL_MspInit+0x44>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <HAL_MspInit+0x44>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008ee:	f001 f93f 	bl	8001b70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b09c      	sub	sp, #112	@ 0x70
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	2244      	movs	r2, #68	@ 0x44
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f003 f874 	bl	8003a0e <memset>
  if(hi2c->Instance==I2C1)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a2d      	ldr	r2, [pc, #180]	@ (80009e0 <HAL_I2C_MspInit+0xe0>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d153      	bne.n	80009d8 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000930:	2340      	movs	r3, #64	@ 0x40
 8000932:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	4618      	mov	r0, r3
 800093e:	f001 fe55 	bl	80025ec <HAL_RCCEx_PeriphCLKConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000948:	f7ff ffb0 	bl	80008ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	4b25      	ldr	r3, [pc, #148]	@ (80009e4 <HAL_I2C_MspInit+0xe4>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000950:	4a24      	ldr	r2, [pc, #144]	@ (80009e4 <HAL_I2C_MspInit+0xe4>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000958:	4b22      	ldr	r3, [pc, #136]	@ (80009e4 <HAL_I2C_MspInit+0xe4>)
 800095a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000964:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <HAL_I2C_MspInit+0xe4>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000968:	4a1e      	ldr	r2, [pc, #120]	@ (80009e4 <HAL_I2C_MspInit+0xe4>)
 800096a:	f043 0302 	orr.w	r3, r3, #2
 800096e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000970:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <HAL_I2C_MspInit+0xe4>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800097c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000980:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000982:	2312      	movs	r3, #18
 8000984:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800098e:	2304      	movs	r3, #4
 8000990:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099c:	f000 fb14 	bl	8000fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009a0:	2380      	movs	r3, #128	@ 0x80
 80009a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a4:	2312      	movs	r3, #18
 80009a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b0:	2304      	movs	r3, #4
 80009b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009b8:	4619      	mov	r1, r3
 80009ba:	480b      	ldr	r0, [pc, #44]	@ (80009e8 <HAL_I2C_MspInit+0xe8>)
 80009bc:	f000 fb04 	bl	8000fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <HAL_I2C_MspInit+0xe4>)
 80009c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c4:	4a07      	ldr	r2, [pc, #28]	@ (80009e4 <HAL_I2C_MspInit+0xe4>)
 80009c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80009cc:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <HAL_I2C_MspInit+0xe4>)
 80009ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009d8:	bf00      	nop
 80009da:	3770      	adds	r7, #112	@ 0x70
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40005400 	.word	0x40005400
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000400 	.word	0x48000400

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b09a      	sub	sp, #104	@ 0x68
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	2244      	movs	r2, #68	@ 0x44
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 fffe 	bl	8003a0e <memset>
  if(huart->Instance==LPUART1)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a1f      	ldr	r2, [pc, #124]	@ (8000a94 <HAL_UART_MspInit+0xa8>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d136      	bne.n	8000a8a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a1c:	2320      	movs	r3, #32
 8000a1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 fddf 	bl	80025ec <HAL_RCCEx_PeriphCLKConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a34:	f7ff ff3a 	bl	80008ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a38:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <HAL_UART_MspInit+0xac>)
 8000a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a3c:	4a16      	ldr	r2, [pc, #88]	@ (8000a98 <HAL_UART_MspInit+0xac>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000a44:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <HAL_UART_MspInit+0xac>)
 8000a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <HAL_UART_MspInit+0xac>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a54:	4a10      	ldr	r2, [pc, #64]	@ (8000a98 <HAL_UART_MspInit+0xac>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <HAL_UART_MspInit+0xac>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a68:	230c      	movs	r3, #12
 8000a6a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a86:	f000 fa9f 	bl	8000fc8 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3768      	adds	r7, #104	@ 0x68
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40008000 	.word	0x40008000
 8000a98:	40021000 	.word	0x40021000

08000a9c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000aa4:	1d39      	adds	r1, r7, #4
 8000aa6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4803      	ldr	r0, [pc, #12]	@ (8000abc <__io_putchar+0x20>)
 8000aae:	f001 ffdd 	bl	8002a6c <HAL_UART_Transmit>

  return ch;
 8000ab2:	687b      	ldr	r3, [r7, #4]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200000e8 	.word	0x200000e8

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b16:	f000 f933 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	e00a      	b.n	8000b46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b30:	f3af 8000 	nop.w
 8000b34:	4601      	mov	r1, r0
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	1c5a      	adds	r2, r3, #1
 8000b3a:	60ba      	str	r2, [r7, #8]
 8000b3c:	b2ca      	uxtb	r2, r1
 8000b3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	3301      	adds	r3, #1
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	dbf0      	blt.n	8000b30 <_read+0x12>
  }

  return len;
 8000b4e:	687b      	ldr	r3, [r7, #4]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	e009      	b.n	8000b7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1c5a      	adds	r2, r3, #1
 8000b6e:	60ba      	str	r2, [r7, #8]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ff92 	bl	8000a9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	dbf1      	blt.n	8000b6a <_write+0x12>
  }
  return len;
 8000b86:	687b      	ldr	r3, [r7, #4]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_close>:

int _close(int file)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bb8:	605a      	str	r2, [r3, #4]
  return 0;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <_isatty>:

int _isatty(int file)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd0:	2301      	movs	r3, #1
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b085      	sub	sp, #20
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	60f8      	str	r0, [r7, #12]
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	@ (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	@ (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f002 ff40 	bl	8003aac <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20008000 	.word	0x20008000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	2000017c 	.word	0x2000017c
 8000c60:	20000308 	.word	0x20000308

08000c64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c88:	480d      	ldr	r0, [pc, #52]	@ (8000cc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c8c:	f7ff ffea 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c90:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c92:	490d      	ldr	r1, [pc, #52]	@ (8000cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <LoopForever+0xe>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd4 <LoopForever+0x16>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f002 feff 	bl	8003ab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cba:	f7ff fca7 	bl	800060c <main>

08000cbe <LoopForever>:

LoopForever:
    b LoopForever
 8000cbe:	e7fe      	b.n	8000cbe <LoopForever>
  ldr   r0, =_estack
 8000cc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ccc:	08004724 	.word	0x08004724
  ldr r2, =_sbss
 8000cd0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000cd4:	20000304 	.word	0x20000304

08000cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC1_2_IRQHandler>

08000cda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f93d 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f80e 	bl	8000d0c <HAL_InitTick>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	e001      	b.n	8000d00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cfc:	f7ff fddc 	bl	80008b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d00:	79fb      	ldrb	r3, [r7, #7]

}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d18:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <HAL_InitTick+0x68>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d022      	beq.n	8000d66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d20:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <HAL_InitTick+0x6c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <HAL_InitTick+0x68>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 f93a 	bl	8000fae <HAL_SYSTICK_Config>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d10f      	bne.n	8000d60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b0f      	cmp	r3, #15
 8000d44:	d809      	bhi.n	8000d5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d46:	2200      	movs	r2, #0
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4e:	f000 f914 	bl	8000f7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <HAL_InitTick+0x70>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	e007      	b.n	8000d6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e004      	b.n	8000d6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e001      	b.n	8000d6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <HAL_IncTick+0x1c>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <HAL_IncTick+0x20>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a03      	ldr	r2, [pc, #12]	@ (8000d9c <HAL_IncTick+0x1c>)
 8000d90:	6013      	str	r3, [r2, #0]
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	20000180 	.word	0x20000180
 8000da0:	20000008 	.word	0x20000008

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000180 	.word	0x20000180

08000dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc4:	f7ff ffee 	bl	8000da4 <HAL_GetTick>
 8000dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd4:	d004      	beq.n	8000de0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd6:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <HAL_Delay+0x40>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4413      	add	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de0:	bf00      	nop
 8000de2:	f7ff ffdf 	bl	8000da4 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d8f7      	bhi.n	8000de2 <HAL_Delay+0x26>
  {
  }
}
 8000df2:	bf00      	nop
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000008 	.word	0x20000008

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	@ (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	@ (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	@ 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff47 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff5e 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff90 	bl	8000eb8 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5f 	bl	8000e64 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffb2 	bl	8000f20 <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fd6:	e15a      	b.n	800128e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2101      	movs	r1, #1
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 814c 	beq.w	8001288 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d005      	beq.n	8001008 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001004:	2b02      	cmp	r3, #2
 8001006:	d130      	bne.n	800106a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800103e:	2201      	movs	r2, #1
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	f003 0201 	and.w	r2, r3, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b03      	cmp	r3, #3
 8001074:	d017      	beq.n	80010a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d123      	bne.n	80010fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	08da      	lsrs	r2, r3, #3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3208      	adds	r2, #8
 80010ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	691a      	ldr	r2, [r3, #16]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	08da      	lsrs	r2, r3, #3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3208      	adds	r2, #8
 80010f4:	6939      	ldr	r1, [r7, #16]
 80010f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2203      	movs	r2, #3
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0203 	and.w	r2, r3, #3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 80a6 	beq.w	8001288 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113c:	4b5b      	ldr	r3, [pc, #364]	@ (80012ac <HAL_GPIO_Init+0x2e4>)
 800113e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001140:	4a5a      	ldr	r2, [pc, #360]	@ (80012ac <HAL_GPIO_Init+0x2e4>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6613      	str	r3, [r2, #96]	@ 0x60
 8001148:	4b58      	ldr	r3, [pc, #352]	@ (80012ac <HAL_GPIO_Init+0x2e4>)
 800114a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001154:	4a56      	ldr	r2, [pc, #344]	@ (80012b0 <HAL_GPIO_Init+0x2e8>)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	220f      	movs	r2, #15
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800117e:	d01f      	beq.n	80011c0 <HAL_GPIO_Init+0x1f8>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a4c      	ldr	r2, [pc, #304]	@ (80012b4 <HAL_GPIO_Init+0x2ec>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d019      	beq.n	80011bc <HAL_GPIO_Init+0x1f4>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a4b      	ldr	r2, [pc, #300]	@ (80012b8 <HAL_GPIO_Init+0x2f0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d013      	beq.n	80011b8 <HAL_GPIO_Init+0x1f0>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a4a      	ldr	r2, [pc, #296]	@ (80012bc <HAL_GPIO_Init+0x2f4>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d00d      	beq.n	80011b4 <HAL_GPIO_Init+0x1ec>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a49      	ldr	r2, [pc, #292]	@ (80012c0 <HAL_GPIO_Init+0x2f8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d007      	beq.n	80011b0 <HAL_GPIO_Init+0x1e8>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a48      	ldr	r2, [pc, #288]	@ (80012c4 <HAL_GPIO_Init+0x2fc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d101      	bne.n	80011ac <HAL_GPIO_Init+0x1e4>
 80011a8:	2305      	movs	r3, #5
 80011aa:	e00a      	b.n	80011c2 <HAL_GPIO_Init+0x1fa>
 80011ac:	2306      	movs	r3, #6
 80011ae:	e008      	b.n	80011c2 <HAL_GPIO_Init+0x1fa>
 80011b0:	2304      	movs	r3, #4
 80011b2:	e006      	b.n	80011c2 <HAL_GPIO_Init+0x1fa>
 80011b4:	2303      	movs	r3, #3
 80011b6:	e004      	b.n	80011c2 <HAL_GPIO_Init+0x1fa>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e002      	b.n	80011c2 <HAL_GPIO_Init+0x1fa>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <HAL_GPIO_Init+0x1fa>
 80011c0:	2300      	movs	r3, #0
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	f002 0203 	and.w	r2, r2, #3
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	4093      	lsls	r3, r2
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d2:	4937      	ldr	r1, [pc, #220]	@ (80012b0 <HAL_GPIO_Init+0x2e8>)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e0:	4b39      	ldr	r3, [pc, #228]	@ (80012c8 <HAL_GPIO_Init+0x300>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001204:	4a30      	ldr	r2, [pc, #192]	@ (80012c8 <HAL_GPIO_Init+0x300>)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800120a:	4b2f      	ldr	r3, [pc, #188]	@ (80012c8 <HAL_GPIO_Init+0x300>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800122e:	4a26      	ldr	r2, [pc, #152]	@ (80012c8 <HAL_GPIO_Init+0x300>)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001234:	4b24      	ldr	r3, [pc, #144]	@ (80012c8 <HAL_GPIO_Init+0x300>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001258:	4a1b      	ldr	r2, [pc, #108]	@ (80012c8 <HAL_GPIO_Init+0x300>)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800125e:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <HAL_GPIO_Init+0x300>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001282:	4a11      	ldr	r2, [pc, #68]	@ (80012c8 <HAL_GPIO_Init+0x300>)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3301      	adds	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	f47f ae9d 	bne.w	8000fd8 <HAL_GPIO_Init+0x10>
  }
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000
 80012b4:	48000400 	.word	0x48000400
 80012b8:	48000800 	.word	0x48000800
 80012bc:	48000c00 	.word	0x48000c00
 80012c0:	48001000 	.word	0x48001000
 80012c4:	48001400 	.word	0x48001400
 80012c8:	40010400 	.word	0x40010400

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4013      	ands	r3, r2
 8001314:	041a      	lsls	r2, r3, #16
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	43d9      	mvns	r1, r3
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	400b      	ands	r3, r1
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	619a      	str	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e08d      	b.n	800145e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d106      	bne.n	800135c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fad2 	bl	8000900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2224      	movs	r2, #36	@ 0x24
 8001360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001380:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001390:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d107      	bne.n	80013aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	e006      	b.n	80013b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80013b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d108      	bne.n	80013d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	e007      	b.n	80013e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001404:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691a      	ldr	r2, [r3, #16]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69d9      	ldr	r1, [r3, #28]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1a      	ldr	r2, [r3, #32]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0201 	orr.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2220      	movs	r2, #32
 800144a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b08a      	sub	sp, #40	@ 0x28
 800146a:	af02      	add	r7, sp, #8
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	460b      	mov	r3, r1
 8001474:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b20      	cmp	r3, #32
 8001484:	f040 80d6 	bne.w	8001634 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001496:	d101      	bne.n	800149c <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001498:	2302      	movs	r3, #2
 800149a:	e0cc      	b.n	8001636 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_I2C_IsDeviceReady+0x44>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e0c5      	b.n	8001636 <HAL_I2C_IsDeviceReady+0x1d0>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2224      	movs	r2, #36	@ 0x24
 80014b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d107      	bne.n	80014d8 <HAL_I2C_IsDeviceReady+0x72>
 80014c8:	897b      	ldrh	r3, [r7, #10]
 80014ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014d6:	e006      	b.n	80014e6 <HAL_I2C_IsDeviceReady+0x80>
 80014d8:	897b      	ldrh	r3, [r7, #10]
 80014da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014e2:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80014ec:	f7ff fc5a 	bl	8000da4 <HAL_GetTick>
 80014f0:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0320 	and.w	r3, r3, #32
 80014fc:	2b20      	cmp	r3, #32
 80014fe:	bf0c      	ite	eq
 8001500:	2301      	moveq	r3, #1
 8001502:	2300      	movne	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	2b10      	cmp	r3, #16
 8001514:	bf0c      	ite	eq
 8001516:	2301      	moveq	r3, #1
 8001518:	2300      	movne	r3, #0
 800151a:	b2db      	uxtb	r3, r3
 800151c:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800151e:	e034      	b.n	800158a <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001526:	d01a      	beq.n	800155e <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001528:	f7ff fc3c 	bl	8000da4 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d302      	bcc.n	800153e <HAL_I2C_IsDeviceReady+0xd8>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2220      	movs	r2, #32
 8001542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	f043 0220 	orr.w	r2, r3, #32
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e06b      	b.n	8001636 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0320 	and.w	r3, r3, #32
 8001568:	2b20      	cmp	r3, #32
 800156a:	bf0c      	ite	eq
 800156c:	2301      	moveq	r3, #1
 800156e:	2300      	movne	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2b10      	cmp	r3, #16
 8001580:	bf0c      	ite	eq
 8001582:	2301      	moveq	r3, #1
 8001584:	2300      	movne	r3, #0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800158a:	7ffb      	ldrb	r3, [r7, #31]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <HAL_I2C_IsDeviceReady+0x130>
 8001590:	7fbb      	ldrb	r3, [r7, #30]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0c4      	beq.n	8001520 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	2b10      	cmp	r3, #16
 80015a2:	d01a      	beq.n	80015da <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	2120      	movs	r1, #32
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 f869 	bl	8001686 <I2C_WaitOnFlagUntilTimeout>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e03b      	b.n	8001636 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2220      	movs	r2, #32
 80015c4:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2220      	movs	r2, #32
 80015ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e02d      	b.n	8001636 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	2200      	movs	r2, #0
 80015e2:	2120      	movs	r1, #32
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 f84e 	bl	8001686 <I2C_WaitOnFlagUntilTimeout>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e020      	b.n	8001636 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2210      	movs	r2, #16
 80015fa:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2220      	movs	r2, #32
 8001602:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	429a      	cmp	r2, r3
 8001610:	f63f af56 	bhi.w	80014c0 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2220      	movs	r2, #32
 8001618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001620:	f043 0220 	orr.w	r2, r3, #32
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001634:	2302      	movs	r3, #2
  }
}
 8001636:	4618      	mov	r0, r3
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b02      	cmp	r3, #2
 8001652:	d103      	bne.n	800165c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b01      	cmp	r3, #1
 8001668:	d007      	beq.n	800167a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	699a      	ldr	r2, [r3, #24]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f042 0201 	orr.w	r2, r2, #1
 8001678:	619a      	str	r2, [r3, #24]
  }
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b084      	sub	sp, #16
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4613      	mov	r3, r2
 8001694:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001696:	e03b      	b.n	8001710 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	6839      	ldr	r1, [r7, #0]
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 f84b 	bl	8001738 <I2C_IsErrorOccurred>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e041      	b.n	8001730 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b2:	d02d      	beq.n	8001710 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016b4:	f7ff fb76 	bl	8000da4 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d302      	bcc.n	80016ca <I2C_WaitOnFlagUntilTimeout+0x44>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d122      	bne.n	8001710 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699a      	ldr	r2, [r3, #24]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4013      	ands	r3, r2
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	bf0c      	ite	eq
 80016da:	2301      	moveq	r3, #1
 80016dc:	2300      	movne	r3, #0
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d113      	bne.n	8001710 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ec:	f043 0220 	orr.w	r2, r3, #32
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2220      	movs	r2, #32
 80016f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e00f      	b.n	8001730 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699a      	ldr	r2, [r3, #24]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	4013      	ands	r3, r2
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	429a      	cmp	r2, r3
 800171e:	bf0c      	ite	eq
 8001720:	2301      	moveq	r3, #1
 8001722:	2300      	movne	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	429a      	cmp	r2, r3
 800172c:	d0b4      	beq.n	8001698 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	@ 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	2b00      	cmp	r3, #0
 8001762:	d068      	beq.n	8001836 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2210      	movs	r2, #16
 800176a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800176c:	e049      	b.n	8001802 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001774:	d045      	beq.n	8001802 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001776:	f7ff fb15 	bl	8000da4 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	429a      	cmp	r2, r3
 8001784:	d302      	bcc.n	800178c <I2C_IsErrorOccurred+0x54>
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d13a      	bne.n	8001802 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001796:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800179e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017ae:	d121      	bne.n	80017f4 <I2C_IsErrorOccurred+0xbc>
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017b6:	d01d      	beq.n	80017f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80017b8:	7cfb      	ldrb	r3, [r7, #19]
 80017ba:	2b20      	cmp	r3, #32
 80017bc:	d01a      	beq.n	80017f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80017ce:	f7ff fae9 	bl	8000da4 <HAL_GetTick>
 80017d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017d4:	e00e      	b.n	80017f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80017d6:	f7ff fae5 	bl	8000da4 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b19      	cmp	r3, #25
 80017e2:	d907      	bls.n	80017f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	f043 0320 	orr.w	r3, r3, #32
 80017ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80017f2:	e006      	b.n	8001802 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	2b20      	cmp	r3, #32
 8001800:	d1e9      	bne.n	80017d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	2b20      	cmp	r3, #32
 800180e:	d003      	beq.n	8001818 <I2C_IsErrorOccurred+0xe0>
 8001810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0aa      	beq.n	800176e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800181c:	2b00      	cmp	r3, #0
 800181e:	d103      	bne.n	8001828 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2220      	movs	r2, #32
 8001826:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00b      	beq.n	8001860 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001858:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00b      	beq.n	8001882 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800187a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00b      	beq.n	80018a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	f043 0302 	orr.w	r3, r3, #2
 8001892:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800189c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80018a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01c      	beq.n	80018e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f7ff fec6 	bl	800163e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <I2C_IsErrorOccurred+0x1bc>)
 80018be:	400b      	ands	r3, r1
 80018c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	431a      	orrs	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2220      	movs	r2, #32
 80018d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80018e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3728      	adds	r7, #40	@ 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	fe00e800 	.word	0xfe00e800

080018f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b20      	cmp	r3, #32
 800190c:	d138      	bne.n	8001980 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001918:	2302      	movs	r3, #2
 800191a:	e032      	b.n	8001982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2224      	movs	r2, #36	@ 0x24
 8001928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800194a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0201 	orr.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	e000      	b.n	8001982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001980:	2302      	movs	r3, #2
  }
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b20      	cmp	r3, #32
 80019a2:	d139      	bne.n	8001a18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e033      	b.n	8001a1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2224      	movs	r2, #36	@ 0x24
 80019be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0201 	bic.w	r2, r2, #1
 80019d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0201 	orr.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2220      	movs	r2, #32
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	e000      	b.n	8001a1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a18:	2302      	movs	r3, #2
  }
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d141      	bne.n	8001aba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a36:	4b4b      	ldr	r3, [pc, #300]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a42:	d131      	bne.n	8001aa8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a44:	4b47      	ldr	r3, [pc, #284]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a4a:	4a46      	ldr	r2, [pc, #280]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a54:	4b43      	ldr	r3, [pc, #268]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a5c:	4a41      	ldr	r2, [pc, #260]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a64:	4b40      	ldr	r3, [pc, #256]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2232      	movs	r2, #50	@ 0x32
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0c9b      	lsrs	r3, r3, #18
 8001a76:	3301      	adds	r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a7a:	e002      	b.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a82:	4b38      	ldr	r3, [pc, #224]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a8e:	d102      	bne.n	8001a96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f2      	bne.n	8001a7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a96:	4b33      	ldr	r3, [pc, #204]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aa2:	d158      	bne.n	8001b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e057      	b.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aae:	4a2d      	ldr	r2, [pc, #180]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ab4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ab8:	e04d      	b.n	8001b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ac0:	d141      	bne.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ac2:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ace:	d131      	bne.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad0:	4b24      	ldr	r3, [pc, #144]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ad6:	4a23      	ldr	r2, [pc, #140]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001adc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae0:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2232      	movs	r2, #50	@ 0x32
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	4a1c      	ldr	r2, [pc, #112]	@ (8001b6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	0c9b      	lsrs	r3, r3, #18
 8001b02:	3301      	adds	r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b06:	e002      	b.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b1a:	d102      	bne.n	8001b22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f2      	bne.n	8001b08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b2e:	d112      	bne.n	8001b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e011      	b.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b44:	e007      	b.n	8001b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40007000 	.word	0x40007000
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	431bde83 	.word	0x431bde83

08001b70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b7e:	6093      	str	r3, [r2, #8]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40007000 	.word	0x40007000

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e2fe      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d075      	beq.n	8001c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bae:	4b97      	ldr	r3, [pc, #604]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb8:	4b94      	ldr	r3, [pc, #592]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b0c      	cmp	r3, #12
 8001bc6:	d102      	bne.n	8001bce <HAL_RCC_OscConfig+0x3e>
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d002      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x44>
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d10b      	bne.n	8001bec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	4b8d      	ldr	r3, [pc, #564]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d05b      	beq.n	8001c98 <HAL_RCC_OscConfig+0x108>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d157      	bne.n	8001c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e2d9      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bf4:	d106      	bne.n	8001c04 <HAL_RCC_OscConfig+0x74>
 8001bf6:	4b85      	ldr	r3, [pc, #532]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a84      	ldr	r2, [pc, #528]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e01d      	b.n	8001c40 <HAL_RCC_OscConfig+0xb0>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x98>
 8001c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a7e      	ldr	r2, [pc, #504]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7b      	ldr	r2, [pc, #492]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0xb0>
 8001c28:	4b78      	ldr	r3, [pc, #480]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a77      	ldr	r2, [pc, #476]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b75      	ldr	r3, [pc, #468]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a74      	ldr	r2, [pc, #464]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d013      	beq.n	8001c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff f8ac 	bl	8000da4 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff f8a8 	bl	8000da4 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	@ 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e29e      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c62:	4b6a      	ldr	r3, [pc, #424]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0xc0>
 8001c6e:	e014      	b.n	8001c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff f898 	bl	8000da4 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff f894 	bl	8000da4 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	@ 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e28a      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8a:	4b60      	ldr	r3, [pc, #384]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0xe8>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d075      	beq.n	8001d92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca6:	4b59      	ldr	r3, [pc, #356]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb0:	4b56      	ldr	r3, [pc, #344]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	2b0c      	cmp	r3, #12
 8001cbe:	d102      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x136>
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d002      	beq.n	8001ccc <HAL_RCC_OscConfig+0x13c>
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d11f      	bne.n	8001d0c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ccc:	4b4f      	ldr	r3, [pc, #316]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x154>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e25d      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	4b49      	ldr	r3, [pc, #292]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	4946      	ldr	r1, [pc, #280]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cf8:	4b45      	ldr	r3, [pc, #276]	@ (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff f805 	bl	8000d0c <HAL_InitTick>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d043      	beq.n	8001d90 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e249      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d023      	beq.n	8001d5c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d14:	4b3d      	ldr	r3, [pc, #244]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a3c      	ldr	r2, [pc, #240]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff f840 	bl	8000da4 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d28:	f7ff f83c 	bl	8000da4 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e232      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d3a:	4b34      	ldr	r3, [pc, #208]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b31      	ldr	r3, [pc, #196]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	061b      	lsls	r3, r3, #24
 8001d54:	492d      	ldr	r1, [pc, #180]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]
 8001d5a:	e01a      	b.n	8001d92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a2a      	ldr	r2, [pc, #168]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001d62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff f81c 	bl	8000da4 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d70:	f7ff f818 	bl	8000da4 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e20e      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d82:	4b22      	ldr	r3, [pc, #136]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x1e0>
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d041      	beq.n	8001e22 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d01c      	beq.n	8001de0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da6:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dac:	4a17      	ldr	r2, [pc, #92]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db6:	f7fe fff5 	bl	8000da4 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dbe:	f7fe fff1 	bl	8000da4 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e1e7      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0ef      	beq.n	8001dbe <HAL_RCC_OscConfig+0x22e>
 8001dde:	e020      	b.n	8001e22 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de0:	4b0a      	ldr	r3, [pc, #40]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001de6:	4a09      	ldr	r2, [pc, #36]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df0:	f7fe ffd8 	bl	8000da4 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001df6:	e00d      	b.n	8001e14 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df8:	f7fe ffd4 	bl	8000da4 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d906      	bls.n	8001e14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1ca      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e14:	4b8c      	ldr	r3, [pc, #560]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ea      	bne.n	8001df8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80a6 	beq.w	8001f7c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e34:	4b84      	ldr	r3, [pc, #528]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2b4>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_OscConfig+0x2b6>
 8001e44:	2300      	movs	r3, #0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00d      	beq.n	8001e66 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e56:	4b7c      	ldr	r3, [pc, #496]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e62:	2301      	movs	r3, #1
 8001e64:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e66:	4b79      	ldr	r3, [pc, #484]	@ (800204c <HAL_RCC_OscConfig+0x4bc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d118      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e72:	4b76      	ldr	r3, [pc, #472]	@ (800204c <HAL_RCC_OscConfig+0x4bc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a75      	ldr	r2, [pc, #468]	@ (800204c <HAL_RCC_OscConfig+0x4bc>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7e:	f7fe ff91 	bl	8000da4 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e86:	f7fe ff8d 	bl	8000da4 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e183      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e98:	4b6c      	ldr	r3, [pc, #432]	@ (800204c <HAL_RCC_OscConfig+0x4bc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d108      	bne.n	8001ebe <HAL_RCC_OscConfig+0x32e>
 8001eac:	4b66      	ldr	r3, [pc, #408]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb2:	4a65      	ldr	r2, [pc, #404]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ebc:	e024      	b.n	8001f08 <HAL_RCC_OscConfig+0x378>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d110      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x358>
 8001ec6:	4b60      	ldr	r3, [pc, #384]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ecc:	4a5e      	ldr	r2, [pc, #376]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ed6:	4b5c      	ldr	r3, [pc, #368]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001edc:	4a5a      	ldr	r2, [pc, #360]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ee6:	e00f      	b.n	8001f08 <HAL_RCC_OscConfig+0x378>
 8001ee8:	4b57      	ldr	r3, [pc, #348]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eee:	4a56      	ldr	r2, [pc, #344]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ef8:	4b53      	ldr	r3, [pc, #332]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efe:	4a52      	ldr	r2, [pc, #328]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d016      	beq.n	8001f3e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7fe ff48 	bl	8000da4 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f16:	e00a      	b.n	8001f2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f18:	f7fe ff44 	bl	8000da4 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e138      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f2e:	4b46      	ldr	r3, [pc, #280]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ed      	beq.n	8001f18 <HAL_RCC_OscConfig+0x388>
 8001f3c:	e015      	b.n	8001f6a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3e:	f7fe ff31 	bl	8000da4 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe ff2d 	bl	8000da4 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e121      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1ed      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f6a:	7ffb      	ldrb	r3, [r7, #31]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d105      	bne.n	8001f7c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f70:	4b35      	ldr	r3, [pc, #212]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	4a34      	ldr	r2, [pc, #208]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001f76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d03c      	beq.n	8002002 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01c      	beq.n	8001fca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f90:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f96:	4a2c      	ldr	r2, [pc, #176]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa0:	f7fe ff00 	bl	8000da4 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fa8:	f7fe fefc 	bl	8000da4 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e0f2      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fba:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0ef      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x418>
 8001fc8:	e01b      	b.n	8002002 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fca:	4b1f      	ldr	r3, [pc, #124]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001fd2:	f023 0301 	bic.w	r3, r3, #1
 8001fd6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7fe fee3 	bl	8000da4 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fe2:	f7fe fedf 	bl	8000da4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e0d5      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ff4:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8001ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ef      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 80c9 	beq.w	800219e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 030c 	and.w	r3, r3, #12
 8002014:	2b0c      	cmp	r3, #12
 8002016:	f000 8083 	beq.w	8002120 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d15e      	bne.n	80020e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002022:	4b09      	ldr	r3, [pc, #36]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a08      	ldr	r2, [pc, #32]	@ (8002048 <HAL_RCC_OscConfig+0x4b8>)
 8002028:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800202c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202e:	f7fe feb9 	bl	8000da4 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002034:	e00c      	b.n	8002050 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7fe feb5 	bl	8000da4 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d905      	bls.n	8002050 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e0ab      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
 8002048:	40021000 	.word	0x40021000
 800204c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002050:	4b55      	ldr	r3, [pc, #340]	@ (80021a8 <HAL_RCC_OscConfig+0x618>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1ec      	bne.n	8002036 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800205c:	4b52      	ldr	r3, [pc, #328]	@ (80021a8 <HAL_RCC_OscConfig+0x618>)
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	4b52      	ldr	r3, [pc, #328]	@ (80021ac <HAL_RCC_OscConfig+0x61c>)
 8002062:	4013      	ands	r3, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6a11      	ldr	r1, [r2, #32]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800206c:	3a01      	subs	r2, #1
 800206e:	0112      	lsls	r2, r2, #4
 8002070:	4311      	orrs	r1, r2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002076:	0212      	lsls	r2, r2, #8
 8002078:	4311      	orrs	r1, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800207e:	0852      	lsrs	r2, r2, #1
 8002080:	3a01      	subs	r2, #1
 8002082:	0552      	lsls	r2, r2, #21
 8002084:	4311      	orrs	r1, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800208a:	0852      	lsrs	r2, r2, #1
 800208c:	3a01      	subs	r2, #1
 800208e:	0652      	lsls	r2, r2, #25
 8002090:	4311      	orrs	r1, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002096:	06d2      	lsls	r2, r2, #27
 8002098:	430a      	orrs	r2, r1
 800209a:	4943      	ldr	r1, [pc, #268]	@ (80021a8 <HAL_RCC_OscConfig+0x618>)
 800209c:	4313      	orrs	r3, r2
 800209e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a0:	4b41      	ldr	r3, [pc, #260]	@ (80021a8 <HAL_RCC_OscConfig+0x618>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a40      	ldr	r2, [pc, #256]	@ (80021a8 <HAL_RCC_OscConfig+0x618>)
 80020a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ac:	4b3e      	ldr	r3, [pc, #248]	@ (80021a8 <HAL_RCC_OscConfig+0x618>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a3d      	ldr	r2, [pc, #244]	@ (80021a8 <HAL_RCC_OscConfig+0x618>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe fe74 	bl	8000da4 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe fe70 	bl	8000da4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e066      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d2:	4b35      	ldr	r3, [pc, #212]	@ (80021a8 <HAL_RCC_OscConfig+0x618>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x530>
 80020de:	e05e      	b.n	800219e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e0:	4b31      	ldr	r3, [pc, #196]	@ (80021a8 <HAL_RCC_OscConfig+0x618>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a30      	ldr	r2, [pc, #192]	@ (80021a8 <HAL_RCC_OscConfig+0x618>)
 80020e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7fe fe5a 	bl	8000da4 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f4:	f7fe fe56 	bl	8000da4 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e04c      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002106:	4b28      	ldr	r3, [pc, #160]	@ (80021a8 <HAL_RCC_OscConfig+0x618>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002112:	4b25      	ldr	r3, [pc, #148]	@ (80021a8 <HAL_RCC_OscConfig+0x618>)
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	4924      	ldr	r1, [pc, #144]	@ (80021a8 <HAL_RCC_OscConfig+0x618>)
 8002118:	4b25      	ldr	r3, [pc, #148]	@ (80021b0 <HAL_RCC_OscConfig+0x620>)
 800211a:	4013      	ands	r3, r2
 800211c:	60cb      	str	r3, [r1, #12]
 800211e:	e03e      	b.n	800219e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e039      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800212c:	4b1e      	ldr	r3, [pc, #120]	@ (80021a8 <HAL_RCC_OscConfig+0x618>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 0203 	and.w	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	429a      	cmp	r2, r3
 800213e:	d12c      	bne.n	800219a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214a:	3b01      	subs	r3, #1
 800214c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d123      	bne.n	800219a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800215e:	429a      	cmp	r2, r3
 8002160:	d11b      	bne.n	800219a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d113      	bne.n	800219a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	3b01      	subs	r3, #1
 8002180:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d109      	bne.n	800219a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	3b01      	subs	r3, #1
 8002194:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3720      	adds	r7, #32
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	019f800c 	.word	0x019f800c
 80021b0:	feeefffc 	.word	0xfeeefffc

080021b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e11e      	b.n	800240a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021cc:	4b91      	ldr	r3, [pc, #580]	@ (8002414 <HAL_RCC_ClockConfig+0x260>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d910      	bls.n	80021fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b8e      	ldr	r3, [pc, #568]	@ (8002414 <HAL_RCC_ClockConfig+0x260>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 020f 	bic.w	r2, r3, #15
 80021e2:	498c      	ldr	r1, [pc, #560]	@ (8002414 <HAL_RCC_ClockConfig+0x260>)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b8a      	ldr	r3, [pc, #552]	@ (8002414 <HAL_RCC_ClockConfig+0x260>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e106      	b.n	800240a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d073      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d129      	bne.n	8002264 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002210:	4b81      	ldr	r3, [pc, #516]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0f4      	b.n	800240a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002220:	f000 f99e 	bl	8002560 <RCC_GetSysClockFreqFromPLLSource>
 8002224:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4a7c      	ldr	r2, [pc, #496]	@ (800241c <HAL_RCC_ClockConfig+0x268>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d93f      	bls.n	80022ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800222e:	4b7a      	ldr	r3, [pc, #488]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002242:	2b00      	cmp	r3, #0
 8002244:	d033      	beq.n	80022ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800224a:	2b00      	cmp	r3, #0
 800224c:	d12f      	bne.n	80022ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800224e:	4b72      	ldr	r3, [pc, #456]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002256:	4a70      	ldr	r2, [pc, #448]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 8002258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800225c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800225e:	2380      	movs	r3, #128	@ 0x80
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e024      	b.n	80022ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d107      	bne.n	800227c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800226c:	4b6a      	ldr	r3, [pc, #424]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0c6      	b.n	800240a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800227c:	4b66      	ldr	r3, [pc, #408]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0be      	b.n	800240a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800228c:	f000 f8ce 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8002290:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4a61      	ldr	r2, [pc, #388]	@ (800241c <HAL_RCC_ClockConfig+0x268>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d909      	bls.n	80022ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800229a:	4b5f      	ldr	r3, [pc, #380]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 80022a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022aa:	2380      	movs	r3, #128	@ 0x80
 80022ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f023 0203 	bic.w	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4957      	ldr	r1, [pc, #348]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c0:	f7fe fd70 	bl	8000da4 <HAL_GetTick>
 80022c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	e00a      	b.n	80022de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c8:	f7fe fd6c 	bl	8000da4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e095      	b.n	800240a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	4b4e      	ldr	r3, [pc, #312]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 020c 	and.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d1eb      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d023      	beq.n	8002344 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002308:	4b43      	ldr	r3, [pc, #268]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a42      	ldr	r2, [pc, #264]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 800230e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002312:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d007      	beq.n	8002330 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002320:	4b3d      	ldr	r3, [pc, #244]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002328:	4a3b      	ldr	r2, [pc, #236]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 800232a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800232e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002330:	4b39      	ldr	r3, [pc, #228]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4936      	ldr	r1, [pc, #216]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
 8002342:	e008      	b.n	8002356 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2b80      	cmp	r3, #128	@ 0x80
 8002348:	d105      	bne.n	8002356 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800234a:	4b33      	ldr	r3, [pc, #204]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	4a32      	ldr	r2, [pc, #200]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 8002350:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002354:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002356:	4b2f      	ldr	r3, [pc, #188]	@ (8002414 <HAL_RCC_ClockConfig+0x260>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d21d      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002364:	4b2b      	ldr	r3, [pc, #172]	@ (8002414 <HAL_RCC_ClockConfig+0x260>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 020f 	bic.w	r2, r3, #15
 800236c:	4929      	ldr	r1, [pc, #164]	@ (8002414 <HAL_RCC_ClockConfig+0x260>)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002374:	f7fe fd16 	bl	8000da4 <HAL_GetTick>
 8002378:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	e00a      	b.n	8002392 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800237c:	f7fe fd12 	bl	8000da4 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e03b      	b.n	800240a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <HAL_RCC_ClockConfig+0x260>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d1ed      	bne.n	800237c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4917      	ldr	r1, [pc, #92]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ca:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	490f      	ldr	r1, [pc, #60]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023de:	f000 f825 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023e2:	4602      	mov	r2, r0
 80023e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <HAL_RCC_ClockConfig+0x264>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	490c      	ldr	r1, [pc, #48]	@ (8002420 <HAL_RCC_ClockConfig+0x26c>)
 80023f0:	5ccb      	ldrb	r3, [r1, r3]
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	fa22 f303 	lsr.w	r3, r2, r3
 80023fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002424 <HAL_RCC_ClockConfig+0x270>)
 80023fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002428 <HAL_RCC_ClockConfig+0x274>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fc82 	bl	8000d0c <HAL_InitTick>
 8002408:	4603      	mov	r3, r0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40022000 	.word	0x40022000
 8002418:	40021000 	.word	0x40021000
 800241c:	04c4b400 	.word	0x04c4b400
 8002420:	080046a0 	.word	0x080046a0
 8002424:	20000000 	.word	0x20000000
 8002428:	20000004 	.word	0x20000004

0800242c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002432:	4b2c      	ldr	r3, [pc, #176]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b04      	cmp	r3, #4
 800243c:	d102      	bne.n	8002444 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800243e:	4b2a      	ldr	r3, [pc, #168]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	e047      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002444:	4b27      	ldr	r3, [pc, #156]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b08      	cmp	r3, #8
 800244e:	d102      	bne.n	8002456 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002450:	4b26      	ldr	r3, [pc, #152]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e03e      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002456:	4b23      	ldr	r3, [pc, #140]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b0c      	cmp	r3, #12
 8002460:	d136      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002462:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800246c:	4b1d      	ldr	r3, [pc, #116]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3301      	adds	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d10c      	bne.n	800249a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002480:	4a1a      	ldr	r2, [pc, #104]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	4a16      	ldr	r2, [pc, #88]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800248a:	68d2      	ldr	r2, [r2, #12]
 800248c:	0a12      	lsrs	r2, r2, #8
 800248e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	617b      	str	r3, [r7, #20]
      break;
 8002498:	e00c      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800249a:	4a13      	ldr	r2, [pc, #76]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	4a10      	ldr	r2, [pc, #64]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a4:	68d2      	ldr	r2, [r2, #12]
 80024a6:	0a12      	lsrs	r2, r2, #8
 80024a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	617b      	str	r3, [r7, #20]
      break;
 80024b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0e5b      	lsrs	r3, r3, #25
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	3301      	adds	r3, #1
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	e001      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024d4:	693b      	ldr	r3, [r7, #16]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	00f42400 	.word	0x00f42400
 80024ec:	016e3600 	.word	0x016e3600

080024f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_RCC_GetHCLKFreq+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000000 	.word	0x20000000

08002508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800250c:	f7ff fff0 	bl	80024f0 <HAL_RCC_GetHCLKFreq>
 8002510:	4602      	mov	r2, r0
 8002512:	4b06      	ldr	r3, [pc, #24]	@ (800252c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	4904      	ldr	r1, [pc, #16]	@ (8002530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800251e:	5ccb      	ldrb	r3, [r1, r3]
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000
 8002530:	080046b0 	.word	0x080046b0

08002534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002538:	f7ff ffda 	bl	80024f0 <HAL_RCC_GetHCLKFreq>
 800253c:	4602      	mov	r2, r0
 800253e:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	0adb      	lsrs	r3, r3, #11
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	4904      	ldr	r1, [pc, #16]	@ (800255c <HAL_RCC_GetPCLK2Freq+0x28>)
 800254a:	5ccb      	ldrb	r3, [r1, r3]
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002554:	4618      	mov	r0, r3
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	080046b0 	.word	0x080046b0

08002560 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002566:	4b1e      	ldr	r3, [pc, #120]	@ (80025e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002570:	4b1b      	ldr	r3, [pc, #108]	@ (80025e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3301      	adds	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d10c      	bne.n	800259e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002584:	4a17      	ldr	r2, [pc, #92]	@ (80025e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	4a14      	ldr	r2, [pc, #80]	@ (80025e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800258e:	68d2      	ldr	r2, [r2, #12]
 8002590:	0a12      	lsrs	r2, r2, #8
 8002592:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	617b      	str	r3, [r7, #20]
    break;
 800259c:	e00c      	b.n	80025b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800259e:	4a12      	ldr	r2, [pc, #72]	@ (80025e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a6:	4a0e      	ldr	r2, [pc, #56]	@ (80025e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025a8:	68d2      	ldr	r2, [r2, #12]
 80025aa:	0a12      	lsrs	r2, r2, #8
 80025ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025b0:	fb02 f303 	mul.w	r3, r2, r3
 80025b4:	617b      	str	r3, [r7, #20]
    break;
 80025b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025b8:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	0e5b      	lsrs	r3, r3, #25
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	3301      	adds	r3, #1
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025d2:	687b      	ldr	r3, [r7, #4]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	371c      	adds	r7, #28
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	40021000 	.word	0x40021000
 80025e4:	016e3600 	.word	0x016e3600
 80025e8:	00f42400 	.word	0x00f42400

080025ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025f4:	2300      	movs	r3, #0
 80025f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025f8:	2300      	movs	r3, #0
 80025fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8098 	beq.w	800273a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260e:	4b43      	ldr	r3, [pc, #268]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10d      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	4b40      	ldr	r3, [pc, #256]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261e:	4a3f      	ldr	r2, [pc, #252]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002624:	6593      	str	r3, [r2, #88]	@ 0x58
 8002626:	4b3d      	ldr	r3, [pc, #244]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002632:	2301      	movs	r3, #1
 8002634:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002636:	4b3a      	ldr	r3, [pc, #232]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a39      	ldr	r2, [pc, #228]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002640:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002642:	f7fe fbaf 	bl	8000da4 <HAL_GetTick>
 8002646:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002648:	e009      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264a:	f7fe fbab 	bl	8000da4 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d902      	bls.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	74fb      	strb	r3, [r7, #19]
        break;
 800265c:	e005      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800265e:	4b30      	ldr	r3, [pc, #192]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0ef      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800266a:	7cfb      	ldrb	r3, [r7, #19]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d159      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002670:	4b2a      	ldr	r3, [pc, #168]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800267a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01e      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	d019      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800268c:	4b23      	ldr	r3, [pc, #140]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002696:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002698:	4b20      	ldr	r3, [pc, #128]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269e:	4a1f      	ldr	r2, [pc, #124]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026a8:	4b1c      	ldr	r3, [pc, #112]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ae:	4a1b      	ldr	r2, [pc, #108]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026b8:	4a18      	ldr	r2, [pc, #96]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d016      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fe fb6b 	bl	8000da4 <HAL_GetTick>
 80026ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d0:	e00b      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7fe fb67 	bl	8000da4 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d902      	bls.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	74fb      	strb	r3, [r7, #19]
            break;
 80026e8:	e006      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ea:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ec      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10b      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026fe:	4b07      	ldr	r3, [pc, #28]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002704:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	4903      	ldr	r1, [pc, #12]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002714:	e008      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	74bb      	strb	r3, [r7, #18]
 800271a:	e005      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800271c:	40021000 	.word	0x40021000
 8002720:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002728:	7c7b      	ldrb	r3, [r7, #17]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d105      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272e:	4ba6      	ldr	r3, [pc, #664]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002732:	4aa5      	ldr	r2, [pc, #660]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002738:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002746:	4ba0      	ldr	r3, [pc, #640]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274c:	f023 0203 	bic.w	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	499c      	ldr	r1, [pc, #624]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002768:	4b97      	ldr	r3, [pc, #604]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	f023 020c 	bic.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4994      	ldr	r1, [pc, #592]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800278a:	4b8f      	ldr	r3, [pc, #572]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002790:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	498b      	ldr	r1, [pc, #556]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027ac:	4b86      	ldr	r3, [pc, #536]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	4983      	ldr	r1, [pc, #524]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027ce:	4b7e      	ldr	r3, [pc, #504]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	497a      	ldr	r1, [pc, #488]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f0:	4b75      	ldr	r3, [pc, #468]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	4972      	ldr	r1, [pc, #456]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002812:	4b6d      	ldr	r3, [pc, #436]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002818:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	4969      	ldr	r1, [pc, #420]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002834:	4b64      	ldr	r3, [pc, #400]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4961      	ldr	r1, [pc, #388]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002856:	4b5c      	ldr	r3, [pc, #368]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	4958      	ldr	r1, [pc, #352]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002874:	2b00      	cmp	r3, #0
 8002876:	d015      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002878:	4b53      	ldr	r3, [pc, #332]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002886:	4950      	ldr	r1, [pc, #320]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002896:	d105      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002898:	4b4b      	ldr	r3, [pc, #300]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a4a      	ldr	r2, [pc, #296]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028a2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d015      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028b0:	4b45      	ldr	r3, [pc, #276]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028be:	4942      	ldr	r1, [pc, #264]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028ce:	d105      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d0:	4b3d      	ldr	r3, [pc, #244]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a3c      	ldr	r2, [pc, #240]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028da:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d015      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028e8:	4b37      	ldr	r3, [pc, #220]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4934      	ldr	r1, [pc, #208]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002906:	d105      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002908:	4b2f      	ldr	r3, [pc, #188]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4a2e      	ldr	r2, [pc, #184]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002912:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d015      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002920:	4b29      	ldr	r3, [pc, #164]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002926:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292e:	4926      	ldr	r1, [pc, #152]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800293e:	d105      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002940:	4b21      	ldr	r3, [pc, #132]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4a20      	ldr	r2, [pc, #128]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800294a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d015      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002958:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002966:	4918      	ldr	r1, [pc, #96]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002972:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002976:	d105      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002978:	4b13      	ldr	r3, [pc, #76]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a12      	ldr	r2, [pc, #72]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002982:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d015      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002990:	4b0d      	ldr	r3, [pc, #52]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002996:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299e:	490a      	ldr	r1, [pc, #40]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029ae:	d105      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029b0:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4a04      	ldr	r2, [pc, #16]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80029bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000

080029cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e042      	b.n	8002a64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d106      	bne.n	80029f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7fd fffb 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2224      	movs	r2, #36	@ 0x24
 80029fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fb82 	bl	8003120 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f8b3 	bl	8002b88 <UART_SetConfig>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e01b      	b.n	8002a64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fc01 	bl	8003264 <UART_CheckIdleState>
 8002a62:	4603      	mov	r3, r0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	@ 0x28
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d17b      	bne.n	8002b7e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_UART_Transmit+0x26>
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e074      	b.n	8002b80 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2221      	movs	r2, #33	@ 0x21
 8002aa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aa6:	f7fe f97d 	bl	8000da4 <HAL_GetTick>
 8002aaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	88fa      	ldrh	r2, [r7, #6]
 8002ab0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	88fa      	ldrh	r2, [r7, #6]
 8002ab8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ac4:	d108      	bne.n	8002ad8 <HAL_UART_Transmit+0x6c>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d104      	bne.n	8002ad8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	e003      	b.n	8002ae0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ae0:	e030      	b.n	8002b44 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2180      	movs	r1, #128	@ 0x80
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 fc63 	bl	80033b8 <UART_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e03d      	b.n	8002b80 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10b      	bne.n	8002b22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b18:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	e007      	b.n	8002b32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1c8      	bne.n	8002ae2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2200      	movs	r2, #0
 8002b58:	2140      	movs	r1, #64	@ 0x40
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fc2c 	bl	80033b8 <UART_WaitOnFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e006      	b.n	8002b80 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002b7e:	2302      	movs	r3, #2
  }
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3720      	adds	r7, #32
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b8c:	b08c      	sub	sp, #48	@ 0x30
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4bab      	ldr	r3, [pc, #684]	@ (8002e64 <UART_SetConfig+0x2dc>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4aa0      	ldr	r2, [pc, #640]	@ (8002e68 <UART_SetConfig+0x2e0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d004      	beq.n	8002bf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002bfe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c12:	f023 010f 	bic.w	r1, r3, #15
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a91      	ldr	r2, [pc, #580]	@ (8002e6c <UART_SetConfig+0x2e4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d125      	bne.n	8002c78 <UART_SetConfig+0xf0>
 8002c2c:	4b90      	ldr	r3, [pc, #576]	@ (8002e70 <UART_SetConfig+0x2e8>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d81a      	bhi.n	8002c70 <UART_SetConfig+0xe8>
 8002c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c40 <UART_SetConfig+0xb8>)
 8002c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c40:	08002c51 	.word	0x08002c51
 8002c44:	08002c61 	.word	0x08002c61
 8002c48:	08002c59 	.word	0x08002c59
 8002c4c:	08002c69 	.word	0x08002c69
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c56:	e0d6      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c5e:	e0d2      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002c60:	2304      	movs	r3, #4
 8002c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c66:	e0ce      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002c68:	2308      	movs	r3, #8
 8002c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c6e:	e0ca      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002c70:	2310      	movs	r3, #16
 8002c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c76:	e0c6      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a7d      	ldr	r2, [pc, #500]	@ (8002e74 <UART_SetConfig+0x2ec>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d138      	bne.n	8002cf4 <UART_SetConfig+0x16c>
 8002c82:	4b7b      	ldr	r3, [pc, #492]	@ (8002e70 <UART_SetConfig+0x2e8>)
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b0c      	cmp	r3, #12
 8002c8e:	d82d      	bhi.n	8002cec <UART_SetConfig+0x164>
 8002c90:	a201      	add	r2, pc, #4	@ (adr r2, 8002c98 <UART_SetConfig+0x110>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ccd 	.word	0x08002ccd
 8002c9c:	08002ced 	.word	0x08002ced
 8002ca0:	08002ced 	.word	0x08002ced
 8002ca4:	08002ced 	.word	0x08002ced
 8002ca8:	08002cdd 	.word	0x08002cdd
 8002cac:	08002ced 	.word	0x08002ced
 8002cb0:	08002ced 	.word	0x08002ced
 8002cb4:	08002ced 	.word	0x08002ced
 8002cb8:	08002cd5 	.word	0x08002cd5
 8002cbc:	08002ced 	.word	0x08002ced
 8002cc0:	08002ced 	.word	0x08002ced
 8002cc4:	08002ced 	.word	0x08002ced
 8002cc8:	08002ce5 	.word	0x08002ce5
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cd2:	e098      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cda:	e094      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002cdc:	2304      	movs	r3, #4
 8002cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ce2:	e090      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002ce4:	2308      	movs	r3, #8
 8002ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cea:	e08c      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002cec:	2310      	movs	r3, #16
 8002cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cf2:	e088      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a5f      	ldr	r2, [pc, #380]	@ (8002e78 <UART_SetConfig+0x2f0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d125      	bne.n	8002d4a <UART_SetConfig+0x1c2>
 8002cfe:	4b5c      	ldr	r3, [pc, #368]	@ (8002e70 <UART_SetConfig+0x2e8>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d08:	2b30      	cmp	r3, #48	@ 0x30
 8002d0a:	d016      	beq.n	8002d3a <UART_SetConfig+0x1b2>
 8002d0c:	2b30      	cmp	r3, #48	@ 0x30
 8002d0e:	d818      	bhi.n	8002d42 <UART_SetConfig+0x1ba>
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d00a      	beq.n	8002d2a <UART_SetConfig+0x1a2>
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d814      	bhi.n	8002d42 <UART_SetConfig+0x1ba>
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <UART_SetConfig+0x19a>
 8002d1c:	2b10      	cmp	r3, #16
 8002d1e:	d008      	beq.n	8002d32 <UART_SetConfig+0x1aa>
 8002d20:	e00f      	b.n	8002d42 <UART_SetConfig+0x1ba>
 8002d22:	2300      	movs	r3, #0
 8002d24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d28:	e06d      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d30:	e069      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d32:	2304      	movs	r3, #4
 8002d34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d38:	e065      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d40:	e061      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d42:	2310      	movs	r3, #16
 8002d44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d48:	e05d      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a4b      	ldr	r2, [pc, #300]	@ (8002e7c <UART_SetConfig+0x2f4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d125      	bne.n	8002da0 <UART_SetConfig+0x218>
 8002d54:	4b46      	ldr	r3, [pc, #280]	@ (8002e70 <UART_SetConfig+0x2e8>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d60:	d016      	beq.n	8002d90 <UART_SetConfig+0x208>
 8002d62:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d64:	d818      	bhi.n	8002d98 <UART_SetConfig+0x210>
 8002d66:	2b80      	cmp	r3, #128	@ 0x80
 8002d68:	d00a      	beq.n	8002d80 <UART_SetConfig+0x1f8>
 8002d6a:	2b80      	cmp	r3, #128	@ 0x80
 8002d6c:	d814      	bhi.n	8002d98 <UART_SetConfig+0x210>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <UART_SetConfig+0x1f0>
 8002d72:	2b40      	cmp	r3, #64	@ 0x40
 8002d74:	d008      	beq.n	8002d88 <UART_SetConfig+0x200>
 8002d76:	e00f      	b.n	8002d98 <UART_SetConfig+0x210>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d7e:	e042      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d80:	2302      	movs	r3, #2
 8002d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d86:	e03e      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d88:	2304      	movs	r3, #4
 8002d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d8e:	e03a      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d90:	2308      	movs	r3, #8
 8002d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d96:	e036      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d98:	2310      	movs	r3, #16
 8002d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d9e:	e032      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a30      	ldr	r2, [pc, #192]	@ (8002e68 <UART_SetConfig+0x2e0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d12a      	bne.n	8002e00 <UART_SetConfig+0x278>
 8002daa:	4b31      	ldr	r3, [pc, #196]	@ (8002e70 <UART_SetConfig+0x2e8>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002db4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002db8:	d01a      	beq.n	8002df0 <UART_SetConfig+0x268>
 8002dba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002dbe:	d81b      	bhi.n	8002df8 <UART_SetConfig+0x270>
 8002dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dc4:	d00c      	beq.n	8002de0 <UART_SetConfig+0x258>
 8002dc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dca:	d815      	bhi.n	8002df8 <UART_SetConfig+0x270>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <UART_SetConfig+0x250>
 8002dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd4:	d008      	beq.n	8002de8 <UART_SetConfig+0x260>
 8002dd6:	e00f      	b.n	8002df8 <UART_SetConfig+0x270>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dde:	e012      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002de0:	2302      	movs	r3, #2
 8002de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002de6:	e00e      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002de8:	2304      	movs	r3, #4
 8002dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dee:	e00a      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002df0:	2308      	movs	r3, #8
 8002df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002df6:	e006      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002df8:	2310      	movs	r3, #16
 8002dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dfe:	e002      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002e00:	2310      	movs	r3, #16
 8002e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a17      	ldr	r2, [pc, #92]	@ (8002e68 <UART_SetConfig+0x2e0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	f040 80a8 	bne.w	8002f62 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d834      	bhi.n	8002e84 <UART_SetConfig+0x2fc>
 8002e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e20 <UART_SetConfig+0x298>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e45 	.word	0x08002e45
 8002e24:	08002e85 	.word	0x08002e85
 8002e28:	08002e4d 	.word	0x08002e4d
 8002e2c:	08002e85 	.word	0x08002e85
 8002e30:	08002e53 	.word	0x08002e53
 8002e34:	08002e85 	.word	0x08002e85
 8002e38:	08002e85 	.word	0x08002e85
 8002e3c:	08002e85 	.word	0x08002e85
 8002e40:	08002e5b 	.word	0x08002e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e44:	f7ff fb60 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8002e48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e4a:	e021      	b.n	8002e90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <UART_SetConfig+0x2f8>)
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e50:	e01e      	b.n	8002e90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e52:	f7ff faeb 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8002e56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e58:	e01a      	b.n	8002e90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e60:	e016      	b.n	8002e90 <UART_SetConfig+0x308>
 8002e62:	bf00      	nop
 8002e64:	cfff69f3 	.word	0xcfff69f3
 8002e68:	40008000 	.word	0x40008000
 8002e6c:	40013800 	.word	0x40013800
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40004400 	.word	0x40004400
 8002e78:	40004800 	.word	0x40004800
 8002e7c:	40004c00 	.word	0x40004c00
 8002e80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 812a 	beq.w	80030ec <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	4a9e      	ldr	r2, [pc, #632]	@ (8003118 <UART_SetConfig+0x590>)
 8002e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d305      	bcc.n	8002ec8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d903      	bls.n	8002ed0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002ece:	e10d      	b.n	80030ec <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	60fa      	str	r2, [r7, #12]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	4a8e      	ldr	r2, [pc, #568]	@ (8003118 <UART_SetConfig+0x590>)
 8002ede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ef2:	f7fd f9ed 	bl	80002d0 <__aeabi_uldivmod>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	020b      	lsls	r3, r1, #8
 8002f08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f0c:	0202      	lsls	r2, r0, #8
 8002f0e:	6979      	ldr	r1, [r7, #20]
 8002f10:	6849      	ldr	r1, [r1, #4]
 8002f12:	0849      	lsrs	r1, r1, #1
 8002f14:	2000      	movs	r0, #0
 8002f16:	460c      	mov	r4, r1
 8002f18:	4605      	mov	r5, r0
 8002f1a:	eb12 0804 	adds.w	r8, r2, r4
 8002f1e:	eb43 0905 	adc.w	r9, r3, r5
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	469a      	mov	sl, r3
 8002f2a:	4693      	mov	fp, r2
 8002f2c:	4652      	mov	r2, sl
 8002f2e:	465b      	mov	r3, fp
 8002f30:	4640      	mov	r0, r8
 8002f32:	4649      	mov	r1, r9
 8002f34:	f7fd f9cc 	bl	80002d0 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f46:	d308      	bcc.n	8002f5a <UART_SetConfig+0x3d2>
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f4e:	d204      	bcs.n	8002f5a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	60da      	str	r2, [r3, #12]
 8002f58:	e0c8      	b.n	80030ec <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f60:	e0c4      	b.n	80030ec <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f6a:	d167      	bne.n	800303c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d828      	bhi.n	8002fc6 <UART_SetConfig+0x43e>
 8002f74:	a201      	add	r2, pc, #4	@ (adr r2, 8002f7c <UART_SetConfig+0x3f4>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002fa1 	.word	0x08002fa1
 8002f80:	08002fa9 	.word	0x08002fa9
 8002f84:	08002fb1 	.word	0x08002fb1
 8002f88:	08002fc7 	.word	0x08002fc7
 8002f8c:	08002fb7 	.word	0x08002fb7
 8002f90:	08002fc7 	.word	0x08002fc7
 8002f94:	08002fc7 	.word	0x08002fc7
 8002f98:	08002fc7 	.word	0x08002fc7
 8002f9c:	08002fbf 	.word	0x08002fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa0:	f7ff fab2 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8002fa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fa6:	e014      	b.n	8002fd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fa8:	f7ff fac4 	bl	8002534 <HAL_RCC_GetPCLK2Freq>
 8002fac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fae:	e010      	b.n	8002fd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800311c <UART_SetConfig+0x594>)
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fb4:	e00d      	b.n	8002fd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fb6:	f7ff fa39 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8002fba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fbc:	e009      	b.n	8002fd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fc4:	e005      	b.n	8002fd2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002fd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8089 	beq.w	80030ec <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fde:	4a4e      	ldr	r2, [pc, #312]	@ (8003118 <UART_SetConfig+0x590>)
 8002fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fec:	005a      	lsls	r2, r3, #1
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	441a      	add	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	d916      	bls.n	8003034 <UART_SetConfig+0x4ac>
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800300c:	d212      	bcs.n	8003034 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	b29b      	uxth	r3, r3
 8003012:	f023 030f 	bic.w	r3, r3, #15
 8003016:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	b29b      	uxth	r3, r3
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	b29a      	uxth	r2, r3
 8003024:	8bfb      	ldrh	r3, [r7, #30]
 8003026:	4313      	orrs	r3, r2
 8003028:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	8bfa      	ldrh	r2, [r7, #30]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	e05b      	b.n	80030ec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800303a:	e057      	b.n	80030ec <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800303c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003040:	2b08      	cmp	r3, #8
 8003042:	d828      	bhi.n	8003096 <UART_SetConfig+0x50e>
 8003044:	a201      	add	r2, pc, #4	@ (adr r2, 800304c <UART_SetConfig+0x4c4>)
 8003046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304a:	bf00      	nop
 800304c:	08003071 	.word	0x08003071
 8003050:	08003079 	.word	0x08003079
 8003054:	08003081 	.word	0x08003081
 8003058:	08003097 	.word	0x08003097
 800305c:	08003087 	.word	0x08003087
 8003060:	08003097 	.word	0x08003097
 8003064:	08003097 	.word	0x08003097
 8003068:	08003097 	.word	0x08003097
 800306c:	0800308f 	.word	0x0800308f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003070:	f7ff fa4a 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8003074:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003076:	e014      	b.n	80030a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003078:	f7ff fa5c 	bl	8002534 <HAL_RCC_GetPCLK2Freq>
 800307c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800307e:	e010      	b.n	80030a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003080:	4b26      	ldr	r3, [pc, #152]	@ (800311c <UART_SetConfig+0x594>)
 8003082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003084:	e00d      	b.n	80030a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003086:	f7ff f9d1 	bl	800242c <HAL_RCC_GetSysClockFreq>
 800308a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800308c:	e009      	b.n	80030a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800308e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003094:	e005      	b.n	80030a2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80030a0:	bf00      	nop
    }

    if (pclk != 0U)
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d021      	beq.n	80030ec <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003118 <UART_SetConfig+0x590>)
 80030ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030b2:	461a      	mov	r2, r3
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	085b      	lsrs	r3, r3, #1
 80030c0:	441a      	add	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	2b0f      	cmp	r3, #15
 80030d0:	d909      	bls.n	80030e6 <UART_SetConfig+0x55e>
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d8:	d205      	bcs.n	80030e6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	e002      	b.n	80030ec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2200      	movs	r2, #0
 8003100:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2200      	movs	r2, #0
 8003106:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003108:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800310c:	4618      	mov	r0, r3
 800310e:	3730      	adds	r7, #48	@ 0x30
 8003110:	46bd      	mov	sp, r7
 8003112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003116:	bf00      	nop
 8003118:	080046b8 	.word	0x080046b8
 800311c:	00f42400 	.word	0x00f42400

08003120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01a      	beq.n	8003236 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800321e:	d10a      	bne.n	8003236 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	605a      	str	r2, [r3, #4]
  }
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b098      	sub	sp, #96	@ 0x60
 8003268:	af02      	add	r7, sp, #8
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003274:	f7fd fd96 	bl	8000da4 <HAL_GetTick>
 8003278:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b08      	cmp	r3, #8
 8003286:	d12f      	bne.n	80032e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003288:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003290:	2200      	movs	r2, #0
 8003292:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f88e 	bl	80033b8 <UART_WaitOnFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d022      	beq.n	80032e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032aa:	e853 3f00 	ldrex	r3, [r3]
 80032ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80032c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032c8:	e841 2300 	strex	r3, r2, [r1]
 80032cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e6      	bne.n	80032a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e063      	b.n	80033b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d149      	bne.n	800338a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fe:	2200      	movs	r2, #0
 8003300:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f857 	bl	80033b8 <UART_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d03c      	beq.n	800338a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	623b      	str	r3, [r7, #32]
   return(result);
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800332e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003330:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800333c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e6      	bne.n	8003310 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3308      	adds	r3, #8
 8003348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	60fb      	str	r3, [r7, #12]
   return(result);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	64bb      	str	r3, [r7, #72]	@ 0x48
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3308      	adds	r3, #8
 8003360:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003362:	61fa      	str	r2, [r7, #28]
 8003364:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003366:	69b9      	ldr	r1, [r7, #24]
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	e841 2300 	strex	r3, r2, [r1]
 800336e:	617b      	str	r3, [r7, #20]
   return(result);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1e5      	bne.n	8003342 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e012      	b.n	80033b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3758      	adds	r7, #88	@ 0x58
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c8:	e04f      	b.n	800346a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d04b      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d2:	f7fd fce7 	bl	8000da4 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d302      	bcc.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e04e      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d037      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0xb2>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b80      	cmp	r3, #128	@ 0x80
 80033fe:	d034      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b40      	cmp	r3, #64	@ 0x40
 8003404:	d031      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d110      	bne.n	8003436 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2208      	movs	r2, #8
 800341a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f838 	bl	8003492 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2208      	movs	r2, #8
 8003426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e029      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003444:	d111      	bne.n	800346a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800344e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f81e 	bl	8003492 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2220      	movs	r2, #32
 800345a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e00f      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4013      	ands	r3, r2
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	429a      	cmp	r2, r3
 8003478:	bf0c      	ite	eq
 800347a:	2301      	moveq	r3, #1
 800347c:	2300      	movne	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	429a      	cmp	r2, r3
 8003486:	d0a0      	beq.n	80033ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003492:	b480      	push	{r7}
 8003494:	b095      	sub	sp, #84	@ 0x54
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80034ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e6      	bne.n	800349a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3308      	adds	r3, #8
 80034d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	e853 3f00 	ldrex	r3, [r3]
 80034da:	61fb      	str	r3, [r7, #28]
   return(result);
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3308      	adds	r3, #8
 80034ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034f8:	e841 2300 	strex	r3, r2, [r1]
 80034fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e3      	bne.n	80034cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d118      	bne.n	800353e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	60bb      	str	r3, [r7, #8]
   return(result);
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f023 0310 	bic.w	r3, r3, #16
 8003520:	647b      	str	r3, [r7, #68]	@ 0x44
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	6979      	ldr	r1, [r7, #20]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	613b      	str	r3, [r7, #16]
   return(result);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e6      	bne.n	800350c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003552:	bf00      	nop
 8003554:	3754      	adds	r7, #84	@ 0x54
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_UARTEx_DisableFifoMode+0x16>
 8003570:	2302      	movs	r3, #2
 8003572:	e027      	b.n	80035c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2224      	movs	r2, #36	@ 0x24
 8003580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80035a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e02d      	b.n	8003644 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2224      	movs	r2, #36	@ 0x24
 80035f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f84f 	bl	80036c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003660:	2302      	movs	r3, #2
 8003662:	e02d      	b.n	80036c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	@ 0x24
 8003670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f811 	bl	80036c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d108      	bne.n	80036ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80036e8:	e031      	b.n	800374e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80036ea:	2308      	movs	r3, #8
 80036ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80036ee:	2308      	movs	r3, #8
 80036f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	0e5b      	lsrs	r3, r3, #25
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	0f5b      	lsrs	r3, r3, #29
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003712:	7bbb      	ldrb	r3, [r7, #14]
 8003714:	7b3a      	ldrb	r2, [r7, #12]
 8003716:	4911      	ldr	r1, [pc, #68]	@ (800375c <UARTEx_SetNbDataToProcess+0x94>)
 8003718:	5c8a      	ldrb	r2, [r1, r2]
 800371a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800371e:	7b3a      	ldrb	r2, [r7, #12]
 8003720:	490f      	ldr	r1, [pc, #60]	@ (8003760 <UARTEx_SetNbDataToProcess+0x98>)
 8003722:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003724:	fb93 f3f2 	sdiv	r3, r3, r2
 8003728:	b29a      	uxth	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	7b7a      	ldrb	r2, [r7, #13]
 8003734:	4909      	ldr	r1, [pc, #36]	@ (800375c <UARTEx_SetNbDataToProcess+0x94>)
 8003736:	5c8a      	ldrb	r2, [r1, r2]
 8003738:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800373c:	7b7a      	ldrb	r2, [r7, #13]
 800373e:	4908      	ldr	r1, [pc, #32]	@ (8003760 <UARTEx_SetNbDataToProcess+0x98>)
 8003740:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003742:	fb93 f3f2 	sdiv	r3, r3, r2
 8003746:	b29a      	uxth	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	080046d0 	.word	0x080046d0
 8003760:	080046d8 	.word	0x080046d8

08003764 <setup>:

extern UART_HandleTypeDef hlpuart1;
uint8_t prompt[15] = "\nSTM32G431 >> ";
uint8_t message[50];

void setup() {
 8003764:	b5b0      	push	{r4, r5, r7, lr}
 8003766:	af00      	add	r7, sp, #0
	strcpy((char*)message, "MSC 2024 - Capteurs\r\n");
 8003768:	4a11      	ldr	r2, [pc, #68]	@ (80037b0 <setup+0x4c>)
 800376a:	4b12      	ldr	r3, [pc, #72]	@ (80037b4 <setup+0x50>)
 800376c:	4614      	mov	r4, r2
 800376e:	461d      	mov	r5, r3
 8003770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003774:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003778:	6020      	str	r0, [r4, #0]
 800377a:	3404      	adds	r4, #4
 800377c:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&hlpuart1, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 800377e:	480e      	ldr	r0, [pc, #56]	@ (80037b8 <setup+0x54>)
 8003780:	f7fc fd4e 	bl	8000220 <strlen>
 8003784:	4603      	mov	r3, r0
 8003786:	b29a      	uxth	r2, r3
 8003788:	f04f 33ff 	mov.w	r3, #4294967295
 800378c:	490a      	ldr	r1, [pc, #40]	@ (80037b8 <setup+0x54>)
 800378e:	480b      	ldr	r0, [pc, #44]	@ (80037bc <setup+0x58>)
 8003790:	f7ff f96c 	bl	8002a6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, message, strlen((char*)message), HAL_MAX_DELAY);
 8003794:	4806      	ldr	r0, [pc, #24]	@ (80037b0 <setup+0x4c>)
 8003796:	f7fc fd43 	bl	8000220 <strlen>
 800379a:	4603      	mov	r3, r0
 800379c:	b29a      	uxth	r2, r3
 800379e:	f04f 33ff 	mov.w	r3, #4294967295
 80037a2:	4903      	ldr	r1, [pc, #12]	@ (80037b0 <setup+0x4c>)
 80037a4:	4805      	ldr	r0, [pc, #20]	@ (80037bc <setup+0x58>)
 80037a6:	f7ff f961 	bl	8002a6c <HAL_UART_Transmit>
}
 80037aa:	bf00      	nop
 80037ac:	bdb0      	pop	{r4, r5, r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000184 	.word	0x20000184
 80037b4:	0800467c 	.word	0x0800467c
 80037b8:	2000000c 	.word	0x2000000c
 80037bc:	200000e8 	.word	0x200000e8

080037c0 <test_LEDs>:
/**
  * @brief Make PA5 LED blink.
  * @param delay : current delay
  * @retval HAL status
  */
void test_LEDs(int delay){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	for(;;){
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80037c8:	2120      	movs	r1, #32
 80037ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037ce:	f7fd fd95 	bl	80012fc <HAL_GPIO_TogglePin>
		HAL_Delay(delay);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fd faf1 	bl	8000dbc <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80037da:	bf00      	nop
 80037dc:	e7f4      	b.n	80037c8 <test_LEDs+0x8>
	...

080037e0 <std>:
 80037e0:	2300      	movs	r3, #0
 80037e2:	b510      	push	{r4, lr}
 80037e4:	4604      	mov	r4, r0
 80037e6:	e9c0 3300 	strd	r3, r3, [r0]
 80037ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037ee:	6083      	str	r3, [r0, #8]
 80037f0:	8181      	strh	r1, [r0, #12]
 80037f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80037f4:	81c2      	strh	r2, [r0, #14]
 80037f6:	6183      	str	r3, [r0, #24]
 80037f8:	4619      	mov	r1, r3
 80037fa:	2208      	movs	r2, #8
 80037fc:	305c      	adds	r0, #92	@ 0x5c
 80037fe:	f000 f906 	bl	8003a0e <memset>
 8003802:	4b0d      	ldr	r3, [pc, #52]	@ (8003838 <std+0x58>)
 8003804:	6263      	str	r3, [r4, #36]	@ 0x24
 8003806:	4b0d      	ldr	r3, [pc, #52]	@ (800383c <std+0x5c>)
 8003808:	62a3      	str	r3, [r4, #40]	@ 0x28
 800380a:	4b0d      	ldr	r3, [pc, #52]	@ (8003840 <std+0x60>)
 800380c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800380e:	4b0d      	ldr	r3, [pc, #52]	@ (8003844 <std+0x64>)
 8003810:	6323      	str	r3, [r4, #48]	@ 0x30
 8003812:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <std+0x68>)
 8003814:	6224      	str	r4, [r4, #32]
 8003816:	429c      	cmp	r4, r3
 8003818:	d006      	beq.n	8003828 <std+0x48>
 800381a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800381e:	4294      	cmp	r4, r2
 8003820:	d002      	beq.n	8003828 <std+0x48>
 8003822:	33d0      	adds	r3, #208	@ 0xd0
 8003824:	429c      	cmp	r4, r3
 8003826:	d105      	bne.n	8003834 <std+0x54>
 8003828:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800382c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003830:	f000 b966 	b.w	8003b00 <__retarget_lock_init_recursive>
 8003834:	bd10      	pop	{r4, pc}
 8003836:	bf00      	nop
 8003838:	08003989 	.word	0x08003989
 800383c:	080039ab 	.word	0x080039ab
 8003840:	080039e3 	.word	0x080039e3
 8003844:	08003a07 	.word	0x08003a07
 8003848:	200001b8 	.word	0x200001b8

0800384c <stdio_exit_handler>:
 800384c:	4a02      	ldr	r2, [pc, #8]	@ (8003858 <stdio_exit_handler+0xc>)
 800384e:	4903      	ldr	r1, [pc, #12]	@ (800385c <stdio_exit_handler+0x10>)
 8003850:	4803      	ldr	r0, [pc, #12]	@ (8003860 <stdio_exit_handler+0x14>)
 8003852:	f000 b869 	b.w	8003928 <_fwalk_sglue>
 8003856:	bf00      	nop
 8003858:	2000001c 	.word	0x2000001c
 800385c:	080043a1 	.word	0x080043a1
 8003860:	2000002c 	.word	0x2000002c

08003864 <cleanup_stdio>:
 8003864:	6841      	ldr	r1, [r0, #4]
 8003866:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <cleanup_stdio+0x34>)
 8003868:	4299      	cmp	r1, r3
 800386a:	b510      	push	{r4, lr}
 800386c:	4604      	mov	r4, r0
 800386e:	d001      	beq.n	8003874 <cleanup_stdio+0x10>
 8003870:	f000 fd96 	bl	80043a0 <_fflush_r>
 8003874:	68a1      	ldr	r1, [r4, #8]
 8003876:	4b09      	ldr	r3, [pc, #36]	@ (800389c <cleanup_stdio+0x38>)
 8003878:	4299      	cmp	r1, r3
 800387a:	d002      	beq.n	8003882 <cleanup_stdio+0x1e>
 800387c:	4620      	mov	r0, r4
 800387e:	f000 fd8f 	bl	80043a0 <_fflush_r>
 8003882:	68e1      	ldr	r1, [r4, #12]
 8003884:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <cleanup_stdio+0x3c>)
 8003886:	4299      	cmp	r1, r3
 8003888:	d004      	beq.n	8003894 <cleanup_stdio+0x30>
 800388a:	4620      	mov	r0, r4
 800388c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003890:	f000 bd86 	b.w	80043a0 <_fflush_r>
 8003894:	bd10      	pop	{r4, pc}
 8003896:	bf00      	nop
 8003898:	200001b8 	.word	0x200001b8
 800389c:	20000220 	.word	0x20000220
 80038a0:	20000288 	.word	0x20000288

080038a4 <global_stdio_init.part.0>:
 80038a4:	b510      	push	{r4, lr}
 80038a6:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <global_stdio_init.part.0+0x30>)
 80038a8:	4c0b      	ldr	r4, [pc, #44]	@ (80038d8 <global_stdio_init.part.0+0x34>)
 80038aa:	4a0c      	ldr	r2, [pc, #48]	@ (80038dc <global_stdio_init.part.0+0x38>)
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	4620      	mov	r0, r4
 80038b0:	2200      	movs	r2, #0
 80038b2:	2104      	movs	r1, #4
 80038b4:	f7ff ff94 	bl	80037e0 <std>
 80038b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80038bc:	2201      	movs	r2, #1
 80038be:	2109      	movs	r1, #9
 80038c0:	f7ff ff8e 	bl	80037e0 <std>
 80038c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80038c8:	2202      	movs	r2, #2
 80038ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038ce:	2112      	movs	r1, #18
 80038d0:	f7ff bf86 	b.w	80037e0 <std>
 80038d4:	200002f0 	.word	0x200002f0
 80038d8:	200001b8 	.word	0x200001b8
 80038dc:	0800384d 	.word	0x0800384d

080038e0 <__sfp_lock_acquire>:
 80038e0:	4801      	ldr	r0, [pc, #4]	@ (80038e8 <__sfp_lock_acquire+0x8>)
 80038e2:	f000 b90e 	b.w	8003b02 <__retarget_lock_acquire_recursive>
 80038e6:	bf00      	nop
 80038e8:	200002f9 	.word	0x200002f9

080038ec <__sfp_lock_release>:
 80038ec:	4801      	ldr	r0, [pc, #4]	@ (80038f4 <__sfp_lock_release+0x8>)
 80038ee:	f000 b909 	b.w	8003b04 <__retarget_lock_release_recursive>
 80038f2:	bf00      	nop
 80038f4:	200002f9 	.word	0x200002f9

080038f8 <__sinit>:
 80038f8:	b510      	push	{r4, lr}
 80038fa:	4604      	mov	r4, r0
 80038fc:	f7ff fff0 	bl	80038e0 <__sfp_lock_acquire>
 8003900:	6a23      	ldr	r3, [r4, #32]
 8003902:	b11b      	cbz	r3, 800390c <__sinit+0x14>
 8003904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003908:	f7ff bff0 	b.w	80038ec <__sfp_lock_release>
 800390c:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <__sinit+0x28>)
 800390e:	6223      	str	r3, [r4, #32]
 8003910:	4b04      	ldr	r3, [pc, #16]	@ (8003924 <__sinit+0x2c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f5      	bne.n	8003904 <__sinit+0xc>
 8003918:	f7ff ffc4 	bl	80038a4 <global_stdio_init.part.0>
 800391c:	e7f2      	b.n	8003904 <__sinit+0xc>
 800391e:	bf00      	nop
 8003920:	08003865 	.word	0x08003865
 8003924:	200002f0 	.word	0x200002f0

08003928 <_fwalk_sglue>:
 8003928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800392c:	4607      	mov	r7, r0
 800392e:	4688      	mov	r8, r1
 8003930:	4614      	mov	r4, r2
 8003932:	2600      	movs	r6, #0
 8003934:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003938:	f1b9 0901 	subs.w	r9, r9, #1
 800393c:	d505      	bpl.n	800394a <_fwalk_sglue+0x22>
 800393e:	6824      	ldr	r4, [r4, #0]
 8003940:	2c00      	cmp	r4, #0
 8003942:	d1f7      	bne.n	8003934 <_fwalk_sglue+0xc>
 8003944:	4630      	mov	r0, r6
 8003946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800394a:	89ab      	ldrh	r3, [r5, #12]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d907      	bls.n	8003960 <_fwalk_sglue+0x38>
 8003950:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003954:	3301      	adds	r3, #1
 8003956:	d003      	beq.n	8003960 <_fwalk_sglue+0x38>
 8003958:	4629      	mov	r1, r5
 800395a:	4638      	mov	r0, r7
 800395c:	47c0      	blx	r8
 800395e:	4306      	orrs	r6, r0
 8003960:	3568      	adds	r5, #104	@ 0x68
 8003962:	e7e9      	b.n	8003938 <_fwalk_sglue+0x10>

08003964 <iprintf>:
 8003964:	b40f      	push	{r0, r1, r2, r3}
 8003966:	b507      	push	{r0, r1, r2, lr}
 8003968:	4906      	ldr	r1, [pc, #24]	@ (8003984 <iprintf+0x20>)
 800396a:	ab04      	add	r3, sp, #16
 800396c:	6808      	ldr	r0, [r1, #0]
 800396e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003972:	6881      	ldr	r1, [r0, #8]
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	f000 f9e9 	bl	8003d4c <_vfiprintf_r>
 800397a:	b003      	add	sp, #12
 800397c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003980:	b004      	add	sp, #16
 8003982:	4770      	bx	lr
 8003984:	20000028 	.word	0x20000028

08003988 <__sread>:
 8003988:	b510      	push	{r4, lr}
 800398a:	460c      	mov	r4, r1
 800398c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003990:	f000 f868 	bl	8003a64 <_read_r>
 8003994:	2800      	cmp	r0, #0
 8003996:	bfab      	itete	ge
 8003998:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800399a:	89a3      	ldrhlt	r3, [r4, #12]
 800399c:	181b      	addge	r3, r3, r0
 800399e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80039a2:	bfac      	ite	ge
 80039a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80039a6:	81a3      	strhlt	r3, [r4, #12]
 80039a8:	bd10      	pop	{r4, pc}

080039aa <__swrite>:
 80039aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ae:	461f      	mov	r7, r3
 80039b0:	898b      	ldrh	r3, [r1, #12]
 80039b2:	05db      	lsls	r3, r3, #23
 80039b4:	4605      	mov	r5, r0
 80039b6:	460c      	mov	r4, r1
 80039b8:	4616      	mov	r6, r2
 80039ba:	d505      	bpl.n	80039c8 <__swrite+0x1e>
 80039bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039c0:	2302      	movs	r3, #2
 80039c2:	2200      	movs	r2, #0
 80039c4:	f000 f83c 	bl	8003a40 <_lseek_r>
 80039c8:	89a3      	ldrh	r3, [r4, #12]
 80039ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039d2:	81a3      	strh	r3, [r4, #12]
 80039d4:	4632      	mov	r2, r6
 80039d6:	463b      	mov	r3, r7
 80039d8:	4628      	mov	r0, r5
 80039da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039de:	f000 b853 	b.w	8003a88 <_write_r>

080039e2 <__sseek>:
 80039e2:	b510      	push	{r4, lr}
 80039e4:	460c      	mov	r4, r1
 80039e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ea:	f000 f829 	bl	8003a40 <_lseek_r>
 80039ee:	1c43      	adds	r3, r0, #1
 80039f0:	89a3      	ldrh	r3, [r4, #12]
 80039f2:	bf15      	itete	ne
 80039f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80039f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80039fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80039fe:	81a3      	strheq	r3, [r4, #12]
 8003a00:	bf18      	it	ne
 8003a02:	81a3      	strhne	r3, [r4, #12]
 8003a04:	bd10      	pop	{r4, pc}

08003a06 <__sclose>:
 8003a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a0a:	f000 b809 	b.w	8003a20 <_close_r>

08003a0e <memset>:
 8003a0e:	4402      	add	r2, r0
 8003a10:	4603      	mov	r3, r0
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d100      	bne.n	8003a18 <memset+0xa>
 8003a16:	4770      	bx	lr
 8003a18:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1c:	e7f9      	b.n	8003a12 <memset+0x4>
	...

08003a20 <_close_r>:
 8003a20:	b538      	push	{r3, r4, r5, lr}
 8003a22:	4d06      	ldr	r5, [pc, #24]	@ (8003a3c <_close_r+0x1c>)
 8003a24:	2300      	movs	r3, #0
 8003a26:	4604      	mov	r4, r0
 8003a28:	4608      	mov	r0, r1
 8003a2a:	602b      	str	r3, [r5, #0]
 8003a2c:	f7fd f8b0 	bl	8000b90 <_close>
 8003a30:	1c43      	adds	r3, r0, #1
 8003a32:	d102      	bne.n	8003a3a <_close_r+0x1a>
 8003a34:	682b      	ldr	r3, [r5, #0]
 8003a36:	b103      	cbz	r3, 8003a3a <_close_r+0x1a>
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	bd38      	pop	{r3, r4, r5, pc}
 8003a3c:	200002f4 	.word	0x200002f4

08003a40 <_lseek_r>:
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	4d07      	ldr	r5, [pc, #28]	@ (8003a60 <_lseek_r+0x20>)
 8003a44:	4604      	mov	r4, r0
 8003a46:	4608      	mov	r0, r1
 8003a48:	4611      	mov	r1, r2
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	602a      	str	r2, [r5, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f7fd f8c5 	bl	8000bde <_lseek>
 8003a54:	1c43      	adds	r3, r0, #1
 8003a56:	d102      	bne.n	8003a5e <_lseek_r+0x1e>
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	b103      	cbz	r3, 8003a5e <_lseek_r+0x1e>
 8003a5c:	6023      	str	r3, [r4, #0]
 8003a5e:	bd38      	pop	{r3, r4, r5, pc}
 8003a60:	200002f4 	.word	0x200002f4

08003a64 <_read_r>:
 8003a64:	b538      	push	{r3, r4, r5, lr}
 8003a66:	4d07      	ldr	r5, [pc, #28]	@ (8003a84 <_read_r+0x20>)
 8003a68:	4604      	mov	r4, r0
 8003a6a:	4608      	mov	r0, r1
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	2200      	movs	r2, #0
 8003a70:	602a      	str	r2, [r5, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	f7fd f853 	bl	8000b1e <_read>
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	d102      	bne.n	8003a82 <_read_r+0x1e>
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	b103      	cbz	r3, 8003a82 <_read_r+0x1e>
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	bd38      	pop	{r3, r4, r5, pc}
 8003a84:	200002f4 	.word	0x200002f4

08003a88 <_write_r>:
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	4d07      	ldr	r5, [pc, #28]	@ (8003aa8 <_write_r+0x20>)
 8003a8c:	4604      	mov	r4, r0
 8003a8e:	4608      	mov	r0, r1
 8003a90:	4611      	mov	r1, r2
 8003a92:	2200      	movs	r2, #0
 8003a94:	602a      	str	r2, [r5, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	f7fd f85e 	bl	8000b58 <_write>
 8003a9c:	1c43      	adds	r3, r0, #1
 8003a9e:	d102      	bne.n	8003aa6 <_write_r+0x1e>
 8003aa0:	682b      	ldr	r3, [r5, #0]
 8003aa2:	b103      	cbz	r3, 8003aa6 <_write_r+0x1e>
 8003aa4:	6023      	str	r3, [r4, #0]
 8003aa6:	bd38      	pop	{r3, r4, r5, pc}
 8003aa8:	200002f4 	.word	0x200002f4

08003aac <__errno>:
 8003aac:	4b01      	ldr	r3, [pc, #4]	@ (8003ab4 <__errno+0x8>)
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000028 	.word	0x20000028

08003ab8 <__libc_init_array>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	4d0d      	ldr	r5, [pc, #52]	@ (8003af0 <__libc_init_array+0x38>)
 8003abc:	4c0d      	ldr	r4, [pc, #52]	@ (8003af4 <__libc_init_array+0x3c>)
 8003abe:	1b64      	subs	r4, r4, r5
 8003ac0:	10a4      	asrs	r4, r4, #2
 8003ac2:	2600      	movs	r6, #0
 8003ac4:	42a6      	cmp	r6, r4
 8003ac6:	d109      	bne.n	8003adc <__libc_init_array+0x24>
 8003ac8:	4d0b      	ldr	r5, [pc, #44]	@ (8003af8 <__libc_init_array+0x40>)
 8003aca:	4c0c      	ldr	r4, [pc, #48]	@ (8003afc <__libc_init_array+0x44>)
 8003acc:	f000 fdb8 	bl	8004640 <_init>
 8003ad0:	1b64      	subs	r4, r4, r5
 8003ad2:	10a4      	asrs	r4, r4, #2
 8003ad4:	2600      	movs	r6, #0
 8003ad6:	42a6      	cmp	r6, r4
 8003ad8:	d105      	bne.n	8003ae6 <__libc_init_array+0x2e>
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae0:	4798      	blx	r3
 8003ae2:	3601      	adds	r6, #1
 8003ae4:	e7ee      	b.n	8003ac4 <__libc_init_array+0xc>
 8003ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aea:	4798      	blx	r3
 8003aec:	3601      	adds	r6, #1
 8003aee:	e7f2      	b.n	8003ad6 <__libc_init_array+0x1e>
 8003af0:	0800471c 	.word	0x0800471c
 8003af4:	0800471c 	.word	0x0800471c
 8003af8:	0800471c 	.word	0x0800471c
 8003afc:	08004720 	.word	0x08004720

08003b00 <__retarget_lock_init_recursive>:
 8003b00:	4770      	bx	lr

08003b02 <__retarget_lock_acquire_recursive>:
 8003b02:	4770      	bx	lr

08003b04 <__retarget_lock_release_recursive>:
 8003b04:	4770      	bx	lr
	...

08003b08 <_free_r>:
 8003b08:	b538      	push	{r3, r4, r5, lr}
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	2900      	cmp	r1, #0
 8003b0e:	d041      	beq.n	8003b94 <_free_r+0x8c>
 8003b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b14:	1f0c      	subs	r4, r1, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bfb8      	it	lt
 8003b1a:	18e4      	addlt	r4, r4, r3
 8003b1c:	f000 f8e0 	bl	8003ce0 <__malloc_lock>
 8003b20:	4a1d      	ldr	r2, [pc, #116]	@ (8003b98 <_free_r+0x90>)
 8003b22:	6813      	ldr	r3, [r2, #0]
 8003b24:	b933      	cbnz	r3, 8003b34 <_free_r+0x2c>
 8003b26:	6063      	str	r3, [r4, #4]
 8003b28:	6014      	str	r4, [r2, #0]
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b30:	f000 b8dc 	b.w	8003cec <__malloc_unlock>
 8003b34:	42a3      	cmp	r3, r4
 8003b36:	d908      	bls.n	8003b4a <_free_r+0x42>
 8003b38:	6820      	ldr	r0, [r4, #0]
 8003b3a:	1821      	adds	r1, r4, r0
 8003b3c:	428b      	cmp	r3, r1
 8003b3e:	bf01      	itttt	eq
 8003b40:	6819      	ldreq	r1, [r3, #0]
 8003b42:	685b      	ldreq	r3, [r3, #4]
 8003b44:	1809      	addeq	r1, r1, r0
 8003b46:	6021      	streq	r1, [r4, #0]
 8003b48:	e7ed      	b.n	8003b26 <_free_r+0x1e>
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	b10b      	cbz	r3, 8003b54 <_free_r+0x4c>
 8003b50:	42a3      	cmp	r3, r4
 8003b52:	d9fa      	bls.n	8003b4a <_free_r+0x42>
 8003b54:	6811      	ldr	r1, [r2, #0]
 8003b56:	1850      	adds	r0, r2, r1
 8003b58:	42a0      	cmp	r0, r4
 8003b5a:	d10b      	bne.n	8003b74 <_free_r+0x6c>
 8003b5c:	6820      	ldr	r0, [r4, #0]
 8003b5e:	4401      	add	r1, r0
 8003b60:	1850      	adds	r0, r2, r1
 8003b62:	4283      	cmp	r3, r0
 8003b64:	6011      	str	r1, [r2, #0]
 8003b66:	d1e0      	bne.n	8003b2a <_free_r+0x22>
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	6053      	str	r3, [r2, #4]
 8003b6e:	4408      	add	r0, r1
 8003b70:	6010      	str	r0, [r2, #0]
 8003b72:	e7da      	b.n	8003b2a <_free_r+0x22>
 8003b74:	d902      	bls.n	8003b7c <_free_r+0x74>
 8003b76:	230c      	movs	r3, #12
 8003b78:	602b      	str	r3, [r5, #0]
 8003b7a:	e7d6      	b.n	8003b2a <_free_r+0x22>
 8003b7c:	6820      	ldr	r0, [r4, #0]
 8003b7e:	1821      	adds	r1, r4, r0
 8003b80:	428b      	cmp	r3, r1
 8003b82:	bf04      	itt	eq
 8003b84:	6819      	ldreq	r1, [r3, #0]
 8003b86:	685b      	ldreq	r3, [r3, #4]
 8003b88:	6063      	str	r3, [r4, #4]
 8003b8a:	bf04      	itt	eq
 8003b8c:	1809      	addeq	r1, r1, r0
 8003b8e:	6021      	streq	r1, [r4, #0]
 8003b90:	6054      	str	r4, [r2, #4]
 8003b92:	e7ca      	b.n	8003b2a <_free_r+0x22>
 8003b94:	bd38      	pop	{r3, r4, r5, pc}
 8003b96:	bf00      	nop
 8003b98:	20000300 	.word	0x20000300

08003b9c <sbrk_aligned>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	4e0f      	ldr	r6, [pc, #60]	@ (8003bdc <sbrk_aligned+0x40>)
 8003ba0:	460c      	mov	r4, r1
 8003ba2:	6831      	ldr	r1, [r6, #0]
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	b911      	cbnz	r1, 8003bae <sbrk_aligned+0x12>
 8003ba8:	f000 fcb6 	bl	8004518 <_sbrk_r>
 8003bac:	6030      	str	r0, [r6, #0]
 8003bae:	4621      	mov	r1, r4
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	f000 fcb1 	bl	8004518 <_sbrk_r>
 8003bb6:	1c43      	adds	r3, r0, #1
 8003bb8:	d103      	bne.n	8003bc2 <sbrk_aligned+0x26>
 8003bba:	f04f 34ff 	mov.w	r4, #4294967295
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	bd70      	pop	{r4, r5, r6, pc}
 8003bc2:	1cc4      	adds	r4, r0, #3
 8003bc4:	f024 0403 	bic.w	r4, r4, #3
 8003bc8:	42a0      	cmp	r0, r4
 8003bca:	d0f8      	beq.n	8003bbe <sbrk_aligned+0x22>
 8003bcc:	1a21      	subs	r1, r4, r0
 8003bce:	4628      	mov	r0, r5
 8003bd0:	f000 fca2 	bl	8004518 <_sbrk_r>
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d1f2      	bne.n	8003bbe <sbrk_aligned+0x22>
 8003bd8:	e7ef      	b.n	8003bba <sbrk_aligned+0x1e>
 8003bda:	bf00      	nop
 8003bdc:	200002fc 	.word	0x200002fc

08003be0 <_malloc_r>:
 8003be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003be4:	1ccd      	adds	r5, r1, #3
 8003be6:	f025 0503 	bic.w	r5, r5, #3
 8003bea:	3508      	adds	r5, #8
 8003bec:	2d0c      	cmp	r5, #12
 8003bee:	bf38      	it	cc
 8003bf0:	250c      	movcc	r5, #12
 8003bf2:	2d00      	cmp	r5, #0
 8003bf4:	4606      	mov	r6, r0
 8003bf6:	db01      	blt.n	8003bfc <_malloc_r+0x1c>
 8003bf8:	42a9      	cmp	r1, r5
 8003bfa:	d904      	bls.n	8003c06 <_malloc_r+0x26>
 8003bfc:	230c      	movs	r3, #12
 8003bfe:	6033      	str	r3, [r6, #0]
 8003c00:	2000      	movs	r0, #0
 8003c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003cdc <_malloc_r+0xfc>
 8003c0a:	f000 f869 	bl	8003ce0 <__malloc_lock>
 8003c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8003c12:	461c      	mov	r4, r3
 8003c14:	bb44      	cbnz	r4, 8003c68 <_malloc_r+0x88>
 8003c16:	4629      	mov	r1, r5
 8003c18:	4630      	mov	r0, r6
 8003c1a:	f7ff ffbf 	bl	8003b9c <sbrk_aligned>
 8003c1e:	1c43      	adds	r3, r0, #1
 8003c20:	4604      	mov	r4, r0
 8003c22:	d158      	bne.n	8003cd6 <_malloc_r+0xf6>
 8003c24:	f8d8 4000 	ldr.w	r4, [r8]
 8003c28:	4627      	mov	r7, r4
 8003c2a:	2f00      	cmp	r7, #0
 8003c2c:	d143      	bne.n	8003cb6 <_malloc_r+0xd6>
 8003c2e:	2c00      	cmp	r4, #0
 8003c30:	d04b      	beq.n	8003cca <_malloc_r+0xea>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	4639      	mov	r1, r7
 8003c36:	4630      	mov	r0, r6
 8003c38:	eb04 0903 	add.w	r9, r4, r3
 8003c3c:	f000 fc6c 	bl	8004518 <_sbrk_r>
 8003c40:	4581      	cmp	r9, r0
 8003c42:	d142      	bne.n	8003cca <_malloc_r+0xea>
 8003c44:	6821      	ldr	r1, [r4, #0]
 8003c46:	1a6d      	subs	r5, r5, r1
 8003c48:	4629      	mov	r1, r5
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	f7ff ffa6 	bl	8003b9c <sbrk_aligned>
 8003c50:	3001      	adds	r0, #1
 8003c52:	d03a      	beq.n	8003cca <_malloc_r+0xea>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	442b      	add	r3, r5
 8003c58:	6023      	str	r3, [r4, #0]
 8003c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	bb62      	cbnz	r2, 8003cbc <_malloc_r+0xdc>
 8003c62:	f8c8 7000 	str.w	r7, [r8]
 8003c66:	e00f      	b.n	8003c88 <_malloc_r+0xa8>
 8003c68:	6822      	ldr	r2, [r4, #0]
 8003c6a:	1b52      	subs	r2, r2, r5
 8003c6c:	d420      	bmi.n	8003cb0 <_malloc_r+0xd0>
 8003c6e:	2a0b      	cmp	r2, #11
 8003c70:	d917      	bls.n	8003ca2 <_malloc_r+0xc2>
 8003c72:	1961      	adds	r1, r4, r5
 8003c74:	42a3      	cmp	r3, r4
 8003c76:	6025      	str	r5, [r4, #0]
 8003c78:	bf18      	it	ne
 8003c7a:	6059      	strne	r1, [r3, #4]
 8003c7c:	6863      	ldr	r3, [r4, #4]
 8003c7e:	bf08      	it	eq
 8003c80:	f8c8 1000 	streq.w	r1, [r8]
 8003c84:	5162      	str	r2, [r4, r5]
 8003c86:	604b      	str	r3, [r1, #4]
 8003c88:	4630      	mov	r0, r6
 8003c8a:	f000 f82f 	bl	8003cec <__malloc_unlock>
 8003c8e:	f104 000b 	add.w	r0, r4, #11
 8003c92:	1d23      	adds	r3, r4, #4
 8003c94:	f020 0007 	bic.w	r0, r0, #7
 8003c98:	1ac2      	subs	r2, r0, r3
 8003c9a:	bf1c      	itt	ne
 8003c9c:	1a1b      	subne	r3, r3, r0
 8003c9e:	50a3      	strne	r3, [r4, r2]
 8003ca0:	e7af      	b.n	8003c02 <_malloc_r+0x22>
 8003ca2:	6862      	ldr	r2, [r4, #4]
 8003ca4:	42a3      	cmp	r3, r4
 8003ca6:	bf0c      	ite	eq
 8003ca8:	f8c8 2000 	streq.w	r2, [r8]
 8003cac:	605a      	strne	r2, [r3, #4]
 8003cae:	e7eb      	b.n	8003c88 <_malloc_r+0xa8>
 8003cb0:	4623      	mov	r3, r4
 8003cb2:	6864      	ldr	r4, [r4, #4]
 8003cb4:	e7ae      	b.n	8003c14 <_malloc_r+0x34>
 8003cb6:	463c      	mov	r4, r7
 8003cb8:	687f      	ldr	r7, [r7, #4]
 8003cba:	e7b6      	b.n	8003c2a <_malloc_r+0x4a>
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	42a3      	cmp	r3, r4
 8003cc2:	d1fb      	bne.n	8003cbc <_malloc_r+0xdc>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	6053      	str	r3, [r2, #4]
 8003cc8:	e7de      	b.n	8003c88 <_malloc_r+0xa8>
 8003cca:	230c      	movs	r3, #12
 8003ccc:	6033      	str	r3, [r6, #0]
 8003cce:	4630      	mov	r0, r6
 8003cd0:	f000 f80c 	bl	8003cec <__malloc_unlock>
 8003cd4:	e794      	b.n	8003c00 <_malloc_r+0x20>
 8003cd6:	6005      	str	r5, [r0, #0]
 8003cd8:	e7d6      	b.n	8003c88 <_malloc_r+0xa8>
 8003cda:	bf00      	nop
 8003cdc:	20000300 	.word	0x20000300

08003ce0 <__malloc_lock>:
 8003ce0:	4801      	ldr	r0, [pc, #4]	@ (8003ce8 <__malloc_lock+0x8>)
 8003ce2:	f7ff bf0e 	b.w	8003b02 <__retarget_lock_acquire_recursive>
 8003ce6:	bf00      	nop
 8003ce8:	200002f8 	.word	0x200002f8

08003cec <__malloc_unlock>:
 8003cec:	4801      	ldr	r0, [pc, #4]	@ (8003cf4 <__malloc_unlock+0x8>)
 8003cee:	f7ff bf09 	b.w	8003b04 <__retarget_lock_release_recursive>
 8003cf2:	bf00      	nop
 8003cf4:	200002f8 	.word	0x200002f8

08003cf8 <__sfputc_r>:
 8003cf8:	6893      	ldr	r3, [r2, #8]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	b410      	push	{r4}
 8003d00:	6093      	str	r3, [r2, #8]
 8003d02:	da08      	bge.n	8003d16 <__sfputc_r+0x1e>
 8003d04:	6994      	ldr	r4, [r2, #24]
 8003d06:	42a3      	cmp	r3, r4
 8003d08:	db01      	blt.n	8003d0e <__sfputc_r+0x16>
 8003d0a:	290a      	cmp	r1, #10
 8003d0c:	d103      	bne.n	8003d16 <__sfputc_r+0x1e>
 8003d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d12:	f000 bb6d 	b.w	80043f0 <__swbuf_r>
 8003d16:	6813      	ldr	r3, [r2, #0]
 8003d18:	1c58      	adds	r0, r3, #1
 8003d1a:	6010      	str	r0, [r2, #0]
 8003d1c:	7019      	strb	r1, [r3, #0]
 8003d1e:	4608      	mov	r0, r1
 8003d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <__sfputs_r>:
 8003d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d28:	4606      	mov	r6, r0
 8003d2a:	460f      	mov	r7, r1
 8003d2c:	4614      	mov	r4, r2
 8003d2e:	18d5      	adds	r5, r2, r3
 8003d30:	42ac      	cmp	r4, r5
 8003d32:	d101      	bne.n	8003d38 <__sfputs_r+0x12>
 8003d34:	2000      	movs	r0, #0
 8003d36:	e007      	b.n	8003d48 <__sfputs_r+0x22>
 8003d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d3c:	463a      	mov	r2, r7
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f7ff ffda 	bl	8003cf8 <__sfputc_r>
 8003d44:	1c43      	adds	r3, r0, #1
 8003d46:	d1f3      	bne.n	8003d30 <__sfputs_r+0xa>
 8003d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d4c <_vfiprintf_r>:
 8003d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d50:	460d      	mov	r5, r1
 8003d52:	b09d      	sub	sp, #116	@ 0x74
 8003d54:	4614      	mov	r4, r2
 8003d56:	4698      	mov	r8, r3
 8003d58:	4606      	mov	r6, r0
 8003d5a:	b118      	cbz	r0, 8003d64 <_vfiprintf_r+0x18>
 8003d5c:	6a03      	ldr	r3, [r0, #32]
 8003d5e:	b90b      	cbnz	r3, 8003d64 <_vfiprintf_r+0x18>
 8003d60:	f7ff fdca 	bl	80038f8 <__sinit>
 8003d64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d66:	07d9      	lsls	r1, r3, #31
 8003d68:	d405      	bmi.n	8003d76 <_vfiprintf_r+0x2a>
 8003d6a:	89ab      	ldrh	r3, [r5, #12]
 8003d6c:	059a      	lsls	r2, r3, #22
 8003d6e:	d402      	bmi.n	8003d76 <_vfiprintf_r+0x2a>
 8003d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d72:	f7ff fec6 	bl	8003b02 <__retarget_lock_acquire_recursive>
 8003d76:	89ab      	ldrh	r3, [r5, #12]
 8003d78:	071b      	lsls	r3, r3, #28
 8003d7a:	d501      	bpl.n	8003d80 <_vfiprintf_r+0x34>
 8003d7c:	692b      	ldr	r3, [r5, #16]
 8003d7e:	b99b      	cbnz	r3, 8003da8 <_vfiprintf_r+0x5c>
 8003d80:	4629      	mov	r1, r5
 8003d82:	4630      	mov	r0, r6
 8003d84:	f000 fb72 	bl	800446c <__swsetup_r>
 8003d88:	b170      	cbz	r0, 8003da8 <_vfiprintf_r+0x5c>
 8003d8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d8c:	07dc      	lsls	r4, r3, #31
 8003d8e:	d504      	bpl.n	8003d9a <_vfiprintf_r+0x4e>
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	b01d      	add	sp, #116	@ 0x74
 8003d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d9a:	89ab      	ldrh	r3, [r5, #12]
 8003d9c:	0598      	lsls	r0, r3, #22
 8003d9e:	d4f7      	bmi.n	8003d90 <_vfiprintf_r+0x44>
 8003da0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003da2:	f7ff feaf 	bl	8003b04 <__retarget_lock_release_recursive>
 8003da6:	e7f3      	b.n	8003d90 <_vfiprintf_r+0x44>
 8003da8:	2300      	movs	r3, #0
 8003daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dac:	2320      	movs	r3, #32
 8003dae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003db6:	2330      	movs	r3, #48	@ 0x30
 8003db8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003f68 <_vfiprintf_r+0x21c>
 8003dbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003dc0:	f04f 0901 	mov.w	r9, #1
 8003dc4:	4623      	mov	r3, r4
 8003dc6:	469a      	mov	sl, r3
 8003dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dcc:	b10a      	cbz	r2, 8003dd2 <_vfiprintf_r+0x86>
 8003dce:	2a25      	cmp	r2, #37	@ 0x25
 8003dd0:	d1f9      	bne.n	8003dc6 <_vfiprintf_r+0x7a>
 8003dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8003dd6:	d00b      	beq.n	8003df0 <_vfiprintf_r+0xa4>
 8003dd8:	465b      	mov	r3, fp
 8003dda:	4622      	mov	r2, r4
 8003ddc:	4629      	mov	r1, r5
 8003dde:	4630      	mov	r0, r6
 8003de0:	f7ff ffa1 	bl	8003d26 <__sfputs_r>
 8003de4:	3001      	adds	r0, #1
 8003de6:	f000 80a7 	beq.w	8003f38 <_vfiprintf_r+0x1ec>
 8003dea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003dec:	445a      	add	r2, fp
 8003dee:	9209      	str	r2, [sp, #36]	@ 0x24
 8003df0:	f89a 3000 	ldrb.w	r3, [sl]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 809f 	beq.w	8003f38 <_vfiprintf_r+0x1ec>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e04:	f10a 0a01 	add.w	sl, sl, #1
 8003e08:	9304      	str	r3, [sp, #16]
 8003e0a:	9307      	str	r3, [sp, #28]
 8003e0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e10:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e12:	4654      	mov	r4, sl
 8003e14:	2205      	movs	r2, #5
 8003e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e1a:	4853      	ldr	r0, [pc, #332]	@ (8003f68 <_vfiprintf_r+0x21c>)
 8003e1c:	f7fc fa08 	bl	8000230 <memchr>
 8003e20:	9a04      	ldr	r2, [sp, #16]
 8003e22:	b9d8      	cbnz	r0, 8003e5c <_vfiprintf_r+0x110>
 8003e24:	06d1      	lsls	r1, r2, #27
 8003e26:	bf44      	itt	mi
 8003e28:	2320      	movmi	r3, #32
 8003e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e2e:	0713      	lsls	r3, r2, #28
 8003e30:	bf44      	itt	mi
 8003e32:	232b      	movmi	r3, #43	@ 0x2b
 8003e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e38:	f89a 3000 	ldrb.w	r3, [sl]
 8003e3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e3e:	d015      	beq.n	8003e6c <_vfiprintf_r+0x120>
 8003e40:	9a07      	ldr	r2, [sp, #28]
 8003e42:	4654      	mov	r4, sl
 8003e44:	2000      	movs	r0, #0
 8003e46:	f04f 0c0a 	mov.w	ip, #10
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e50:	3b30      	subs	r3, #48	@ 0x30
 8003e52:	2b09      	cmp	r3, #9
 8003e54:	d94b      	bls.n	8003eee <_vfiprintf_r+0x1a2>
 8003e56:	b1b0      	cbz	r0, 8003e86 <_vfiprintf_r+0x13a>
 8003e58:	9207      	str	r2, [sp, #28]
 8003e5a:	e014      	b.n	8003e86 <_vfiprintf_r+0x13a>
 8003e5c:	eba0 0308 	sub.w	r3, r0, r8
 8003e60:	fa09 f303 	lsl.w	r3, r9, r3
 8003e64:	4313      	orrs	r3, r2
 8003e66:	9304      	str	r3, [sp, #16]
 8003e68:	46a2      	mov	sl, r4
 8003e6a:	e7d2      	b.n	8003e12 <_vfiprintf_r+0xc6>
 8003e6c:	9b03      	ldr	r3, [sp, #12]
 8003e6e:	1d19      	adds	r1, r3, #4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	9103      	str	r1, [sp, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bfbb      	ittet	lt
 8003e78:	425b      	neglt	r3, r3
 8003e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8003e7e:	9307      	strge	r3, [sp, #28]
 8003e80:	9307      	strlt	r3, [sp, #28]
 8003e82:	bfb8      	it	lt
 8003e84:	9204      	strlt	r2, [sp, #16]
 8003e86:	7823      	ldrb	r3, [r4, #0]
 8003e88:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e8a:	d10a      	bne.n	8003ea2 <_vfiprintf_r+0x156>
 8003e8c:	7863      	ldrb	r3, [r4, #1]
 8003e8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e90:	d132      	bne.n	8003ef8 <_vfiprintf_r+0x1ac>
 8003e92:	9b03      	ldr	r3, [sp, #12]
 8003e94:	1d1a      	adds	r2, r3, #4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	9203      	str	r2, [sp, #12]
 8003e9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e9e:	3402      	adds	r4, #2
 8003ea0:	9305      	str	r3, [sp, #20]
 8003ea2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003f78 <_vfiprintf_r+0x22c>
 8003ea6:	7821      	ldrb	r1, [r4, #0]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	4650      	mov	r0, sl
 8003eac:	f7fc f9c0 	bl	8000230 <memchr>
 8003eb0:	b138      	cbz	r0, 8003ec2 <_vfiprintf_r+0x176>
 8003eb2:	9b04      	ldr	r3, [sp, #16]
 8003eb4:	eba0 000a 	sub.w	r0, r0, sl
 8003eb8:	2240      	movs	r2, #64	@ 0x40
 8003eba:	4082      	lsls	r2, r0
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	3401      	adds	r4, #1
 8003ec0:	9304      	str	r3, [sp, #16]
 8003ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec6:	4829      	ldr	r0, [pc, #164]	@ (8003f6c <_vfiprintf_r+0x220>)
 8003ec8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ecc:	2206      	movs	r2, #6
 8003ece:	f7fc f9af 	bl	8000230 <memchr>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d03f      	beq.n	8003f56 <_vfiprintf_r+0x20a>
 8003ed6:	4b26      	ldr	r3, [pc, #152]	@ (8003f70 <_vfiprintf_r+0x224>)
 8003ed8:	bb1b      	cbnz	r3, 8003f22 <_vfiprintf_r+0x1d6>
 8003eda:	9b03      	ldr	r3, [sp, #12]
 8003edc:	3307      	adds	r3, #7
 8003ede:	f023 0307 	bic.w	r3, r3, #7
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	9303      	str	r3, [sp, #12]
 8003ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ee8:	443b      	add	r3, r7
 8003eea:	9309      	str	r3, [sp, #36]	@ 0x24
 8003eec:	e76a      	b.n	8003dc4 <_vfiprintf_r+0x78>
 8003eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	2001      	movs	r0, #1
 8003ef6:	e7a8      	b.n	8003e4a <_vfiprintf_r+0xfe>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	3401      	adds	r4, #1
 8003efc:	9305      	str	r3, [sp, #20]
 8003efe:	4619      	mov	r1, r3
 8003f00:	f04f 0c0a 	mov.w	ip, #10
 8003f04:	4620      	mov	r0, r4
 8003f06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f0a:	3a30      	subs	r2, #48	@ 0x30
 8003f0c:	2a09      	cmp	r2, #9
 8003f0e:	d903      	bls.n	8003f18 <_vfiprintf_r+0x1cc>
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0c6      	beq.n	8003ea2 <_vfiprintf_r+0x156>
 8003f14:	9105      	str	r1, [sp, #20]
 8003f16:	e7c4      	b.n	8003ea2 <_vfiprintf_r+0x156>
 8003f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e7f0      	b.n	8003f04 <_vfiprintf_r+0x1b8>
 8003f22:	ab03      	add	r3, sp, #12
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	462a      	mov	r2, r5
 8003f28:	4b12      	ldr	r3, [pc, #72]	@ (8003f74 <_vfiprintf_r+0x228>)
 8003f2a:	a904      	add	r1, sp, #16
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	f3af 8000 	nop.w
 8003f32:	4607      	mov	r7, r0
 8003f34:	1c78      	adds	r0, r7, #1
 8003f36:	d1d6      	bne.n	8003ee6 <_vfiprintf_r+0x19a>
 8003f38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f3a:	07d9      	lsls	r1, r3, #31
 8003f3c:	d405      	bmi.n	8003f4a <_vfiprintf_r+0x1fe>
 8003f3e:	89ab      	ldrh	r3, [r5, #12]
 8003f40:	059a      	lsls	r2, r3, #22
 8003f42:	d402      	bmi.n	8003f4a <_vfiprintf_r+0x1fe>
 8003f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f46:	f7ff fddd 	bl	8003b04 <__retarget_lock_release_recursive>
 8003f4a:	89ab      	ldrh	r3, [r5, #12]
 8003f4c:	065b      	lsls	r3, r3, #25
 8003f4e:	f53f af1f 	bmi.w	8003d90 <_vfiprintf_r+0x44>
 8003f52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f54:	e71e      	b.n	8003d94 <_vfiprintf_r+0x48>
 8003f56:	ab03      	add	r3, sp, #12
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	462a      	mov	r2, r5
 8003f5c:	4b05      	ldr	r3, [pc, #20]	@ (8003f74 <_vfiprintf_r+0x228>)
 8003f5e:	a904      	add	r1, sp, #16
 8003f60:	4630      	mov	r0, r6
 8003f62:	f000 f879 	bl	8004058 <_printf_i>
 8003f66:	e7e4      	b.n	8003f32 <_vfiprintf_r+0x1e6>
 8003f68:	080046e0 	.word	0x080046e0
 8003f6c:	080046ea 	.word	0x080046ea
 8003f70:	00000000 	.word	0x00000000
 8003f74:	08003d27 	.word	0x08003d27
 8003f78:	080046e6 	.word	0x080046e6

08003f7c <_printf_common>:
 8003f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f80:	4616      	mov	r6, r2
 8003f82:	4698      	mov	r8, r3
 8003f84:	688a      	ldr	r2, [r1, #8]
 8003f86:	690b      	ldr	r3, [r1, #16]
 8003f88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	bfb8      	it	lt
 8003f90:	4613      	movlt	r3, r2
 8003f92:	6033      	str	r3, [r6, #0]
 8003f94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f98:	4607      	mov	r7, r0
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	b10a      	cbz	r2, 8003fa2 <_printf_common+0x26>
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	6033      	str	r3, [r6, #0]
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	0699      	lsls	r1, r3, #26
 8003fa6:	bf42      	ittt	mi
 8003fa8:	6833      	ldrmi	r3, [r6, #0]
 8003faa:	3302      	addmi	r3, #2
 8003fac:	6033      	strmi	r3, [r6, #0]
 8003fae:	6825      	ldr	r5, [r4, #0]
 8003fb0:	f015 0506 	ands.w	r5, r5, #6
 8003fb4:	d106      	bne.n	8003fc4 <_printf_common+0x48>
 8003fb6:	f104 0a19 	add.w	sl, r4, #25
 8003fba:	68e3      	ldr	r3, [r4, #12]
 8003fbc:	6832      	ldr	r2, [r6, #0]
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	42ab      	cmp	r3, r5
 8003fc2:	dc26      	bgt.n	8004012 <_printf_common+0x96>
 8003fc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fc8:	6822      	ldr	r2, [r4, #0]
 8003fca:	3b00      	subs	r3, #0
 8003fcc:	bf18      	it	ne
 8003fce:	2301      	movne	r3, #1
 8003fd0:	0692      	lsls	r2, r2, #26
 8003fd2:	d42b      	bmi.n	800402c <_printf_common+0xb0>
 8003fd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fd8:	4641      	mov	r1, r8
 8003fda:	4638      	mov	r0, r7
 8003fdc:	47c8      	blx	r9
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d01e      	beq.n	8004020 <_printf_common+0xa4>
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	6922      	ldr	r2, [r4, #16]
 8003fe6:	f003 0306 	and.w	r3, r3, #6
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	bf02      	ittt	eq
 8003fee:	68e5      	ldreq	r5, [r4, #12]
 8003ff0:	6833      	ldreq	r3, [r6, #0]
 8003ff2:	1aed      	subeq	r5, r5, r3
 8003ff4:	68a3      	ldr	r3, [r4, #8]
 8003ff6:	bf0c      	ite	eq
 8003ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ffc:	2500      	movne	r5, #0
 8003ffe:	4293      	cmp	r3, r2
 8004000:	bfc4      	itt	gt
 8004002:	1a9b      	subgt	r3, r3, r2
 8004004:	18ed      	addgt	r5, r5, r3
 8004006:	2600      	movs	r6, #0
 8004008:	341a      	adds	r4, #26
 800400a:	42b5      	cmp	r5, r6
 800400c:	d11a      	bne.n	8004044 <_printf_common+0xc8>
 800400e:	2000      	movs	r0, #0
 8004010:	e008      	b.n	8004024 <_printf_common+0xa8>
 8004012:	2301      	movs	r3, #1
 8004014:	4652      	mov	r2, sl
 8004016:	4641      	mov	r1, r8
 8004018:	4638      	mov	r0, r7
 800401a:	47c8      	blx	r9
 800401c:	3001      	adds	r0, #1
 800401e:	d103      	bne.n	8004028 <_printf_common+0xac>
 8004020:	f04f 30ff 	mov.w	r0, #4294967295
 8004024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004028:	3501      	adds	r5, #1
 800402a:	e7c6      	b.n	8003fba <_printf_common+0x3e>
 800402c:	18e1      	adds	r1, r4, r3
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	2030      	movs	r0, #48	@ 0x30
 8004032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004036:	4422      	add	r2, r4
 8004038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800403c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004040:	3302      	adds	r3, #2
 8004042:	e7c7      	b.n	8003fd4 <_printf_common+0x58>
 8004044:	2301      	movs	r3, #1
 8004046:	4622      	mov	r2, r4
 8004048:	4641      	mov	r1, r8
 800404a:	4638      	mov	r0, r7
 800404c:	47c8      	blx	r9
 800404e:	3001      	adds	r0, #1
 8004050:	d0e6      	beq.n	8004020 <_printf_common+0xa4>
 8004052:	3601      	adds	r6, #1
 8004054:	e7d9      	b.n	800400a <_printf_common+0x8e>
	...

08004058 <_printf_i>:
 8004058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800405c:	7e0f      	ldrb	r7, [r1, #24]
 800405e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004060:	2f78      	cmp	r7, #120	@ 0x78
 8004062:	4691      	mov	r9, r2
 8004064:	4680      	mov	r8, r0
 8004066:	460c      	mov	r4, r1
 8004068:	469a      	mov	sl, r3
 800406a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800406e:	d807      	bhi.n	8004080 <_printf_i+0x28>
 8004070:	2f62      	cmp	r7, #98	@ 0x62
 8004072:	d80a      	bhi.n	800408a <_printf_i+0x32>
 8004074:	2f00      	cmp	r7, #0
 8004076:	f000 80d2 	beq.w	800421e <_printf_i+0x1c6>
 800407a:	2f58      	cmp	r7, #88	@ 0x58
 800407c:	f000 80b9 	beq.w	80041f2 <_printf_i+0x19a>
 8004080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004088:	e03a      	b.n	8004100 <_printf_i+0xa8>
 800408a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800408e:	2b15      	cmp	r3, #21
 8004090:	d8f6      	bhi.n	8004080 <_printf_i+0x28>
 8004092:	a101      	add	r1, pc, #4	@ (adr r1, 8004098 <_printf_i+0x40>)
 8004094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004098:	080040f1 	.word	0x080040f1
 800409c:	08004105 	.word	0x08004105
 80040a0:	08004081 	.word	0x08004081
 80040a4:	08004081 	.word	0x08004081
 80040a8:	08004081 	.word	0x08004081
 80040ac:	08004081 	.word	0x08004081
 80040b0:	08004105 	.word	0x08004105
 80040b4:	08004081 	.word	0x08004081
 80040b8:	08004081 	.word	0x08004081
 80040bc:	08004081 	.word	0x08004081
 80040c0:	08004081 	.word	0x08004081
 80040c4:	08004205 	.word	0x08004205
 80040c8:	0800412f 	.word	0x0800412f
 80040cc:	080041bf 	.word	0x080041bf
 80040d0:	08004081 	.word	0x08004081
 80040d4:	08004081 	.word	0x08004081
 80040d8:	08004227 	.word	0x08004227
 80040dc:	08004081 	.word	0x08004081
 80040e0:	0800412f 	.word	0x0800412f
 80040e4:	08004081 	.word	0x08004081
 80040e8:	08004081 	.word	0x08004081
 80040ec:	080041c7 	.word	0x080041c7
 80040f0:	6833      	ldr	r3, [r6, #0]
 80040f2:	1d1a      	adds	r2, r3, #4
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6032      	str	r2, [r6, #0]
 80040f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004100:	2301      	movs	r3, #1
 8004102:	e09d      	b.n	8004240 <_printf_i+0x1e8>
 8004104:	6833      	ldr	r3, [r6, #0]
 8004106:	6820      	ldr	r0, [r4, #0]
 8004108:	1d19      	adds	r1, r3, #4
 800410a:	6031      	str	r1, [r6, #0]
 800410c:	0606      	lsls	r6, r0, #24
 800410e:	d501      	bpl.n	8004114 <_printf_i+0xbc>
 8004110:	681d      	ldr	r5, [r3, #0]
 8004112:	e003      	b.n	800411c <_printf_i+0xc4>
 8004114:	0645      	lsls	r5, r0, #25
 8004116:	d5fb      	bpl.n	8004110 <_printf_i+0xb8>
 8004118:	f9b3 5000 	ldrsh.w	r5, [r3]
 800411c:	2d00      	cmp	r5, #0
 800411e:	da03      	bge.n	8004128 <_printf_i+0xd0>
 8004120:	232d      	movs	r3, #45	@ 0x2d
 8004122:	426d      	negs	r5, r5
 8004124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004128:	4859      	ldr	r0, [pc, #356]	@ (8004290 <_printf_i+0x238>)
 800412a:	230a      	movs	r3, #10
 800412c:	e011      	b.n	8004152 <_printf_i+0xfa>
 800412e:	6821      	ldr	r1, [r4, #0]
 8004130:	6833      	ldr	r3, [r6, #0]
 8004132:	0608      	lsls	r0, r1, #24
 8004134:	f853 5b04 	ldr.w	r5, [r3], #4
 8004138:	d402      	bmi.n	8004140 <_printf_i+0xe8>
 800413a:	0649      	lsls	r1, r1, #25
 800413c:	bf48      	it	mi
 800413e:	b2ad      	uxthmi	r5, r5
 8004140:	2f6f      	cmp	r7, #111	@ 0x6f
 8004142:	4853      	ldr	r0, [pc, #332]	@ (8004290 <_printf_i+0x238>)
 8004144:	6033      	str	r3, [r6, #0]
 8004146:	bf14      	ite	ne
 8004148:	230a      	movne	r3, #10
 800414a:	2308      	moveq	r3, #8
 800414c:	2100      	movs	r1, #0
 800414e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004152:	6866      	ldr	r6, [r4, #4]
 8004154:	60a6      	str	r6, [r4, #8]
 8004156:	2e00      	cmp	r6, #0
 8004158:	bfa2      	ittt	ge
 800415a:	6821      	ldrge	r1, [r4, #0]
 800415c:	f021 0104 	bicge.w	r1, r1, #4
 8004160:	6021      	strge	r1, [r4, #0]
 8004162:	b90d      	cbnz	r5, 8004168 <_printf_i+0x110>
 8004164:	2e00      	cmp	r6, #0
 8004166:	d04b      	beq.n	8004200 <_printf_i+0x1a8>
 8004168:	4616      	mov	r6, r2
 800416a:	fbb5 f1f3 	udiv	r1, r5, r3
 800416e:	fb03 5711 	mls	r7, r3, r1, r5
 8004172:	5dc7      	ldrb	r7, [r0, r7]
 8004174:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004178:	462f      	mov	r7, r5
 800417a:	42bb      	cmp	r3, r7
 800417c:	460d      	mov	r5, r1
 800417e:	d9f4      	bls.n	800416a <_printf_i+0x112>
 8004180:	2b08      	cmp	r3, #8
 8004182:	d10b      	bne.n	800419c <_printf_i+0x144>
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	07df      	lsls	r7, r3, #31
 8004188:	d508      	bpl.n	800419c <_printf_i+0x144>
 800418a:	6923      	ldr	r3, [r4, #16]
 800418c:	6861      	ldr	r1, [r4, #4]
 800418e:	4299      	cmp	r1, r3
 8004190:	bfde      	ittt	le
 8004192:	2330      	movle	r3, #48	@ 0x30
 8004194:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004198:	f106 36ff 	addle.w	r6, r6, #4294967295
 800419c:	1b92      	subs	r2, r2, r6
 800419e:	6122      	str	r2, [r4, #16]
 80041a0:	f8cd a000 	str.w	sl, [sp]
 80041a4:	464b      	mov	r3, r9
 80041a6:	aa03      	add	r2, sp, #12
 80041a8:	4621      	mov	r1, r4
 80041aa:	4640      	mov	r0, r8
 80041ac:	f7ff fee6 	bl	8003f7c <_printf_common>
 80041b0:	3001      	adds	r0, #1
 80041b2:	d14a      	bne.n	800424a <_printf_i+0x1f2>
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295
 80041b8:	b004      	add	sp, #16
 80041ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	f043 0320 	orr.w	r3, r3, #32
 80041c4:	6023      	str	r3, [r4, #0]
 80041c6:	4833      	ldr	r0, [pc, #204]	@ (8004294 <_printf_i+0x23c>)
 80041c8:	2778      	movs	r7, #120	@ 0x78
 80041ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	6831      	ldr	r1, [r6, #0]
 80041d2:	061f      	lsls	r7, r3, #24
 80041d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80041d8:	d402      	bmi.n	80041e0 <_printf_i+0x188>
 80041da:	065f      	lsls	r7, r3, #25
 80041dc:	bf48      	it	mi
 80041de:	b2ad      	uxthmi	r5, r5
 80041e0:	6031      	str	r1, [r6, #0]
 80041e2:	07d9      	lsls	r1, r3, #31
 80041e4:	bf44      	itt	mi
 80041e6:	f043 0320 	orrmi.w	r3, r3, #32
 80041ea:	6023      	strmi	r3, [r4, #0]
 80041ec:	b11d      	cbz	r5, 80041f6 <_printf_i+0x19e>
 80041ee:	2310      	movs	r3, #16
 80041f0:	e7ac      	b.n	800414c <_printf_i+0xf4>
 80041f2:	4827      	ldr	r0, [pc, #156]	@ (8004290 <_printf_i+0x238>)
 80041f4:	e7e9      	b.n	80041ca <_printf_i+0x172>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	f023 0320 	bic.w	r3, r3, #32
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	e7f6      	b.n	80041ee <_printf_i+0x196>
 8004200:	4616      	mov	r6, r2
 8004202:	e7bd      	b.n	8004180 <_printf_i+0x128>
 8004204:	6833      	ldr	r3, [r6, #0]
 8004206:	6825      	ldr	r5, [r4, #0]
 8004208:	6961      	ldr	r1, [r4, #20]
 800420a:	1d18      	adds	r0, r3, #4
 800420c:	6030      	str	r0, [r6, #0]
 800420e:	062e      	lsls	r6, r5, #24
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	d501      	bpl.n	8004218 <_printf_i+0x1c0>
 8004214:	6019      	str	r1, [r3, #0]
 8004216:	e002      	b.n	800421e <_printf_i+0x1c6>
 8004218:	0668      	lsls	r0, r5, #25
 800421a:	d5fb      	bpl.n	8004214 <_printf_i+0x1bc>
 800421c:	8019      	strh	r1, [r3, #0]
 800421e:	2300      	movs	r3, #0
 8004220:	6123      	str	r3, [r4, #16]
 8004222:	4616      	mov	r6, r2
 8004224:	e7bc      	b.n	80041a0 <_printf_i+0x148>
 8004226:	6833      	ldr	r3, [r6, #0]
 8004228:	1d1a      	adds	r2, r3, #4
 800422a:	6032      	str	r2, [r6, #0]
 800422c:	681e      	ldr	r6, [r3, #0]
 800422e:	6862      	ldr	r2, [r4, #4]
 8004230:	2100      	movs	r1, #0
 8004232:	4630      	mov	r0, r6
 8004234:	f7fb fffc 	bl	8000230 <memchr>
 8004238:	b108      	cbz	r0, 800423e <_printf_i+0x1e6>
 800423a:	1b80      	subs	r0, r0, r6
 800423c:	6060      	str	r0, [r4, #4]
 800423e:	6863      	ldr	r3, [r4, #4]
 8004240:	6123      	str	r3, [r4, #16]
 8004242:	2300      	movs	r3, #0
 8004244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004248:	e7aa      	b.n	80041a0 <_printf_i+0x148>
 800424a:	6923      	ldr	r3, [r4, #16]
 800424c:	4632      	mov	r2, r6
 800424e:	4649      	mov	r1, r9
 8004250:	4640      	mov	r0, r8
 8004252:	47d0      	blx	sl
 8004254:	3001      	adds	r0, #1
 8004256:	d0ad      	beq.n	80041b4 <_printf_i+0x15c>
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	079b      	lsls	r3, r3, #30
 800425c:	d413      	bmi.n	8004286 <_printf_i+0x22e>
 800425e:	68e0      	ldr	r0, [r4, #12]
 8004260:	9b03      	ldr	r3, [sp, #12]
 8004262:	4298      	cmp	r0, r3
 8004264:	bfb8      	it	lt
 8004266:	4618      	movlt	r0, r3
 8004268:	e7a6      	b.n	80041b8 <_printf_i+0x160>
 800426a:	2301      	movs	r3, #1
 800426c:	4632      	mov	r2, r6
 800426e:	4649      	mov	r1, r9
 8004270:	4640      	mov	r0, r8
 8004272:	47d0      	blx	sl
 8004274:	3001      	adds	r0, #1
 8004276:	d09d      	beq.n	80041b4 <_printf_i+0x15c>
 8004278:	3501      	adds	r5, #1
 800427a:	68e3      	ldr	r3, [r4, #12]
 800427c:	9903      	ldr	r1, [sp, #12]
 800427e:	1a5b      	subs	r3, r3, r1
 8004280:	42ab      	cmp	r3, r5
 8004282:	dcf2      	bgt.n	800426a <_printf_i+0x212>
 8004284:	e7eb      	b.n	800425e <_printf_i+0x206>
 8004286:	2500      	movs	r5, #0
 8004288:	f104 0619 	add.w	r6, r4, #25
 800428c:	e7f5      	b.n	800427a <_printf_i+0x222>
 800428e:	bf00      	nop
 8004290:	080046f1 	.word	0x080046f1
 8004294:	08004702 	.word	0x08004702

08004298 <__sflush_r>:
 8004298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800429c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a0:	0716      	lsls	r6, r2, #28
 80042a2:	4605      	mov	r5, r0
 80042a4:	460c      	mov	r4, r1
 80042a6:	d454      	bmi.n	8004352 <__sflush_r+0xba>
 80042a8:	684b      	ldr	r3, [r1, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	dc02      	bgt.n	80042b4 <__sflush_r+0x1c>
 80042ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	dd48      	ble.n	8004346 <__sflush_r+0xae>
 80042b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042b6:	2e00      	cmp	r6, #0
 80042b8:	d045      	beq.n	8004346 <__sflush_r+0xae>
 80042ba:	2300      	movs	r3, #0
 80042bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80042c0:	682f      	ldr	r7, [r5, #0]
 80042c2:	6a21      	ldr	r1, [r4, #32]
 80042c4:	602b      	str	r3, [r5, #0]
 80042c6:	d030      	beq.n	800432a <__sflush_r+0x92>
 80042c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	0759      	lsls	r1, r3, #29
 80042ce:	d505      	bpl.n	80042dc <__sflush_r+0x44>
 80042d0:	6863      	ldr	r3, [r4, #4]
 80042d2:	1ad2      	subs	r2, r2, r3
 80042d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80042d6:	b10b      	cbz	r3, 80042dc <__sflush_r+0x44>
 80042d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80042da:	1ad2      	subs	r2, r2, r3
 80042dc:	2300      	movs	r3, #0
 80042de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042e0:	6a21      	ldr	r1, [r4, #32]
 80042e2:	4628      	mov	r0, r5
 80042e4:	47b0      	blx	r6
 80042e6:	1c43      	adds	r3, r0, #1
 80042e8:	89a3      	ldrh	r3, [r4, #12]
 80042ea:	d106      	bne.n	80042fa <__sflush_r+0x62>
 80042ec:	6829      	ldr	r1, [r5, #0]
 80042ee:	291d      	cmp	r1, #29
 80042f0:	d82b      	bhi.n	800434a <__sflush_r+0xb2>
 80042f2:	4a2a      	ldr	r2, [pc, #168]	@ (800439c <__sflush_r+0x104>)
 80042f4:	410a      	asrs	r2, r1
 80042f6:	07d6      	lsls	r6, r2, #31
 80042f8:	d427      	bmi.n	800434a <__sflush_r+0xb2>
 80042fa:	2200      	movs	r2, #0
 80042fc:	6062      	str	r2, [r4, #4]
 80042fe:	04d9      	lsls	r1, r3, #19
 8004300:	6922      	ldr	r2, [r4, #16]
 8004302:	6022      	str	r2, [r4, #0]
 8004304:	d504      	bpl.n	8004310 <__sflush_r+0x78>
 8004306:	1c42      	adds	r2, r0, #1
 8004308:	d101      	bne.n	800430e <__sflush_r+0x76>
 800430a:	682b      	ldr	r3, [r5, #0]
 800430c:	b903      	cbnz	r3, 8004310 <__sflush_r+0x78>
 800430e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004310:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004312:	602f      	str	r7, [r5, #0]
 8004314:	b1b9      	cbz	r1, 8004346 <__sflush_r+0xae>
 8004316:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800431a:	4299      	cmp	r1, r3
 800431c:	d002      	beq.n	8004324 <__sflush_r+0x8c>
 800431e:	4628      	mov	r0, r5
 8004320:	f7ff fbf2 	bl	8003b08 <_free_r>
 8004324:	2300      	movs	r3, #0
 8004326:	6363      	str	r3, [r4, #52]	@ 0x34
 8004328:	e00d      	b.n	8004346 <__sflush_r+0xae>
 800432a:	2301      	movs	r3, #1
 800432c:	4628      	mov	r0, r5
 800432e:	47b0      	blx	r6
 8004330:	4602      	mov	r2, r0
 8004332:	1c50      	adds	r0, r2, #1
 8004334:	d1c9      	bne.n	80042ca <__sflush_r+0x32>
 8004336:	682b      	ldr	r3, [r5, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0c6      	beq.n	80042ca <__sflush_r+0x32>
 800433c:	2b1d      	cmp	r3, #29
 800433e:	d001      	beq.n	8004344 <__sflush_r+0xac>
 8004340:	2b16      	cmp	r3, #22
 8004342:	d11e      	bne.n	8004382 <__sflush_r+0xea>
 8004344:	602f      	str	r7, [r5, #0]
 8004346:	2000      	movs	r0, #0
 8004348:	e022      	b.n	8004390 <__sflush_r+0xf8>
 800434a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800434e:	b21b      	sxth	r3, r3
 8004350:	e01b      	b.n	800438a <__sflush_r+0xf2>
 8004352:	690f      	ldr	r7, [r1, #16]
 8004354:	2f00      	cmp	r7, #0
 8004356:	d0f6      	beq.n	8004346 <__sflush_r+0xae>
 8004358:	0793      	lsls	r3, r2, #30
 800435a:	680e      	ldr	r6, [r1, #0]
 800435c:	bf08      	it	eq
 800435e:	694b      	ldreq	r3, [r1, #20]
 8004360:	600f      	str	r7, [r1, #0]
 8004362:	bf18      	it	ne
 8004364:	2300      	movne	r3, #0
 8004366:	eba6 0807 	sub.w	r8, r6, r7
 800436a:	608b      	str	r3, [r1, #8]
 800436c:	f1b8 0f00 	cmp.w	r8, #0
 8004370:	dde9      	ble.n	8004346 <__sflush_r+0xae>
 8004372:	6a21      	ldr	r1, [r4, #32]
 8004374:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004376:	4643      	mov	r3, r8
 8004378:	463a      	mov	r2, r7
 800437a:	4628      	mov	r0, r5
 800437c:	47b0      	blx	r6
 800437e:	2800      	cmp	r0, #0
 8004380:	dc08      	bgt.n	8004394 <__sflush_r+0xfc>
 8004382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800438a:	81a3      	strh	r3, [r4, #12]
 800438c:	f04f 30ff 	mov.w	r0, #4294967295
 8004390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004394:	4407      	add	r7, r0
 8004396:	eba8 0800 	sub.w	r8, r8, r0
 800439a:	e7e7      	b.n	800436c <__sflush_r+0xd4>
 800439c:	dfbffffe 	.word	0xdfbffffe

080043a0 <_fflush_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	690b      	ldr	r3, [r1, #16]
 80043a4:	4605      	mov	r5, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	b913      	cbnz	r3, 80043b0 <_fflush_r+0x10>
 80043aa:	2500      	movs	r5, #0
 80043ac:	4628      	mov	r0, r5
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	b118      	cbz	r0, 80043ba <_fflush_r+0x1a>
 80043b2:	6a03      	ldr	r3, [r0, #32]
 80043b4:	b90b      	cbnz	r3, 80043ba <_fflush_r+0x1a>
 80043b6:	f7ff fa9f 	bl	80038f8 <__sinit>
 80043ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f3      	beq.n	80043aa <_fflush_r+0xa>
 80043c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80043c4:	07d0      	lsls	r0, r2, #31
 80043c6:	d404      	bmi.n	80043d2 <_fflush_r+0x32>
 80043c8:	0599      	lsls	r1, r3, #22
 80043ca:	d402      	bmi.n	80043d2 <_fflush_r+0x32>
 80043cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ce:	f7ff fb98 	bl	8003b02 <__retarget_lock_acquire_recursive>
 80043d2:	4628      	mov	r0, r5
 80043d4:	4621      	mov	r1, r4
 80043d6:	f7ff ff5f 	bl	8004298 <__sflush_r>
 80043da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043dc:	07da      	lsls	r2, r3, #31
 80043de:	4605      	mov	r5, r0
 80043e0:	d4e4      	bmi.n	80043ac <_fflush_r+0xc>
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	059b      	lsls	r3, r3, #22
 80043e6:	d4e1      	bmi.n	80043ac <_fflush_r+0xc>
 80043e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ea:	f7ff fb8b 	bl	8003b04 <__retarget_lock_release_recursive>
 80043ee:	e7dd      	b.n	80043ac <_fflush_r+0xc>

080043f0 <__swbuf_r>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	460e      	mov	r6, r1
 80043f4:	4614      	mov	r4, r2
 80043f6:	4605      	mov	r5, r0
 80043f8:	b118      	cbz	r0, 8004402 <__swbuf_r+0x12>
 80043fa:	6a03      	ldr	r3, [r0, #32]
 80043fc:	b90b      	cbnz	r3, 8004402 <__swbuf_r+0x12>
 80043fe:	f7ff fa7b 	bl	80038f8 <__sinit>
 8004402:	69a3      	ldr	r3, [r4, #24]
 8004404:	60a3      	str	r3, [r4, #8]
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	071a      	lsls	r2, r3, #28
 800440a:	d501      	bpl.n	8004410 <__swbuf_r+0x20>
 800440c:	6923      	ldr	r3, [r4, #16]
 800440e:	b943      	cbnz	r3, 8004422 <__swbuf_r+0x32>
 8004410:	4621      	mov	r1, r4
 8004412:	4628      	mov	r0, r5
 8004414:	f000 f82a 	bl	800446c <__swsetup_r>
 8004418:	b118      	cbz	r0, 8004422 <__swbuf_r+0x32>
 800441a:	f04f 37ff 	mov.w	r7, #4294967295
 800441e:	4638      	mov	r0, r7
 8004420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	6922      	ldr	r2, [r4, #16]
 8004426:	1a98      	subs	r0, r3, r2
 8004428:	6963      	ldr	r3, [r4, #20]
 800442a:	b2f6      	uxtb	r6, r6
 800442c:	4283      	cmp	r3, r0
 800442e:	4637      	mov	r7, r6
 8004430:	dc05      	bgt.n	800443e <__swbuf_r+0x4e>
 8004432:	4621      	mov	r1, r4
 8004434:	4628      	mov	r0, r5
 8004436:	f7ff ffb3 	bl	80043a0 <_fflush_r>
 800443a:	2800      	cmp	r0, #0
 800443c:	d1ed      	bne.n	800441a <__swbuf_r+0x2a>
 800443e:	68a3      	ldr	r3, [r4, #8]
 8004440:	3b01      	subs	r3, #1
 8004442:	60a3      	str	r3, [r4, #8]
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	6022      	str	r2, [r4, #0]
 800444a:	701e      	strb	r6, [r3, #0]
 800444c:	6962      	ldr	r2, [r4, #20]
 800444e:	1c43      	adds	r3, r0, #1
 8004450:	429a      	cmp	r2, r3
 8004452:	d004      	beq.n	800445e <__swbuf_r+0x6e>
 8004454:	89a3      	ldrh	r3, [r4, #12]
 8004456:	07db      	lsls	r3, r3, #31
 8004458:	d5e1      	bpl.n	800441e <__swbuf_r+0x2e>
 800445a:	2e0a      	cmp	r6, #10
 800445c:	d1df      	bne.n	800441e <__swbuf_r+0x2e>
 800445e:	4621      	mov	r1, r4
 8004460:	4628      	mov	r0, r5
 8004462:	f7ff ff9d 	bl	80043a0 <_fflush_r>
 8004466:	2800      	cmp	r0, #0
 8004468:	d0d9      	beq.n	800441e <__swbuf_r+0x2e>
 800446a:	e7d6      	b.n	800441a <__swbuf_r+0x2a>

0800446c <__swsetup_r>:
 800446c:	b538      	push	{r3, r4, r5, lr}
 800446e:	4b29      	ldr	r3, [pc, #164]	@ (8004514 <__swsetup_r+0xa8>)
 8004470:	4605      	mov	r5, r0
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	460c      	mov	r4, r1
 8004476:	b118      	cbz	r0, 8004480 <__swsetup_r+0x14>
 8004478:	6a03      	ldr	r3, [r0, #32]
 800447a:	b90b      	cbnz	r3, 8004480 <__swsetup_r+0x14>
 800447c:	f7ff fa3c 	bl	80038f8 <__sinit>
 8004480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004484:	0719      	lsls	r1, r3, #28
 8004486:	d422      	bmi.n	80044ce <__swsetup_r+0x62>
 8004488:	06da      	lsls	r2, r3, #27
 800448a:	d407      	bmi.n	800449c <__swsetup_r+0x30>
 800448c:	2209      	movs	r2, #9
 800448e:	602a      	str	r2, [r5, #0]
 8004490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004494:	81a3      	strh	r3, [r4, #12]
 8004496:	f04f 30ff 	mov.w	r0, #4294967295
 800449a:	e033      	b.n	8004504 <__swsetup_r+0x98>
 800449c:	0758      	lsls	r0, r3, #29
 800449e:	d512      	bpl.n	80044c6 <__swsetup_r+0x5a>
 80044a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044a2:	b141      	cbz	r1, 80044b6 <__swsetup_r+0x4a>
 80044a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044a8:	4299      	cmp	r1, r3
 80044aa:	d002      	beq.n	80044b2 <__swsetup_r+0x46>
 80044ac:	4628      	mov	r0, r5
 80044ae:	f7ff fb2b 	bl	8003b08 <_free_r>
 80044b2:	2300      	movs	r3, #0
 80044b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80044b6:	89a3      	ldrh	r3, [r4, #12]
 80044b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80044bc:	81a3      	strh	r3, [r4, #12]
 80044be:	2300      	movs	r3, #0
 80044c0:	6063      	str	r3, [r4, #4]
 80044c2:	6923      	ldr	r3, [r4, #16]
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	89a3      	ldrh	r3, [r4, #12]
 80044c8:	f043 0308 	orr.w	r3, r3, #8
 80044cc:	81a3      	strh	r3, [r4, #12]
 80044ce:	6923      	ldr	r3, [r4, #16]
 80044d0:	b94b      	cbnz	r3, 80044e6 <__swsetup_r+0x7a>
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80044d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044dc:	d003      	beq.n	80044e6 <__swsetup_r+0x7a>
 80044de:	4621      	mov	r1, r4
 80044e0:	4628      	mov	r0, r5
 80044e2:	f000 f84f 	bl	8004584 <__smakebuf_r>
 80044e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ea:	f013 0201 	ands.w	r2, r3, #1
 80044ee:	d00a      	beq.n	8004506 <__swsetup_r+0x9a>
 80044f0:	2200      	movs	r2, #0
 80044f2:	60a2      	str	r2, [r4, #8]
 80044f4:	6962      	ldr	r2, [r4, #20]
 80044f6:	4252      	negs	r2, r2
 80044f8:	61a2      	str	r2, [r4, #24]
 80044fa:	6922      	ldr	r2, [r4, #16]
 80044fc:	b942      	cbnz	r2, 8004510 <__swsetup_r+0xa4>
 80044fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004502:	d1c5      	bne.n	8004490 <__swsetup_r+0x24>
 8004504:	bd38      	pop	{r3, r4, r5, pc}
 8004506:	0799      	lsls	r1, r3, #30
 8004508:	bf58      	it	pl
 800450a:	6962      	ldrpl	r2, [r4, #20]
 800450c:	60a2      	str	r2, [r4, #8]
 800450e:	e7f4      	b.n	80044fa <__swsetup_r+0x8e>
 8004510:	2000      	movs	r0, #0
 8004512:	e7f7      	b.n	8004504 <__swsetup_r+0x98>
 8004514:	20000028 	.word	0x20000028

08004518 <_sbrk_r>:
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	4d06      	ldr	r5, [pc, #24]	@ (8004534 <_sbrk_r+0x1c>)
 800451c:	2300      	movs	r3, #0
 800451e:	4604      	mov	r4, r0
 8004520:	4608      	mov	r0, r1
 8004522:	602b      	str	r3, [r5, #0]
 8004524:	f7fc fb68 	bl	8000bf8 <_sbrk>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d102      	bne.n	8004532 <_sbrk_r+0x1a>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	b103      	cbz	r3, 8004532 <_sbrk_r+0x1a>
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	200002f4 	.word	0x200002f4

08004538 <__swhatbuf_r>:
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	460c      	mov	r4, r1
 800453c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004540:	2900      	cmp	r1, #0
 8004542:	b096      	sub	sp, #88	@ 0x58
 8004544:	4615      	mov	r5, r2
 8004546:	461e      	mov	r6, r3
 8004548:	da0d      	bge.n	8004566 <__swhatbuf_r+0x2e>
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004550:	f04f 0100 	mov.w	r1, #0
 8004554:	bf14      	ite	ne
 8004556:	2340      	movne	r3, #64	@ 0x40
 8004558:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800455c:	2000      	movs	r0, #0
 800455e:	6031      	str	r1, [r6, #0]
 8004560:	602b      	str	r3, [r5, #0]
 8004562:	b016      	add	sp, #88	@ 0x58
 8004564:	bd70      	pop	{r4, r5, r6, pc}
 8004566:	466a      	mov	r2, sp
 8004568:	f000 f848 	bl	80045fc <_fstat_r>
 800456c:	2800      	cmp	r0, #0
 800456e:	dbec      	blt.n	800454a <__swhatbuf_r+0x12>
 8004570:	9901      	ldr	r1, [sp, #4]
 8004572:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004576:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800457a:	4259      	negs	r1, r3
 800457c:	4159      	adcs	r1, r3
 800457e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004582:	e7eb      	b.n	800455c <__swhatbuf_r+0x24>

08004584 <__smakebuf_r>:
 8004584:	898b      	ldrh	r3, [r1, #12]
 8004586:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004588:	079d      	lsls	r5, r3, #30
 800458a:	4606      	mov	r6, r0
 800458c:	460c      	mov	r4, r1
 800458e:	d507      	bpl.n	80045a0 <__smakebuf_r+0x1c>
 8004590:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	6123      	str	r3, [r4, #16]
 8004598:	2301      	movs	r3, #1
 800459a:	6163      	str	r3, [r4, #20]
 800459c:	b003      	add	sp, #12
 800459e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a0:	ab01      	add	r3, sp, #4
 80045a2:	466a      	mov	r2, sp
 80045a4:	f7ff ffc8 	bl	8004538 <__swhatbuf_r>
 80045a8:	9f00      	ldr	r7, [sp, #0]
 80045aa:	4605      	mov	r5, r0
 80045ac:	4639      	mov	r1, r7
 80045ae:	4630      	mov	r0, r6
 80045b0:	f7ff fb16 	bl	8003be0 <_malloc_r>
 80045b4:	b948      	cbnz	r0, 80045ca <__smakebuf_r+0x46>
 80045b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ba:	059a      	lsls	r2, r3, #22
 80045bc:	d4ee      	bmi.n	800459c <__smakebuf_r+0x18>
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	f043 0302 	orr.w	r3, r3, #2
 80045c6:	81a3      	strh	r3, [r4, #12]
 80045c8:	e7e2      	b.n	8004590 <__smakebuf_r+0xc>
 80045ca:	89a3      	ldrh	r3, [r4, #12]
 80045cc:	6020      	str	r0, [r4, #0]
 80045ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045d2:	81a3      	strh	r3, [r4, #12]
 80045d4:	9b01      	ldr	r3, [sp, #4]
 80045d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80045da:	b15b      	cbz	r3, 80045f4 <__smakebuf_r+0x70>
 80045dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045e0:	4630      	mov	r0, r6
 80045e2:	f000 f81d 	bl	8004620 <_isatty_r>
 80045e6:	b128      	cbz	r0, 80045f4 <__smakebuf_r+0x70>
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	f023 0303 	bic.w	r3, r3, #3
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	81a3      	strh	r3, [r4, #12]
 80045f4:	89a3      	ldrh	r3, [r4, #12]
 80045f6:	431d      	orrs	r5, r3
 80045f8:	81a5      	strh	r5, [r4, #12]
 80045fa:	e7cf      	b.n	800459c <__smakebuf_r+0x18>

080045fc <_fstat_r>:
 80045fc:	b538      	push	{r3, r4, r5, lr}
 80045fe:	4d07      	ldr	r5, [pc, #28]	@ (800461c <_fstat_r+0x20>)
 8004600:	2300      	movs	r3, #0
 8004602:	4604      	mov	r4, r0
 8004604:	4608      	mov	r0, r1
 8004606:	4611      	mov	r1, r2
 8004608:	602b      	str	r3, [r5, #0]
 800460a:	f7fc facd 	bl	8000ba8 <_fstat>
 800460e:	1c43      	adds	r3, r0, #1
 8004610:	d102      	bne.n	8004618 <_fstat_r+0x1c>
 8004612:	682b      	ldr	r3, [r5, #0]
 8004614:	b103      	cbz	r3, 8004618 <_fstat_r+0x1c>
 8004616:	6023      	str	r3, [r4, #0]
 8004618:	bd38      	pop	{r3, r4, r5, pc}
 800461a:	bf00      	nop
 800461c:	200002f4 	.word	0x200002f4

08004620 <_isatty_r>:
 8004620:	b538      	push	{r3, r4, r5, lr}
 8004622:	4d06      	ldr	r5, [pc, #24]	@ (800463c <_isatty_r+0x1c>)
 8004624:	2300      	movs	r3, #0
 8004626:	4604      	mov	r4, r0
 8004628:	4608      	mov	r0, r1
 800462a:	602b      	str	r3, [r5, #0]
 800462c:	f7fc facc 	bl	8000bc8 <_isatty>
 8004630:	1c43      	adds	r3, r0, #1
 8004632:	d102      	bne.n	800463a <_isatty_r+0x1a>
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	b103      	cbz	r3, 800463a <_isatty_r+0x1a>
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	bd38      	pop	{r3, r4, r5, pc}
 800463c:	200002f4 	.word	0x200002f4

08004640 <_init>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	bf00      	nop
 8004644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004646:	bc08      	pop	{r3}
 8004648:	469e      	mov	lr, r3
 800464a:	4770      	bx	lr

0800464c <_fini>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	bf00      	nop
 8004650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004652:	bc08      	pop	{r3}
 8004654:	469e      	mov	lr, r3
 8004656:	4770      	bx	lr
